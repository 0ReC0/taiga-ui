/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Optional } from '@angular/core';
import { NAVIGATOR } from '@ng-web-apis/common';
import { SSR_USER_AGENT } from '../tokens/ssr-user-agent';
import { alwaysFalse, alwaysRejected, alwaysZero, empty, emptyArray, emptyObject, } from '../utils/functions';
/** @type {?} */
var EVENT_TARGET = {
    addEventListener: empty,
    dispatchEvent: alwaysFalse,
    removeEventListener: empty,
};
/** @type {?} */
var PLUGIN = new (/** @class */ (function (_super) {
    tslib_1.__extends(class_1, _super);
    function class_1() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.description = '';
        _this.filename = '';
        _this.name = '';
        _this.version = '';
        return _this;
    }
    /**
     * @return {?}
     */
    class_1.prototype.item = /**
     * @return {?}
     */
    function () {
        return {
            description: '',
            enabledPlugin: this,
            suffixes: '',
            type: '',
        };
    };
    /**
     * @return {?}
     */
    class_1.prototype.namedItem = /**
     * @return {?}
     */
    function () {
        return {
            description: '',
            enabledPlugin: this,
            suffixes: '',
            type: '',
        };
    };
    return class_1;
}(Array)))();
/** @type {?} */
var MIME_TYPES = new (/** @class */ (function (_super) {
    tslib_1.__extends(class_2, _super);
    function class_2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    class_2.prototype.item = /**
     * @return {?}
     */
    function () {
        return PLUGIN;
    };
    /**
     * @return {?}
     */
    class_2.prototype.namedItem = /**
     * @return {?}
     */
    function () {
        return PLUGIN;
    };
    /**
     * @return {?}
     */
    class_2.prototype.refresh = /**
     * @return {?}
     */
    function () { };
    return class_2;
}(Array)))();
/**
 * For older version of TS and Angular that do not support all properties from Navigator
 * @record
 */
function NavigatorLike() { }
/**
 * @param {?} userAgent
 * @return {?}
 */
export function navigatorFactory(userAgent) {
    return {
        appCodeName: '',
        appName: '',
        appVersion: '',
        platform: '',
        product: '',
        productSub: '',
        userAgent: userAgent || '',
        vendor: '',
        vendorSub: '',
        onLine: false,
        confirmSiteSpecificTrackingException: alwaysFalse,
        confirmWebWideTrackingException: alwaysFalse,
        removeSiteSpecificTrackingException: empty,
        removeWebWideTrackingException: empty,
        storeSiteSpecificTrackingException: empty,
        storeWebWideTrackingException: empty,
        msSaveBlob: alwaysFalse,
        msSaveOrOpenBlob: alwaysFalse,
        sendBeacon: alwaysFalse,
        hardwareConcurrency: 0,
        getDisplayMedia: alwaysRejected,
        language: '',
        languages: [],
        storage: {
            estimate: alwaysRejected,
            persist: alwaysRejected,
            persisted: alwaysRejected,
        },
        activeVRDisplays: [],
        authentication: {
            getAssertion: alwaysRejected,
            makeCredential: alwaysRejected,
        },
        clipboard: tslib_1.__assign({}, EVENT_TARGET, { readText: alwaysRejected, writeText: alwaysRejected }),
        cookieEnabled: false,
        doNotTrack: null,
        gamepadInputEmulation: 'keyboard',
        geolocation: {
            clearWatch: empty,
            getCurrentPosition: empty,
            watchPosition: alwaysZero,
        },
        maxTouchPoints: 0,
        mediaDevices: tslib_1.__assign({}, EVENT_TARGET, { ondevicechange: null, enumerateDevices: alwaysRejected, getSupportedConstraints: emptyObject, getUserMedia: alwaysRejected }),
        mimeTypes: MIME_TYPES,
        msManipulationViewsEnabled: false,
        msMaxTouchPoints: 0,
        msPointerEnabled: false,
        permissions: {
            query: alwaysRejected,
        },
        plugins: MIME_TYPES,
        pointerEnabled: false,
        serviceWorker: tslib_1.__assign({}, EVENT_TARGET, { controller: null, oncontrollerchange: null, onmessage: null, onmessageerror: null, ready: alwaysRejected(), getRegistration: alwaysRejected, getRegistrations: alwaysRejected, register: alwaysRejected, startMessages: empty }),
        webdriver: false,
        getGamepads: emptyArray,
        getUserMedia: empty,
        getVRDisplays: alwaysRejected,
        javaEnabled: alwaysFalse,
        msLaunchUri: empty,
        requestMediaKeySystemAccess: alwaysRejected,
        vibrate: alwaysFalse,
    };
}
/** @type {?} */
export var UNIVERSAL_NAVIGATOR = {
    provide: NAVIGATOR,
    deps: [[new Optional(), SSR_USER_AGENT]],
    useFactory: navigatorFactory,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdmVyc2FsLW5hdmlnYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy13ZWItYXBpcy91bml2ZXJzYWwvIiwic291cmNlcyI6WyJjb25zdGFudHMvdW5pdmVyc2FsLW5hdmlnYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBa0IsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUNILFdBQVcsRUFDWCxjQUFjLEVBQ2QsVUFBVSxFQUNWLEtBQUssRUFDTCxVQUFVLEVBQ1YsV0FBVyxHQUNkLE1BQU0sb0JBQW9CLENBQUM7O0lBRXRCLFlBQVksR0FBZ0I7SUFDOUIsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixhQUFhLEVBQUUsV0FBVztJQUMxQixtQkFBbUIsRUFBRSxLQUFLO0NBQzdCOztJQUVLLE1BQU0sR0FBRyxJQUFJO0lBQWUsbUNBQWU7SUFBN0I7UUFBQSxxRUFzQm5CO1FBckJZLGlCQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLGNBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxVQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsYUFBTyxHQUFHLEVBQUUsQ0FBQzs7SUFrQjFCLENBQUM7Ozs7SUFoQkcsc0JBQUk7OztJQUFKO1FBQ0ksT0FBTztZQUNILFdBQVcsRUFBRSxFQUFFO1lBQ2YsYUFBYSxFQUFFLElBQUk7WUFDbkIsUUFBUSxFQUFFLEVBQUU7WUFDWixJQUFJLEVBQUUsRUFBRTtTQUNYLENBQUM7SUFDTixDQUFDOzs7O0lBQ0QsMkJBQVM7OztJQUFUO1FBQ0ksT0FBTztZQUNILFdBQVcsRUFBRSxFQUFFO1lBQ2YsYUFBYSxFQUFFLElBQUk7WUFDbkIsUUFBUSxFQUFFLEVBQUU7WUFDWixJQUFJLEVBQUUsRUFBRTtTQUNYLENBQUM7SUFDTixDQUFDO0lBQ0wsY0FBQztBQUFELENBQUMsQUF0Qm1CLENBQWMsS0FBSyxHQXNCckMsRUFBRTs7SUFFRSxVQUFVLEdBQUcsSUFBSTtJQUFlLG1DQUFhO0lBQTNCOztJQVF4QixDQUFDOzs7O0lBUEcsc0JBQUk7OztJQUFKO1FBQ0ksT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7OztJQUNELDJCQUFTOzs7SUFBVDtRQUNJLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7SUFDRCx5QkFBTzs7O0lBQVAsY0FBVyxDQUFDO0lBQ2hCLGNBQUM7QUFBRCxDQUFDLEFBUnVCLENBQWMsS0FBSyxHQVF6QyxFQUFFOzs7OztBQUdKLDRCQUVDOzs7OztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxTQUF3QjtJQUNyRCxPQUFPO1FBQ0gsV0FBVyxFQUFFLEVBQUU7UUFDZixPQUFPLEVBQUUsRUFBRTtRQUNYLFVBQVUsRUFBRSxFQUFFO1FBQ2QsUUFBUSxFQUFFLEVBQUU7UUFDWixPQUFPLEVBQUUsRUFBRTtRQUNYLFVBQVUsRUFBRSxFQUFFO1FBQ2QsU0FBUyxFQUFFLFNBQVMsSUFBSSxFQUFFO1FBQzFCLE1BQU0sRUFBRSxFQUFFO1FBQ1YsU0FBUyxFQUFFLEVBQUU7UUFFYixNQUFNLEVBQUUsS0FBSztRQUViLG9DQUFvQyxFQUFFLFdBQVc7UUFDakQsK0JBQStCLEVBQUUsV0FBVztRQUM1QyxtQ0FBbUMsRUFBRSxLQUFLO1FBQzFDLDhCQUE4QixFQUFFLEtBQUs7UUFDckMsa0NBQWtDLEVBQUUsS0FBSztRQUN6Qyw2QkFBNkIsRUFBRSxLQUFLO1FBRXBDLFVBQVUsRUFBRSxXQUFXO1FBQ3ZCLGdCQUFnQixFQUFFLFdBQVc7UUFFN0IsVUFBVSxFQUFFLFdBQVc7UUFFdkIsbUJBQW1CLEVBQUUsQ0FBQztRQUV0QixlQUFlLEVBQUUsY0FBYztRQUUvQixRQUFRLEVBQUUsRUFBRTtRQUNaLFNBQVMsRUFBRSxFQUFFO1FBRWIsT0FBTyxFQUFFO1lBQ0wsUUFBUSxFQUFFLGNBQWM7WUFDeEIsT0FBTyxFQUFFLGNBQWM7WUFDdkIsU0FBUyxFQUFFLGNBQWM7U0FDNUI7UUFFRCxnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCLGNBQWMsRUFBRTtZQUNaLFlBQVksRUFBRSxjQUFjO1lBQzVCLGNBQWMsRUFBRSxjQUFjO1NBQ2pDO1FBQ0QsU0FBUyx1QkFDRixZQUFZLElBQ2YsUUFBUSxFQUFFLGNBQWMsRUFDeEIsU0FBUyxFQUFFLGNBQWMsR0FDNUI7UUFDRCxhQUFhLEVBQUUsS0FBSztRQUNwQixVQUFVLEVBQUUsSUFBSTtRQUNoQixxQkFBcUIsRUFBRSxVQUFVO1FBQ2pDLFdBQVcsRUFBRTtZQUNULFVBQVUsRUFBRSxLQUFLO1lBQ2pCLGtCQUFrQixFQUFFLEtBQUs7WUFDekIsYUFBYSxFQUFFLFVBQVU7U0FDNUI7UUFDRCxjQUFjLEVBQUUsQ0FBQztRQUNqQixZQUFZLHVCQUNMLFlBQVksSUFDZixjQUFjLEVBQUUsSUFBSSxFQUNwQixnQkFBZ0IsRUFBRSxjQUFjLEVBQ2hDLHVCQUF1QixFQUFFLFdBQVcsRUFDcEMsWUFBWSxFQUFFLGNBQWMsR0FDL0I7UUFDRCxTQUFTLEVBQUUsVUFBVTtRQUNyQiwwQkFBMEIsRUFBRSxLQUFLO1FBQ2pDLGdCQUFnQixFQUFFLENBQUM7UUFDbkIsZ0JBQWdCLEVBQUUsS0FBSztRQUN2QixXQUFXLEVBQUU7WUFDVCxLQUFLLEVBQUUsY0FBYztTQUN4QjtRQUNELE9BQU8sRUFBRSxVQUFVO1FBQ25CLGNBQWMsRUFBRSxLQUFLO1FBQ3JCLGFBQWEsdUJBQ04sWUFBWSxJQUNmLFVBQVUsRUFBRSxJQUFJLEVBQ2hCLGtCQUFrQixFQUFFLElBQUksRUFDeEIsU0FBUyxFQUFFLElBQUksRUFDZixjQUFjLEVBQUUsSUFBSSxFQUNwQixLQUFLLEVBQUUsY0FBYyxFQUFFLEVBQ3ZCLGVBQWUsRUFBRSxjQUFjLEVBQy9CLGdCQUFnQixFQUFFLGNBQWMsRUFDaEMsUUFBUSxFQUFFLGNBQWMsRUFDeEIsYUFBYSxFQUFFLEtBQUssR0FDdkI7UUFDRCxTQUFTLEVBQUUsS0FBSztRQUNoQixXQUFXLEVBQUUsVUFBVTtRQUN2QixZQUFZLEVBQUUsS0FBSztRQUNuQixhQUFhLEVBQUUsY0FBYztRQUM3QixXQUFXLEVBQUUsV0FBVztRQUN4QixXQUFXLEVBQUUsS0FBSztRQUNsQiwyQkFBMkIsRUFBRSxjQUFjO1FBQzNDLE9BQU8sRUFBRSxXQUFXO0tBQ3ZCLENBQUM7QUFDTixDQUFDOztBQUVELE1BQU0sS0FBTyxtQkFBbUIsR0FBb0I7SUFDaEQsT0FBTyxFQUFFLFNBQVM7SUFDbEIsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3hDLFVBQVUsRUFBRSxnQkFBZ0I7Q0FDL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZhY3RvcnlQcm92aWRlciwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge05BVklHQVRPUn0gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XHJcbmltcG9ydCB7U1NSX1VTRVJfQUdFTlR9IGZyb20gJy4uL3Rva2Vucy9zc3ItdXNlci1hZ2VudCc7XHJcbmltcG9ydCB7XHJcbiAgICBhbHdheXNGYWxzZSxcclxuICAgIGFsd2F5c1JlamVjdGVkLFxyXG4gICAgYWx3YXlzWmVybyxcclxuICAgIGVtcHR5LFxyXG4gICAgZW1wdHlBcnJheSxcclxuICAgIGVtcHR5T2JqZWN0LFxyXG59IGZyb20gJy4uL3V0aWxzL2Z1bmN0aW9ucyc7XHJcblxyXG5jb25zdCBFVkVOVF9UQVJHRVQ6IEV2ZW50VGFyZ2V0ID0ge1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZW1wdHksXHJcbiAgICBkaXNwYXRjaEV2ZW50OiBhbHdheXNGYWxzZSxcclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGVtcHR5LFxyXG59O1xyXG5cclxuY29uc3QgUExVR0lOID0gbmV3IChjbGFzcyBleHRlbmRzIEFycmF5PE1pbWVUeXBlPiBpbXBsZW1lbnRzIFBsdWdpbiB7XHJcbiAgICByZWFkb25seSBkZXNjcmlwdGlvbiA9ICcnO1xyXG4gICAgcmVhZG9ubHkgZmlsZW5hbWUgPSAnJztcclxuICAgIHJlYWRvbmx5IG5hbWUgPSAnJztcclxuICAgIHJlYWRvbmx5IHZlcnNpb24gPSAnJztcclxuXHJcbiAgICBpdGVtKCk6IE1pbWVUeXBlIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXHJcbiAgICAgICAgICAgIGVuYWJsZWRQbHVnaW46IHRoaXMsXHJcbiAgICAgICAgICAgIHN1ZmZpeGVzOiAnJyxcclxuICAgICAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIG5hbWVkSXRlbSgpOiBNaW1lVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICcnLFxyXG4gICAgICAgICAgICBlbmFibGVkUGx1Z2luOiB0aGlzLFxyXG4gICAgICAgICAgICBzdWZmaXhlczogJycsXHJcbiAgICAgICAgICAgIHR5cGU6ICcnLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5jb25zdCBNSU1FX1RZUEVTID0gbmV3IChjbGFzcyBleHRlbmRzIEFycmF5PFBsdWdpbj4gaW1wbGVtZW50cyBNaW1lVHlwZUFycmF5IHtcclxuICAgIGl0ZW0oKTogUGx1Z2luIHtcclxuICAgICAgICByZXR1cm4gUExVR0lOO1xyXG4gICAgfVxyXG4gICAgbmFtZWRJdGVtKCk6IFBsdWdpbiB7XHJcbiAgICAgICAgcmV0dXJuIFBMVUdJTjtcclxuICAgIH1cclxuICAgIHJlZnJlc2goKSB7fVxyXG59KSgpO1xyXG5cclxuLyoqIEZvciBvbGRlciB2ZXJzaW9uIG9mIFRTIGFuZCBBbmd1bGFyIHRoYXQgZG8gbm90IHN1cHBvcnQgYWxsIHByb3BlcnRpZXMgZnJvbSBOYXZpZ2F0b3IgKi9cclxuaW50ZXJmYWNlIE5hdmlnYXRvckxpa2UgZXh0ZW5kcyBOYXZpZ2F0b3Ige1xyXG4gICAgW2tleTogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdG9yRmFjdG9yeSh1c2VyQWdlbnQ6IHN0cmluZyB8IG51bGwpOiBOYXZpZ2F0b3JMaWtlIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXBwQ29kZU5hbWU6ICcnLFxyXG4gICAgICAgIGFwcE5hbWU6ICcnLFxyXG4gICAgICAgIGFwcFZlcnNpb246ICcnLFxyXG4gICAgICAgIHBsYXRmb3JtOiAnJyxcclxuICAgICAgICBwcm9kdWN0OiAnJyxcclxuICAgICAgICBwcm9kdWN0U3ViOiAnJyxcclxuICAgICAgICB1c2VyQWdlbnQ6IHVzZXJBZ2VudCB8fCAnJyxcclxuICAgICAgICB2ZW5kb3I6ICcnLFxyXG4gICAgICAgIHZlbmRvclN1YjogJycsXHJcblxyXG4gICAgICAgIG9uTGluZTogZmFsc2UsXHJcblxyXG4gICAgICAgIGNvbmZpcm1TaXRlU3BlY2lmaWNUcmFja2luZ0V4Y2VwdGlvbjogYWx3YXlzRmFsc2UsXHJcbiAgICAgICAgY29uZmlybVdlYldpZGVUcmFja2luZ0V4Y2VwdGlvbjogYWx3YXlzRmFsc2UsXHJcbiAgICAgICAgcmVtb3ZlU2l0ZVNwZWNpZmljVHJhY2tpbmdFeGNlcHRpb246IGVtcHR5LFxyXG4gICAgICAgIHJlbW92ZVdlYldpZGVUcmFja2luZ0V4Y2VwdGlvbjogZW1wdHksXHJcbiAgICAgICAgc3RvcmVTaXRlU3BlY2lmaWNUcmFja2luZ0V4Y2VwdGlvbjogZW1wdHksXHJcbiAgICAgICAgc3RvcmVXZWJXaWRlVHJhY2tpbmdFeGNlcHRpb246IGVtcHR5LFxyXG5cclxuICAgICAgICBtc1NhdmVCbG9iOiBhbHdheXNGYWxzZSxcclxuICAgICAgICBtc1NhdmVPck9wZW5CbG9iOiBhbHdheXNGYWxzZSxcclxuXHJcbiAgICAgICAgc2VuZEJlYWNvbjogYWx3YXlzRmFsc2UsXHJcblxyXG4gICAgICAgIGhhcmR3YXJlQ29uY3VycmVuY3k6IDAsXHJcblxyXG4gICAgICAgIGdldERpc3BsYXlNZWRpYTogYWx3YXlzUmVqZWN0ZWQsXHJcblxyXG4gICAgICAgIGxhbmd1YWdlOiAnJyxcclxuICAgICAgICBsYW5ndWFnZXM6IFtdLFxyXG5cclxuICAgICAgICBzdG9yYWdlOiB7XHJcbiAgICAgICAgICAgIGVzdGltYXRlOiBhbHdheXNSZWplY3RlZCxcclxuICAgICAgICAgICAgcGVyc2lzdDogYWx3YXlzUmVqZWN0ZWQsXHJcbiAgICAgICAgICAgIHBlcnNpc3RlZDogYWx3YXlzUmVqZWN0ZWQsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWN0aXZlVlJEaXNwbGF5czogW10sXHJcbiAgICAgICAgYXV0aGVudGljYXRpb246IHtcclxuICAgICAgICAgICAgZ2V0QXNzZXJ0aW9uOiBhbHdheXNSZWplY3RlZCxcclxuICAgICAgICAgICAgbWFrZUNyZWRlbnRpYWw6IGFsd2F5c1JlamVjdGVkLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xpcGJvYXJkOiB7XHJcbiAgICAgICAgICAgIC4uLkVWRU5UX1RBUkdFVCxcclxuICAgICAgICAgICAgcmVhZFRleHQ6IGFsd2F5c1JlamVjdGVkLFxyXG4gICAgICAgICAgICB3cml0ZVRleHQ6IGFsd2F5c1JlamVjdGVkLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29va2llRW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgZG9Ob3RUcmFjazogbnVsbCxcclxuICAgICAgICBnYW1lcGFkSW5wdXRFbXVsYXRpb246ICdrZXlib2FyZCcsXHJcbiAgICAgICAgZ2VvbG9jYXRpb246IHtcclxuICAgICAgICAgICAgY2xlYXJXYXRjaDogZW1wdHksXHJcbiAgICAgICAgICAgIGdldEN1cnJlbnRQb3NpdGlvbjogZW1wdHksXHJcbiAgICAgICAgICAgIHdhdGNoUG9zaXRpb246IGFsd2F5c1plcm8sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXhUb3VjaFBvaW50czogMCxcclxuICAgICAgICBtZWRpYURldmljZXM6IHtcclxuICAgICAgICAgICAgLi4uRVZFTlRfVEFSR0VULFxyXG4gICAgICAgICAgICBvbmRldmljZWNoYW5nZTogbnVsbCxcclxuICAgICAgICAgICAgZW51bWVyYXRlRGV2aWNlczogYWx3YXlzUmVqZWN0ZWQsXHJcbiAgICAgICAgICAgIGdldFN1cHBvcnRlZENvbnN0cmFpbnRzOiBlbXB0eU9iamVjdCxcclxuICAgICAgICAgICAgZ2V0VXNlck1lZGlhOiBhbHdheXNSZWplY3RlZCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1pbWVUeXBlczogTUlNRV9UWVBFUyxcclxuICAgICAgICBtc01hbmlwdWxhdGlvblZpZXdzRW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgbXNNYXhUb3VjaFBvaW50czogMCxcclxuICAgICAgICBtc1BvaW50ZXJFbmFibGVkOiBmYWxzZSxcclxuICAgICAgICBwZXJtaXNzaW9uczoge1xyXG4gICAgICAgICAgICBxdWVyeTogYWx3YXlzUmVqZWN0ZWQsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwbHVnaW5zOiBNSU1FX1RZUEVTLFxyXG4gICAgICAgIHBvaW50ZXJFbmFibGVkOiBmYWxzZSxcclxuICAgICAgICBzZXJ2aWNlV29ya2VyOiB7XHJcbiAgICAgICAgICAgIC4uLkVWRU5UX1RBUkdFVCxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogbnVsbCxcclxuICAgICAgICAgICAgb25jb250cm9sbGVyY2hhbmdlOiBudWxsLFxyXG4gICAgICAgICAgICBvbm1lc3NhZ2U6IG51bGwsXHJcbiAgICAgICAgICAgIG9ubWVzc2FnZWVycm9yOiBudWxsLFxyXG4gICAgICAgICAgICByZWFkeTogYWx3YXlzUmVqZWN0ZWQoKSxcclxuICAgICAgICAgICAgZ2V0UmVnaXN0cmF0aW9uOiBhbHdheXNSZWplY3RlZCxcclxuICAgICAgICAgICAgZ2V0UmVnaXN0cmF0aW9uczogYWx3YXlzUmVqZWN0ZWQsXHJcbiAgICAgICAgICAgIHJlZ2lzdGVyOiBhbHdheXNSZWplY3RlZCxcclxuICAgICAgICAgICAgc3RhcnRNZXNzYWdlczogZW1wdHksXHJcbiAgICAgICAgfSxcclxuICAgICAgICB3ZWJkcml2ZXI6IGZhbHNlLFxyXG4gICAgICAgIGdldEdhbWVwYWRzOiBlbXB0eUFycmF5LFxyXG4gICAgICAgIGdldFVzZXJNZWRpYTogZW1wdHksXHJcbiAgICAgICAgZ2V0VlJEaXNwbGF5czogYWx3YXlzUmVqZWN0ZWQsXHJcbiAgICAgICAgamF2YUVuYWJsZWQ6IGFsd2F5c0ZhbHNlLFxyXG4gICAgICAgIG1zTGF1bmNoVXJpOiBlbXB0eSxcclxuICAgICAgICByZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3M6IGFsd2F5c1JlamVjdGVkLFxyXG4gICAgICAgIHZpYnJhdGU6IGFsd2F5c0ZhbHNlLFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFVOSVZFUlNBTF9OQVZJR0FUT1I6IEZhY3RvcnlQcm92aWRlciA9IHtcclxuICAgIHByb3ZpZGU6IE5BVklHQVRPUixcclxuICAgIGRlcHM6IFtbbmV3IE9wdGlvbmFsKCksIFNTUl9VU0VSX0FHRU5UXV0sXHJcbiAgICB1c2VGYWN0b3J5OiBuYXZpZ2F0b3JGYWN0b3J5LFxyXG59O1xyXG4iXX0=