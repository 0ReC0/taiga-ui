/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Optional } from '@angular/core';
import { NAVIGATOR } from '@ng-web-apis/common';
import { SSR_USER_AGENT } from '../tokens/ssr-user-agent';
import { alwaysFalse, alwaysRejected, alwaysZero, empty, emptyArray, emptyObject, } from '../utils/functions';
/** @type {?} */
const EVENT_TARGET = {
    addEventListener: empty,
    dispatchEvent: alwaysFalse,
    removeEventListener: empty,
};
/** @type {?} */
const PLUGIN = new (class extends Array {
    constructor() {
        super(...arguments);
        this.description = '';
        this.filename = '';
        this.name = '';
        this.version = '';
    }
    /**
     * @return {?}
     */
    item() {
        return {
            description: '',
            enabledPlugin: this,
            suffixes: '',
            type: '',
        };
    }
    /**
     * @return {?}
     */
    namedItem() {
        return {
            description: '',
            enabledPlugin: this,
            suffixes: '',
            type: '',
        };
    }
})();
/** @type {?} */
const MIME_TYPES = new (class extends Array {
    /**
     * @return {?}
     */
    item() {
        return PLUGIN;
    }
    /**
     * @return {?}
     */
    namedItem() {
        return PLUGIN;
    }
    /**
     * @return {?}
     */
    refresh() { }
})();
/**
 * For older version of TS and Angular that do not support all properties from Navigator
 * @record
 */
function NavigatorLike() { }
/**
 * @param {?} userAgent
 * @return {?}
 */
export function navigatorFactory(userAgent) {
    return {
        appCodeName: '',
        appName: '',
        appVersion: '',
        platform: '',
        product: '',
        productSub: '',
        userAgent: userAgent || '',
        vendor: '',
        vendorSub: '',
        onLine: false,
        confirmSiteSpecificTrackingException: alwaysFalse,
        confirmWebWideTrackingException: alwaysFalse,
        removeSiteSpecificTrackingException: empty,
        removeWebWideTrackingException: empty,
        storeSiteSpecificTrackingException: empty,
        storeWebWideTrackingException: empty,
        msSaveBlob: alwaysFalse,
        msSaveOrOpenBlob: alwaysFalse,
        sendBeacon: alwaysFalse,
        hardwareConcurrency: 0,
        getDisplayMedia: alwaysRejected,
        language: '',
        languages: [],
        storage: {
            estimate: alwaysRejected,
            persist: alwaysRejected,
            persisted: alwaysRejected,
        },
        activeVRDisplays: [],
        authentication: {
            getAssertion: alwaysRejected,
            makeCredential: alwaysRejected,
        },
        clipboard: Object.assign({}, EVENT_TARGET, { readText: alwaysRejected, writeText: alwaysRejected }),
        cookieEnabled: false,
        doNotTrack: null,
        gamepadInputEmulation: 'keyboard',
        geolocation: {
            clearWatch: empty,
            getCurrentPosition: empty,
            watchPosition: alwaysZero,
        },
        maxTouchPoints: 0,
        mediaDevices: Object.assign({}, EVENT_TARGET, { ondevicechange: null, enumerateDevices: alwaysRejected, getSupportedConstraints: emptyObject, getUserMedia: alwaysRejected }),
        mimeTypes: MIME_TYPES,
        msManipulationViewsEnabled: false,
        msMaxTouchPoints: 0,
        msPointerEnabled: false,
        permissions: {
            query: alwaysRejected,
        },
        plugins: MIME_TYPES,
        pointerEnabled: false,
        serviceWorker: Object.assign({}, EVENT_TARGET, { controller: null, oncontrollerchange: null, onmessage: null, onmessageerror: null, ready: alwaysRejected(), getRegistration: alwaysRejected, getRegistrations: alwaysRejected, register: alwaysRejected, startMessages: empty }),
        webdriver: false,
        getGamepads: emptyArray,
        getUserMedia: empty,
        getVRDisplays: alwaysRejected,
        javaEnabled: alwaysFalse,
        msLaunchUri: empty,
        requestMediaKeySystemAccess: alwaysRejected,
        vibrate: alwaysFalse,
    };
}
/** @type {?} */
export const UNIVERSAL_NAVIGATOR = {
    provide: NAVIGATOR,
    deps: [[new Optional(), SSR_USER_AGENT]],
    useFactory: navigatorFactory,
};
//# sourceMappingURL=data:application/json;base64,