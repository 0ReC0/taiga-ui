import { NEVER } from 'rxjs';
import { InjectionToken, Optional } from '@angular/core';
import { ANIMATION_FRAME, LOCAL_STORAGE, USER_AGENT, NAVIGATOR, PERFORMANCE, SESSION_STORAGE } from '@ng-web-apis/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UNIVERSAL_ANIMATION_FRAME = {
    provide: ANIMATION_FRAME,
    useValue: NEVER,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StorageMock {
    constructor() {
        this.storage = new Map();
    }
    /**
     * @return {?}
     */
    get length() {
        return this.storage.size;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        return this.storage.has(key) ? (/** @type {?} */ (this.storage.get(key))) : null;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        this.storage.set(key, value);
    }
    /**
     * @return {?}
     */
    clear() {
        this.storage.clear();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    key(index) {
        return index < this.storage.size ? [...this.storage.keys()][index] : null;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        this.storage.delete(key);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UNIVERSAL_LOCAL_STORAGE = {
    provide: LOCAL_STORAGE,
    useClass: StorageMock,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const SSR_LOCATION = new InjectionToken('Location object passed from server side');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} v
 * @return {?}
 */
function identity(v) {
    return v;
}
/**
 * @return {?}
 */
function empty() { }
/**
 * @return {?}
 */
function emptyArray() {
    return [];
}
/**
 * @return {?}
 */
function emptyObject() {
    return {};
}
/**
 * @return {?}
 */
function alwaysFalse() {
    return false;
}
/**
 * @return {?}
 */
function alwaysZero() {
    return 0;
}
/**
 * @return {?}
 */
function alwaysRejected() {
    return Promise.reject().catch(empty);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UNIVERSAL_LOCATION = {
    provide: USER_AGENT,
    deps: [SSR_LOCATION],
    useFactory: identity,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const SSR_USER_AGENT = new InjectionToken('User Agent string passed from server side');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const EVENT_TARGET = {
    addEventListener: empty,
    dispatchEvent: alwaysFalse,
    removeEventListener: empty,
};
/** @type {?} */
const PLUGIN = new (class extends Array {
    constructor() {
        super(...arguments);
        this.description = '';
        this.filename = '';
        this.name = '';
        this.version = '';
    }
    /**
     * @return {?}
     */
    item() {
        return {
            description: '',
            enabledPlugin: this,
            suffixes: '',
            type: '',
        };
    }
    /**
     * @return {?}
     */
    namedItem() {
        return {
            description: '',
            enabledPlugin: this,
            suffixes: '',
            type: '',
        };
    }
})();
/** @type {?} */
const MIME_TYPES = new (class extends Array {
    /**
     * @return {?}
     */
    item() {
        return PLUGIN;
    }
    /**
     * @return {?}
     */
    namedItem() {
        return PLUGIN;
    }
    /**
     * @return {?}
     */
    refresh() { }
})();
/**
 * @param {?} userAgent
 * @return {?}
 */
function navigatorFactory(userAgent) {
    return {
        appCodeName: '',
        appName: '',
        appVersion: '',
        platform: '',
        product: '',
        productSub: '',
        userAgent: userAgent || '',
        vendor: '',
        vendorSub: '',
        onLine: false,
        confirmSiteSpecificTrackingException: alwaysFalse,
        confirmWebWideTrackingException: alwaysFalse,
        removeSiteSpecificTrackingException: empty,
        removeWebWideTrackingException: empty,
        storeSiteSpecificTrackingException: empty,
        storeWebWideTrackingException: empty,
        msSaveBlob: alwaysFalse,
        msSaveOrOpenBlob: alwaysFalse,
        sendBeacon: alwaysFalse,
        hardwareConcurrency: 0,
        getDisplayMedia: alwaysRejected,
        language: '',
        languages: [],
        storage: {
            estimate: alwaysRejected,
            persist: alwaysRejected,
            persisted: alwaysRejected,
        },
        activeVRDisplays: [],
        authentication: {
            getAssertion: alwaysRejected,
            makeCredential: alwaysRejected,
        },
        clipboard: Object.assign({}, EVENT_TARGET, { readText: alwaysRejected, writeText: alwaysRejected }),
        cookieEnabled: false,
        doNotTrack: null,
        gamepadInputEmulation: 'keyboard',
        geolocation: {
            clearWatch: empty,
            getCurrentPosition: empty,
            watchPosition: alwaysZero,
        },
        maxTouchPoints: 0,
        mediaDevices: Object.assign({}, EVENT_TARGET, { ondevicechange: null, enumerateDevices: alwaysRejected, getSupportedConstraints: emptyObject, getUserMedia: alwaysRejected }),
        mimeTypes: MIME_TYPES,
        msManipulationViewsEnabled: false,
        msMaxTouchPoints: 0,
        msPointerEnabled: false,
        permissions: {
            query: alwaysRejected,
        },
        plugins: MIME_TYPES,
        pointerEnabled: false,
        serviceWorker: Object.assign({}, EVENT_TARGET, { controller: null, oncontrollerchange: null, onmessage: null, onmessageerror: null, ready: alwaysRejected(), getRegistration: alwaysRejected, getRegistrations: alwaysRejected, register: alwaysRejected, startMessages: empty }),
        webdriver: false,
        getGamepads: emptyArray,
        getUserMedia: empty,
        getVRDisplays: alwaysRejected,
        javaEnabled: alwaysFalse,
        msLaunchUri: empty,
        requestMediaKeySystemAccess: alwaysRejected,
        vibrate: alwaysFalse,
    };
}
/** @type {?} */
const UNIVERSAL_NAVIGATOR = {
    provide: NAVIGATOR,
    deps: [[new Optional(), SSR_USER_AGENT]],
    useFactory: navigatorFactory,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function performanceFactory() {
    return require('perf_hooks').performance;
}
/** @type {?} */
const UNIVERSAL_PERFORMANCE = {
    provide: PERFORMANCE,
    deps: [],
    useFactory: performanceFactory,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UNIVERSAL_SESSION_STORAGE = {
    provide: SESSION_STORAGE,
    useClass: StorageMock,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MOCK = {
    paused: false,
    pending: false,
    speaking: false,
    onvoiceschanged: empty,
    addEventListener: empty,
    removeEventListener: empty,
    dispatchEvent: alwaysFalse,
    cancel: empty,
    pause: empty,
    resume: empty,
    speak: empty,
    getVoices: emptyArray,
};
/** @type {?} */
const UNIVERSAL_SPEECH_SYNTHESIS = {
    provide: LOCAL_STORAGE,
    useValue: MOCK,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UNIVERSAL_USER_AGENT = {
    provide: USER_AGENT,
    deps: [SSR_USER_AGENT],
    useFactory: identity,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UNIVERSAL_PROVIDERS = [
    UNIVERSAL_ANIMATION_FRAME,
    UNIVERSAL_LOCAL_STORAGE,
    UNIVERSAL_SESSION_STORAGE,
    UNIVERSAL_LOCATION,
    UNIVERSAL_NAVIGATOR,
    UNIVERSAL_PERFORMANCE,
    UNIVERSAL_SPEECH_SYNTHESIS,
    UNIVERSAL_USER_AGENT,
];
/**
 * @deprecated use {\@link UNIVERSAL_PROVIDERS}
 * @type {?}
 */
const UNIVERSAL_TOKENS = UNIVERSAL_PROVIDERS;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} req
 * @return {?}
 */
function provideLocation(req) {
    /** @type {?} */
    const protocol = 'encrypted' in req.socket ? 'https' : 'http';
    /** @type {?} */
    const url = new URL(`${protocol}://${req.headers['host']}${req.url}`);
    url.assign = empty;
    url.reload = empty;
    url.replace = empty;
    url.ancestorOrigins = new (class extends Array {
        /**
         * @return {?}
         */
        contains() {
            return false;
        }
        /**
         * @return {?}
         */
        item() {
            return null;
        }
    })();
    return {
        provide: SSR_LOCATION,
        useValue: url,
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} req
 * @return {?}
 */
function provideUserAgent(req) {
    return {
        provide: SSR_USER_AGENT,
        useValue: req.headers['user-agent'],
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UNIVERSAL_ANIMATION_FRAME, UNIVERSAL_LOCAL_STORAGE, UNIVERSAL_LOCATION, navigatorFactory, UNIVERSAL_NAVIGATOR, performanceFactory, UNIVERSAL_PERFORMANCE, UNIVERSAL_SESSION_STORAGE, UNIVERSAL_SPEECH_SYNTHESIS, UNIVERSAL_PROVIDERS, UNIVERSAL_TOKENS, UNIVERSAL_USER_AGENT, provideLocation, provideUserAgent, StorageMock as ɵa, SSR_LOCATION as ɵb, SSR_USER_AGENT as ɵj, alwaysFalse as ɵg, alwaysRejected as ɵi, alwaysZero as ɵh, empty as ɵd, emptyArray as ɵe, emptyObject as ɵf, identity as ɵc };

//# sourceMappingURL=ng-web-apis-universal.js.map