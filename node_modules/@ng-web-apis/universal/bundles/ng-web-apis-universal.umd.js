(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('@ng-web-apis/common')) :
    typeof define === 'function' && define.amd ? define('@ng-web-apis/universal', ['exports', 'rxjs', '@angular/core', '@ng-web-apis/common'], factory) :
    (factory((global['ng-web-apis'] = global['ng-web-apis'] || {}, global['ng-web-apis'].universal = {}),global.rxjs,global.ng.core,global.common));
}(this, (function (exports,rxjs,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UNIVERSAL_ANIMATION_FRAME = {
        provide: common.ANIMATION_FRAME,
        useValue: rxjs.NEVER,
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StorageMock = /** @class */ (function () {
        function StorageMock() {
            this.storage = new Map();
        }
        Object.defineProperty(StorageMock.prototype, "length", {
            get: /**
             * @return {?}
             */ function () {
                return this.storage.size;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} key
         * @return {?}
         */
        StorageMock.prototype.getItem = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.storage.has(key) ? ( /** @type {?} */(this.storage.get(key))) : null;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        StorageMock.prototype.setItem = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this.storage.set(key, value);
            };
        /**
         * @return {?}
         */
        StorageMock.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.storage.clear();
            };
        /**
         * @param {?} index
         * @return {?}
         */
        StorageMock.prototype.key = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return index < this.storage.size ? __spread(this.storage.keys())[index] : null;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        StorageMock.prototype.removeItem = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                this.storage.delete(key);
            };
        return StorageMock;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UNIVERSAL_LOCAL_STORAGE = {
        provide: common.LOCAL_STORAGE,
        useClass: StorageMock,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SSR_LOCATION = new core.InjectionToken('Location object passed from server side');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} v
     * @return {?}
     */
    function identity(v) {
        return v;
    }
    /**
     * @return {?}
     */
    function empty() { }
    /**
     * @return {?}
     */
    function emptyArray() {
        return [];
    }
    /**
     * @return {?}
     */
    function emptyObject() {
        return {};
    }
    /**
     * @return {?}
     */
    function alwaysFalse() {
        return false;
    }
    /**
     * @return {?}
     */
    function alwaysZero() {
        return 0;
    }
    /**
     * @return {?}
     */
    function alwaysRejected() {
        return Promise.reject().catch(empty);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UNIVERSAL_LOCATION = {
        provide: common.USER_AGENT,
        deps: [SSR_LOCATION],
        useFactory: identity,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SSR_USER_AGENT = new core.InjectionToken('User Agent string passed from server side');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var EVENT_TARGET = {
        addEventListener: empty,
        dispatchEvent: alwaysFalse,
        removeEventListener: empty,
    };
    /** @type {?} */
    var PLUGIN = new ( /** @class */(function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.description = '';
            _this.filename = '';
            _this.name = '';
            _this.version = '';
            return _this;
        }
        /**
         * @return {?}
         */
        class_1.prototype.item = /**
         * @return {?}
         */
            function () {
                return {
                    description: '',
                    enabledPlugin: this,
                    suffixes: '',
                    type: '',
                };
            };
        /**
         * @return {?}
         */
        class_1.prototype.namedItem = /**
         * @return {?}
         */
            function () {
                return {
                    description: '',
                    enabledPlugin: this,
                    suffixes: '',
                    type: '',
                };
            };
        return class_1;
    }(Array)))();
    /** @type {?} */
    var MIME_TYPES = new ( /** @class */(function (_super) {
        __extends(class_2, _super);
        function class_2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        class_2.prototype.item = /**
         * @return {?}
         */
            function () {
                return PLUGIN;
            };
        /**
         * @return {?}
         */
        class_2.prototype.namedItem = /**
         * @return {?}
         */
            function () {
                return PLUGIN;
            };
        /**
         * @return {?}
         */
        class_2.prototype.refresh = /**
         * @return {?}
         */
            function () { };
        return class_2;
    }(Array)))();
    /**
     * @param {?} userAgent
     * @return {?}
     */
    function navigatorFactory(userAgent) {
        return {
            appCodeName: '',
            appName: '',
            appVersion: '',
            platform: '',
            product: '',
            productSub: '',
            userAgent: userAgent || '',
            vendor: '',
            vendorSub: '',
            onLine: false,
            confirmSiteSpecificTrackingException: alwaysFalse,
            confirmWebWideTrackingException: alwaysFalse,
            removeSiteSpecificTrackingException: empty,
            removeWebWideTrackingException: empty,
            storeSiteSpecificTrackingException: empty,
            storeWebWideTrackingException: empty,
            msSaveBlob: alwaysFalse,
            msSaveOrOpenBlob: alwaysFalse,
            sendBeacon: alwaysFalse,
            hardwareConcurrency: 0,
            getDisplayMedia: alwaysRejected,
            language: '',
            languages: [],
            storage: {
                estimate: alwaysRejected,
                persist: alwaysRejected,
                persisted: alwaysRejected,
            },
            activeVRDisplays: [],
            authentication: {
                getAssertion: alwaysRejected,
                makeCredential: alwaysRejected,
            },
            clipboard: __assign({}, EVENT_TARGET, { readText: alwaysRejected, writeText: alwaysRejected }),
            cookieEnabled: false,
            doNotTrack: null,
            gamepadInputEmulation: 'keyboard',
            geolocation: {
                clearWatch: empty,
                getCurrentPosition: empty,
                watchPosition: alwaysZero,
            },
            maxTouchPoints: 0,
            mediaDevices: __assign({}, EVENT_TARGET, { ondevicechange: null, enumerateDevices: alwaysRejected, getSupportedConstraints: emptyObject, getUserMedia: alwaysRejected }),
            mimeTypes: MIME_TYPES,
            msManipulationViewsEnabled: false,
            msMaxTouchPoints: 0,
            msPointerEnabled: false,
            permissions: {
                query: alwaysRejected,
            },
            plugins: MIME_TYPES,
            pointerEnabled: false,
            serviceWorker: __assign({}, EVENT_TARGET, { controller: null, oncontrollerchange: null, onmessage: null, onmessageerror: null, ready: alwaysRejected(), getRegistration: alwaysRejected, getRegistrations: alwaysRejected, register: alwaysRejected, startMessages: empty }),
            webdriver: false,
            getGamepads: emptyArray,
            getUserMedia: empty,
            getVRDisplays: alwaysRejected,
            javaEnabled: alwaysFalse,
            msLaunchUri: empty,
            requestMediaKeySystemAccess: alwaysRejected,
            vibrate: alwaysFalse,
        };
    }
    /** @type {?} */
    var UNIVERSAL_NAVIGATOR = {
        provide: common.NAVIGATOR,
        deps: [[new core.Optional(), SSR_USER_AGENT]],
        useFactory: navigatorFactory,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function performanceFactory() {
        return require('perf_hooks').performance;
    }
    /** @type {?} */
    var UNIVERSAL_PERFORMANCE = {
        provide: common.PERFORMANCE,
        deps: [],
        useFactory: performanceFactory,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UNIVERSAL_SESSION_STORAGE = {
        provide: common.SESSION_STORAGE,
        useClass: StorageMock,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MOCK = {
        paused: false,
        pending: false,
        speaking: false,
        onvoiceschanged: empty,
        addEventListener: empty,
        removeEventListener: empty,
        dispatchEvent: alwaysFalse,
        cancel: empty,
        pause: empty,
        resume: empty,
        speak: empty,
        getVoices: emptyArray,
    };
    /** @type {?} */
    var UNIVERSAL_SPEECH_SYNTHESIS = {
        provide: common.LOCAL_STORAGE,
        useValue: MOCK,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UNIVERSAL_USER_AGENT = {
        provide: common.USER_AGENT,
        deps: [SSR_USER_AGENT],
        useFactory: identity,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UNIVERSAL_PROVIDERS = [
        UNIVERSAL_ANIMATION_FRAME,
        UNIVERSAL_LOCAL_STORAGE,
        UNIVERSAL_SESSION_STORAGE,
        UNIVERSAL_LOCATION,
        UNIVERSAL_NAVIGATOR,
        UNIVERSAL_PERFORMANCE,
        UNIVERSAL_SPEECH_SYNTHESIS,
        UNIVERSAL_USER_AGENT,
    ];
    /**
     * @deprecated use {\@link UNIVERSAL_PROVIDERS}
     * @type {?}
     */
    var UNIVERSAL_TOKENS = UNIVERSAL_PROVIDERS;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} req
     * @return {?}
     */
    function provideLocation(req) {
        /** @type {?} */
        var protocol = 'encrypted' in req.socket ? 'https' : 'http';
        /** @type {?} */
        var url = new URL(protocol + "://" + req.headers['host'] + req.url);
        url.assign = empty;
        url.reload = empty;
        url.replace = empty;
        url.ancestorOrigins = new ( /** @class */(function (_super) {
            __extends(class_1, _super);
            function class_1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * @return {?}
             */
            class_1.prototype.contains = /**
             * @return {?}
             */
                function () {
                    return false;
                };
            /**
             * @return {?}
             */
            class_1.prototype.item = /**
             * @return {?}
             */
                function () {
                    return null;
                };
            return class_1;
        }(Array)))();
        return {
            provide: SSR_LOCATION,
            useValue: url,
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} req
     * @return {?}
     */
    function provideUserAgent(req) {
        return {
            provide: SSR_USER_AGENT,
            useValue: req.headers['user-agent'],
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.UNIVERSAL_ANIMATION_FRAME = UNIVERSAL_ANIMATION_FRAME;
    exports.UNIVERSAL_LOCAL_STORAGE = UNIVERSAL_LOCAL_STORAGE;
    exports.UNIVERSAL_LOCATION = UNIVERSAL_LOCATION;
    exports.navigatorFactory = navigatorFactory;
    exports.UNIVERSAL_NAVIGATOR = UNIVERSAL_NAVIGATOR;
    exports.performanceFactory = performanceFactory;
    exports.UNIVERSAL_PERFORMANCE = UNIVERSAL_PERFORMANCE;
    exports.UNIVERSAL_SESSION_STORAGE = UNIVERSAL_SESSION_STORAGE;
    exports.UNIVERSAL_SPEECH_SYNTHESIS = UNIVERSAL_SPEECH_SYNTHESIS;
    exports.UNIVERSAL_PROVIDERS = UNIVERSAL_PROVIDERS;
    exports.UNIVERSAL_TOKENS = UNIVERSAL_TOKENS;
    exports.UNIVERSAL_USER_AGENT = UNIVERSAL_USER_AGENT;
    exports.provideLocation = provideLocation;
    exports.provideUserAgent = provideUserAgent;
    exports.ɵa = StorageMock;
    exports.ɵb = SSR_LOCATION;
    exports.ɵj = SSR_USER_AGENT;
    exports.ɵg = alwaysFalse;
    exports.ɵi = alwaysRejected;
    exports.ɵh = alwaysZero;
    exports.ɵd = empty;
    exports.ɵe = emptyArray;
    exports.ɵf = emptyObject;
    exports.ɵc = identity;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-web-apis-universal.umd.js.map