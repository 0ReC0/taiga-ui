{"version":3,"file":"ng-web-apis-intersection-observer.js","sources":["ng:/@ng-web-apis/intersection-observer/tokens/intersection-root.ts","ng:/@ng-web-apis/intersection-observer/tokens/intersection-root-margin.ts","ng:/@ng-web-apis/intersection-observer/utils/root-margin-factory.ts","ng:/@ng-web-apis/intersection-observer/tokens/intersection-threshold.ts","ng:/@ng-web-apis/intersection-observer/utils/threshold-factory.ts","ng:/@ng-web-apis/intersection-observer/directives/intersection-observer.directive.ts","ng:/@ng-web-apis/intersection-observer/services/intersection-observee.service.ts","ng:/@ng-web-apis/intersection-observer/directives/intersection-observee.directive.ts","ng:/@ng-web-apis/intersection-observer/directives/intersection-root.directive.ts","ng:/@ng-web-apis/intersection-observer/module.ts","ng:/@ng-web-apis/intersection-observer/tokens/support.ts","ng:/@ng-web-apis/intersection-observer/services/intersection-observer.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {ElementRef, InjectionToken} from '@angular/core';\r\n\r\nexport const INTERSECTION_ROOT = new InjectionToken<ElementRef<Element>>(\r\n    'Root element for IntersectionObserver',\r\n);\r\n","import {InjectionToken} from '@angular/core';\r\n\r\nexport const INTERSECTION_ROOT_MARGIN_DEFAULT = '0px 0px 0px 0px';\r\nexport const INTERSECTION_ROOT_MARGIN = new InjectionToken<string>(\r\n    'rootMargin for IntersectionObserver',\r\n    {\r\n        providedIn: 'root',\r\n        factory: () => INTERSECTION_ROOT_MARGIN_DEFAULT,\r\n    },\r\n);\r\n","import {INTERSECTION_ROOT_MARGIN_DEFAULT} from '../tokens/intersection-root-margin';\r\n\r\nexport function rootMarginFactory(rootMargin: string | null): string {\r\n    return rootMargin || INTERSECTION_ROOT_MARGIN_DEFAULT;\r\n}\r\n","import {InjectionToken} from '@angular/core';\r\n\r\nexport const INTERSECTION_THRESHOLD_DEFAULT = 0;\r\nexport const INTERSECTION_THRESHOLD = new InjectionToken<number | number[]>(\r\n    'threshold for IntersectionObserver',\r\n    {\r\n        providedIn: 'root',\r\n        factory: () => INTERSECTION_THRESHOLD_DEFAULT,\r\n    },\r\n);\r\n","import {INTERSECTION_THRESHOLD_DEFAULT} from '../tokens/intersection-threshold';\r\n\r\nexport function thresholdFactory(threshold: string | null): number | number[] {\r\n    return threshold\r\n        ? threshold.split(',').map(parseFloat)\r\n        : INTERSECTION_THRESHOLD_DEFAULT;\r\n}\r\n","import {\r\n    Attribute,\r\n    Directive,\r\n    ElementRef,\r\n    Inject,\r\n    OnDestroy,\r\n    Optional,\r\n} from '@angular/core';\r\nimport {INTERSECTION_ROOT} from '../tokens/intersection-root';\r\nimport {rootMarginFactory} from '../utils/root-margin-factory';\r\nimport {thresholdFactory} from '../utils/threshold-factory';\r\n\r\n@Directive({\r\n    selector: '[waIntersectionObserver]',\r\n})\r\nexport class IntersectionObserverDirective extends IntersectionObserver\r\n    implements OnDestroy {\r\n    private readonly callbacks = new Map<Element, IntersectionObserverCallback>();\r\n\r\n    constructor(\r\n        @Optional() @Inject(INTERSECTION_ROOT) root: ElementRef<Element> | null,\r\n        @Attribute('waIntersectionRootMargin') rootMargin: string | null,\r\n        @Attribute('waIntersectionThreshold') threshold: string | null,\r\n    ) {\r\n        super(\r\n            entries => {\r\n                this.callbacks.forEach((callback, element) => {\r\n                    const filtered = entries.filter(({target}) => target === element);\r\n\r\n                    return filtered.length && callback(filtered, this);\r\n                });\r\n            },\r\n            {\r\n                root: root && root.nativeElement,\r\n                rootMargin: rootMarginFactory(rootMargin),\r\n                threshold: thresholdFactory(threshold),\r\n            },\r\n        );\r\n    }\r\n\r\n    observe(target: Element, callback: IntersectionObserverCallback = () => {}) {\r\n        super.observe(target);\r\n        this.callbacks.set(target, callback);\r\n    }\r\n\r\n    unobserve(target: Element) {\r\n        super.unobserve(target);\r\n        this.callbacks.delete(target);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.disconnect();\r\n    }\r\n}\r\n","import {ElementRef, Inject, Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {share} from 'rxjs/operators';\r\nimport {IntersectionObserverDirective} from '../directives/intersection-observer.directive';\r\n\r\n@Injectable()\r\nexport class IntersectionObserveeService extends Observable<IntersectionObserverEntry[]> {\r\n    constructor(\r\n        @Inject(ElementRef) {nativeElement}: ElementRef<Element>,\r\n        @Inject(IntersectionObserverDirective)\r\n        observer: IntersectionObserverDirective,\r\n    ) {\r\n        super(subscriber => {\r\n            observer.observe(nativeElement, entries => {\r\n                subscriber.next(entries);\r\n            });\r\n\r\n            return () => {\r\n                observer.unobserve(nativeElement);\r\n            };\r\n        });\r\n\r\n        return this.pipe(share());\r\n    }\r\n}\r\n","import {Directive, Inject} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {IntersectionObserveeService} from '../services/intersection-observee.service';\r\n\r\n// @dynamic\r\n@Directive({\r\n    selector: '[waIntersectionObservee]',\r\n    outputs: ['waIntersectionObservee'],\r\n    providers: [IntersectionObserveeService],\r\n})\r\nexport class IntersectionObserveeDirective {\r\n    constructor(\r\n        @Inject(IntersectionObserveeService)\r\n        readonly waIntersectionObservee: Observable<IntersectionObserverEntry[]>,\r\n    ) {}\r\n}\r\n","import {Directive, ElementRef} from '@angular/core';\r\nimport {INTERSECTION_ROOT} from '../tokens/intersection-root';\r\n\r\n@Directive({\r\n    selector: '[waIntersectionRoot]',\r\n    providers: [\r\n        {\r\n            provide: INTERSECTION_ROOT,\r\n            useExisting: ElementRef,\r\n        },\r\n    ],\r\n})\r\nexport class IntersectionRootDirective {}\r\n","import {NgModule} from '@angular/core';\r\nimport {IntersectionObserveeDirective} from './directives/intersection-observee.directive';\r\nimport {IntersectionObserverDirective} from './directives/intersection-observer.directive';\r\nimport {IntersectionRootDirective} from './directives/intersection-root.directive';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        IntersectionObserverDirective,\r\n        IntersectionObserveeDirective,\r\n        IntersectionRootDirective,\r\n    ],\r\n    exports: [\r\n        IntersectionObserverDirective,\r\n        IntersectionObserveeDirective,\r\n        IntersectionRootDirective,\r\n    ],\r\n})\r\nexport class IntersectionObserverModule {}\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from '@ng-web-apis/common';\r\n\r\n// TODO: Remove when moved to Angular 10\r\ndeclare global {\r\n    interface Window {\r\n        IntersectionObserver: IntersectionObserver;\r\n    }\r\n}\r\n\r\nexport const INTERSECTION_OBSERVER_SUPPORT = new InjectionToken<boolean>(\r\n    'Intersection Observer API support',\r\n    {\r\n        providedIn: 'root',\r\n        factory: () => !!inject(WINDOW).IntersectionObserver,\r\n    },\r\n);\r\n","import {ElementRef, Inject, Injectable, Optional} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {share} from 'rxjs/operators';\r\nimport {INTERSECTION_ROOT} from '../tokens/intersection-root';\r\nimport {INTERSECTION_ROOT_MARGIN} from '../tokens/intersection-root-margin';\r\nimport {INTERSECTION_THRESHOLD} from '../tokens/intersection-threshold';\r\nimport {INTERSECTION_OBSERVER_SUPPORT} from '../tokens/support';\r\n\r\n@Injectable()\r\nexport class IntersectionObserverService extends Observable<IntersectionObserverEntry[]> {\r\n    constructor(\r\n        @Inject(ElementRef) {nativeElement}: ElementRef<Element>,\r\n        @Inject(INTERSECTION_OBSERVER_SUPPORT) support: boolean,\r\n        @Inject(INTERSECTION_ROOT_MARGIN) rootMargin: string,\r\n        @Inject(INTERSECTION_THRESHOLD) threshold: number | number[],\r\n        @Optional() @Inject(INTERSECTION_ROOT) root: ElementRef<Element> | null,\r\n    ) {\r\n        super(subscriber => {\r\n            if (!support) {\r\n                subscriber.error('IntersectionObserver is not supported in your browser');\r\n\r\n                return;\r\n            }\r\n\r\n            const observer = new IntersectionObserver(\r\n                entries => {\r\n                    subscriber.next(entries);\r\n                },\r\n                {\r\n                    root: root && root.nativeElement,\r\n                    rootMargin,\r\n                    threshold,\r\n                },\r\n            );\r\n\r\n            observer.observe(nativeElement);\r\n\r\n            return () => {\r\n                observer.disconnect();\r\n            };\r\n        });\r\n\r\n        return this.pipe(share());\r\n    }\r\n}\r\n"]}