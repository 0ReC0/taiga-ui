import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { WINDOW } from '@ng-web-apis/common';
import { InjectionToken, inject, ElementRef, Inject, Injectable, NgZone, Attribute, Directive, Output, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'rxjs';
const RESIZE_OPTION_BOX_DEFAULT = 'content-box';
/** @type {?} */
const RESIZE_OPTION_BOX = new InjectionToken('Box model to observe changes', {
    providedIn: 'root',
    factory: () => RESIZE_OPTION_BOX_DEFAULT,
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const RESIZE_OBSERVER_SUPPORT = new InjectionToken('Resize Observer API support', {
    providedIn: 'root',
    factory: () => !!inject(WINDOW).ResizeObserver,
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class ResizeObserverService extends Observable {
    /**
     * @param {?} __0
     * @param {?} ngZone
     * @param {?} support
     * @param {?} box
     */
    constructor({ nativeElement }, ngZone, support, box) {
        /** @type {?} */
        let observer;
        super(subscriber => {
            if (!support) {
                subscriber.error('ResizeObserver is not supported in your browser');
                return;
            }
            observer = new ResizeObserver(entries => {
                ngZone.run(() => {
                    subscriber.next(entries);
                });
            });
            observer.observe(nativeElement, { box });
            return () => {
                observer.disconnect();
            };
        });
        return this.pipe(share());
    }
}
ResizeObserverService.ɵfac = function ResizeObserverService_Factory(t) { return new (t || ResizeObserverService)(ɵngcc0.ɵɵinject(ElementRef), ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(RESIZE_OBSERVER_SUPPORT), ɵngcc0.ɵɵinject(RESIZE_OPTION_BOX)); };
ResizeObserverService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ResizeObserverService, factory: ResizeObserverService.ɵfac });
/** @nocollapse */
ResizeObserverService.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [RESIZE_OBSERVER_SUPPORT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [RESIZE_OPTION_BOX,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResizeObserverService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }, { type: ɵngcc0.NgZone, decorators: [{
                type: Inject,
                args: [NgZone]
            }] }, { type: Boolean, decorators: [{
                type: Inject,
                args: [RESIZE_OBSERVER_SUPPORT]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [RESIZE_OPTION_BOX]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TODO switch to Attribute once https://github.com/angular/angular/issues/36479 is fixed
/**
 * @param {?} __0
 * @return {?}
 */
function boxExtractor({ nativeElement, }) {
    /** @type {?} */
    const attribute = (/** @type {?} */ (nativeElement.getAttribute('waResizeBox')));
    return boxFactory(attribute);
}
/**
 * @param {?} box
 * @return {?}
 */
function boxFactory(box) {
    return box || RESIZE_OPTION_BOX_DEFAULT;
}
// @dynamic
class ResizeObserverDirective {
    /**
     * @param {?} entries$
     * @param {?} _box
     */
    constructor(entries$, _box) {
        this.waResizeObserver = entries$;
    }
}
ResizeObserverDirective.ɵfac = function ResizeObserverDirective_Factory(t) { return new (t || ResizeObserverDirective)(ɵngcc0.ɵɵdirectiveInject(ResizeObserverService), ɵngcc0.ɵɵinjectAttribute('waResizeBox')); };
ResizeObserverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ResizeObserverDirective, selectors: [["", "waResizeObserver", ""]], outputs: { waResizeObserver: "waResizeObserver" }, features: [ɵngcc0.ɵɵProvidersFeature([
            ResizeObserverService,
            {
                provide: RESIZE_OPTION_BOX,
                deps: [ElementRef],
                useFactory: boxExtractor
            },
        ])] });
/** @nocollapse */
ResizeObserverDirective.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [ResizeObserverService,] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['waResizeBox',] }] }
];
ResizeObserverDirective.propDecorators = {
    waResizeObserver: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResizeObserverDirective, [{
        type: Directive,
        args: [{
                selector: '[waResizeObserver]',
                providers: [
                    ResizeObserverService,
                    {
                        provide: RESIZE_OPTION_BOX,
                        deps: [ElementRef],
                        useFactory: boxExtractor
                    },
                ]
            }]
    }], function () { return [{ type: ɵngcc1.Observable, decorators: [{
                type: Inject,
                args: [ResizeObserverService]
            }] }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['waResizeBox']
            }] }]; }, { waResizeObserver: [{
            type: Output
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ResizeObserverModule {
}
ResizeObserverModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ResizeObserverModule });
ResizeObserverModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ResizeObserverModule_Factory(t) { return new (t || ResizeObserverModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ResizeObserverModule, { declarations: [ResizeObserverDirective], exports: [ResizeObserverDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResizeObserverModule, [{
        type: NgModule,
        args: [{
                declarations: [ResizeObserverDirective],
                exports: [ResizeObserverDirective]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { boxExtractor, boxFactory, ResizeObserverDirective, ResizeObserverModule, ResizeObserverService, RESIZE_OPTION_BOX_DEFAULT, RESIZE_OPTION_BOX, RESIZE_OBSERVER_SUPPORT };

//# sourceMappingURL=ng-web-apis-resize-observer.js.map