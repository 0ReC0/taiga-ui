import { EVENT_MANAGER_PLUGINS } from '@angular/platform-browser';
import { __extends } from 'tslib';
import { Injectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// this is not public API so we cannot extend it
// import {EventManagerPlugin} from '@angular/platform-browser/src/dom/events/event_manager';
// TODO: A subject to change: https://github.com/angular/angular/issues/3929
/**
 * @abstract
 */
var  
// this is not public API so we cannot extend it
// import {EventManagerPlugin} from '@angular/platform-browser/src/dom/events/event_manager';
// TODO: A subject to change: https://github.com/angular/angular/issues/3929
/**
 * @abstract
 */
AbstractEventPlugin = /** @class */ (function () {
    function AbstractEventPlugin() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    AbstractEventPlugin.prototype.supports = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.split('.').indexOf(this.modifier) !== -1;
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    AbstractEventPlugin.prototype.unwrap = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        return event
            .split('.')
            .filter(function (v) { return v !== _this.modifier; })
            .join('.');
    };
    return AbstractEventPlugin;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PreventEventPlugin = /** @class */ (function (_super) {
    __extends(PreventEventPlugin, _super);
    function PreventEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = 'prevent';
        return _this;
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    PreventEventPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        /** @type {?} */
        var wrapped = function (event) {
            event.preventDefault();
            handler(event);
        };
        return this.manager.addEventListener(element, this.unwrap(event), wrapped);
    };
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    PreventEventPlugin.prototype.addGlobalEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        /** @type {?} */
        var wrapped = function (event) {
            event.preventDefault();
            handler(event);
        };
        return this.manager.addGlobalEventListener(element, this.unwrap(event), wrapped);
    };
    PreventEventPlugin.decorators = [
        { type: Injectable }
    ];
    return PreventEventPlugin;
}(AbstractEventPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SilentEventPlugin = /** @class */ (function (_super) {
    __extends(SilentEventPlugin, _super);
    function SilentEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = 'silent';
        return _this;
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    SilentEventPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        var _this = this;
        return this.manager
            .getZone()
            .runOutsideAngular(function () {
            return _this.manager.addEventListener(element, _this.unwrap(event), handler);
        });
    };
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    SilentEventPlugin.prototype.addGlobalEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        var _this = this;
        return this.manager
            .getZone()
            .runOutsideAngular(function () {
            return _this.manager.addGlobalEventListener(element, _this.unwrap(event), handler);
        });
    };
    SilentEventPlugin.decorators = [
        { type: Injectable }
    ];
    return SilentEventPlugin;
}(AbstractEventPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StopEventPlugin = /** @class */ (function (_super) {
    __extends(StopEventPlugin, _super);
    function StopEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = 'stop';
        return _this;
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    StopEventPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        /** @type {?} */
        var wrapped = function (event) {
            event.stopPropagation();
            handler(event);
        };
        return this.manager.addEventListener(element, this.unwrap(event), wrapped);
    };
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    StopEventPlugin.prototype.addGlobalEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        /** @type {?} */
        var wrapped = function (event) {
            event.stopPropagation();
            handler(event);
        };
        return this.manager.addGlobalEventListener(element, this.unwrap(event), wrapped);
    };
    StopEventPlugin.decorators = [
        { type: Injectable }
    ];
    return StopEventPlugin;
}(AbstractEventPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * TODO: This will not be needed in Angular 10
 * when libraries are allowed to use Ivy renderer and markDirty becomes stable API
 */
var ZoneEventPlugin = /** @class */ (function (_super) {
    __extends(ZoneEventPlugin, _super);
    function ZoneEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = 'init';
        return _this;
    }
    /**
     * @param {?} _element
     * @param {?} _event
     * @param {?} handler
     * @return {?}
     */
    ZoneEventPlugin.prototype.addEventListener = /**
     * @param {?} _element
     * @param {?} _event
     * @param {?} handler
     * @return {?}
     */
    function (_element, _event, handler) {
        return this.handle(handler);
    };
    /**
     * @param {?} _element
     * @param {?} _event
     * @param {?} handler
     * @return {?}
     */
    ZoneEventPlugin.prototype.addGlobalEventListener = /**
     * @param {?} _element
     * @param {?} _event
     * @param {?} handler
     * @return {?}
     */
    function (_element, _event, handler) {
        return this.handle(handler);
    };
    /**
     * @private
     * @param {?} handler
     * @return {?}
     */
    ZoneEventPlugin.prototype.handle = /**
     * @private
     * @param {?} handler
     * @return {?}
     */
    function (handler) {
        /** @type {?} */
        var zone = this.manager.getZone();
        /** @type {?} */
        var subscription = zone.onStable.subscribe(function () {
            subscription.unsubscribe();
            handler(zone);
        });
        return function () { };
    };
    ZoneEventPlugin.decorators = [
        { type: Injectable }
    ];
    return ZoneEventPlugin;
}(AbstractEventPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NG_EVENT_PLUGINS = [
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: SilentEventPlugin,
        multi: true,
    },
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: PreventEventPlugin,
        multi: true,
    },
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: StopEventPlugin,
        multi: true,
    },
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: ZoneEventPlugin,
        multi: true,
    },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * TODO: This will not be needed in Angular 10
 * when libraries are allowed to use Ivy renderer and markDirty becomes stable API
 * @template T
 * @param {?} predicate
 * @return {?}
 */
function shouldCall(predicate) {
    return function (_, key, desc) {
        var value = desc.value;
        desc.value = function () {
            /** @type {?} */
            var zone = (/** @type {?} */ (arguments[0]));
            Object.defineProperty(this, key, {
                value: /**
                 * @this {?}
                 * @param {...?} args
                 * @return {?}
                 */
                function () {
                    var _this = this;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (predicate.apply(this, args)) {
                        zone.run(function () {
                            value.apply(_this, args);
                        });
                    }
                },
            });
        };
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NG_EVENT_PLUGINS, shouldCall, PreventEventPlugin, SilentEventPlugin, StopEventPlugin, ZoneEventPlugin, AbstractEventPlugin as ɵa };

//# sourceMappingURL=tinkoff-ng-event-plugins.js.map