/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AbstractEventPlugin } from './abstract.plugin';
var StopEventPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(StopEventPlugin, _super);
    function StopEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = 'stop';
        return _this;
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    StopEventPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        /** @type {?} */
        var wrapped = function (event) {
            event.stopPropagation();
            handler(event);
        };
        return this.manager.addEventListener(element, this.unwrap(event), wrapped);
    };
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    StopEventPlugin.prototype.addGlobalEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        /** @type {?} */
        var wrapped = function (event) {
            event.stopPropagation();
            handler(event);
        };
        return this.manager.addGlobalEventListener(element, this.unwrap(event), wrapped);
    };
    StopEventPlugin.decorators = [
        { type: Injectable }
    ];
    return StopEventPlugin;
}(AbstractEventPlugin));
export { StopEventPlugin };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    StopEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcC5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9zdG9wLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFdEQ7SUFDcUMsMkNBQW1CO0lBRHhEO1FBQUEscUVBcUJDO1FBbkJzQixjQUFRLEdBQUcsTUFBTSxDQUFDOztJQW1CekMsQ0FBQzs7Ozs7OztJQWpCRywwQ0FBZ0I7Ozs7OztJQUFoQixVQUFpQixPQUFvQixFQUFFLEtBQWEsRUFBRSxPQUFpQjs7WUFDN0QsT0FBTyxHQUFHLFVBQUMsS0FBWTtZQUN6QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDeEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25CLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7Ozs7OztJQUVELGdEQUFzQjs7Ozs7O0lBQXRCLFVBQXVCLE9BQWUsRUFBRSxLQUFhLEVBQUUsT0FBaUI7O1lBQzlELE9BQU8sR0FBRyxVQUFDLEtBQVk7WUFDekIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JGLENBQUM7O2dCQXBCSixVQUFVOztJQXFCWCxzQkFBQztDQUFBLEFBckJELENBQ3FDLG1CQUFtQixHQW9CdkQ7U0FwQlksZUFBZTs7Ozs7O0lBQ3hCLG1DQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RFdmVudFBsdWdpbn0gZnJvbSAnLi9hYnN0cmFjdC5wbHVnaW4nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3RvcEV2ZW50UGx1Z2luIGV4dGVuZHMgQWJzdHJhY3RFdmVudFBsdWdpbiB7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbW9kaWZpZXIgPSAnc3RvcCc7XHJcblxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50OiBIVE1MRWxlbWVudCwgZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pOiBGdW5jdGlvbiB7XHJcbiAgICAgICAgY29uc3Qgd3JhcHBlZCA9IChldmVudDogRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZXIoZXZlbnQpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCB0aGlzLnVud3JhcChldmVudCksIHdyYXBwZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEdsb2JhbEV2ZW50TGlzdGVuZXIoZWxlbWVudDogc3RyaW5nLCBldmVudDogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbik6IEZ1bmN0aW9uIHtcclxuICAgICAgICBjb25zdCB3cmFwcGVkID0gKGV2ZW50OiBFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgaGFuZGxlcihldmVudCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5hZGRHbG9iYWxFdmVudExpc3RlbmVyKGVsZW1lbnQsIHRoaXMudW53cmFwKGV2ZW50KSwgd3JhcHBlZCk7XHJcbiAgICB9XHJcbn1cclxuIl19