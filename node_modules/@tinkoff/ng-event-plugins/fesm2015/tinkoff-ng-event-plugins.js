import { EVENT_MANAGER_PLUGINS } from '@angular/platform-browser';
import { Injectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// this is not public API so we cannot extend it
// import {EventManagerPlugin} from '@angular/platform-browser/src/dom/events/event_manager';
// TODO: A subject to change: https://github.com/angular/angular/issues/3929
/**
 * @abstract
 */
class AbstractEventPlugin {
    /**
     * @param {?} event
     * @return {?}
     */
    supports(event) {
        return event.split('.').indexOf(this.modifier) !== -1;
    }
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    unwrap(event) {
        return event
            .split('.')
            .filter(v => v !== this.modifier)
            .join('.');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PreventEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = 'prevent';
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    addEventListener(element, event, handler) {
        /** @type {?} */
        const wrapped = (event) => {
            event.preventDefault();
            handler(event);
        };
        return this.manager.addEventListener(element, this.unwrap(event), wrapped);
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    addGlobalEventListener(element, event, handler) {
        /** @type {?} */
        const wrapped = (event) => {
            event.preventDefault();
            handler(event);
        };
        return this.manager.addGlobalEventListener(element, this.unwrap(event), wrapped);
    }
}
PreventEventPlugin.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SilentEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = 'silent';
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    addEventListener(element, event, handler) {
        return this.manager
            .getZone()
            .runOutsideAngular(() => this.manager.addEventListener(element, this.unwrap(event), handler));
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    addGlobalEventListener(element, event, handler) {
        return this.manager
            .getZone()
            .runOutsideAngular(() => this.manager.addGlobalEventListener(element, this.unwrap(event), handler));
    }
}
SilentEventPlugin.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StopEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = 'stop';
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    addEventListener(element, event, handler) {
        /** @type {?} */
        const wrapped = (event) => {
            event.stopPropagation();
            handler(event);
        };
        return this.manager.addEventListener(element, this.unwrap(event), wrapped);
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    addGlobalEventListener(element, event, handler) {
        /** @type {?} */
        const wrapped = (event) => {
            event.stopPropagation();
            handler(event);
        };
        return this.manager.addGlobalEventListener(element, this.unwrap(event), wrapped);
    }
}
StopEventPlugin.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * TODO: This will not be needed in Angular 10
 * when libraries are allowed to use Ivy renderer and markDirty becomes stable API
 */
class ZoneEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = 'init';
    }
    /**
     * @param {?} _element
     * @param {?} _event
     * @param {?} handler
     * @return {?}
     */
    addEventListener(_element, _event, handler) {
        return this.handle(handler);
    }
    /**
     * @param {?} _element
     * @param {?} _event
     * @param {?} handler
     * @return {?}
     */
    addGlobalEventListener(_element, _event, handler) {
        return this.handle(handler);
    }
    /**
     * @private
     * @param {?} handler
     * @return {?}
     */
    handle(handler) {
        /** @type {?} */
        const zone = this.manager.getZone();
        /** @type {?} */
        const subscription = zone.onStable.subscribe(() => {
            subscription.unsubscribe();
            handler(zone);
        });
        return () => { };
    }
}
ZoneEventPlugin.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NG_EVENT_PLUGINS = [
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: SilentEventPlugin,
        multi: true,
    },
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: PreventEventPlugin,
        multi: true,
    },
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: StopEventPlugin,
        multi: true,
    },
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: ZoneEventPlugin,
        multi: true,
    },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * TODO: This will not be needed in Angular 10
 * when libraries are allowed to use Ivy renderer and markDirty becomes stable API
 * @template T
 * @param {?} predicate
 * @return {?}
 */
function shouldCall(predicate) {
    return (_, key, desc) => {
        const { value } = desc;
        desc.value = function () {
            /** @type {?} */
            const zone = (/** @type {?} */ (arguments[0]));
            Object.defineProperty(this, key, {
                /**
                 * @this {?}
                 * @param {...?} args
                 * @return {?}
                 */
                value(...args) {
                    if (predicate.apply(this, args)) {
                        zone.run(() => {
                            value.apply(this, args);
                        });
                    }
                },
            });
        };
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NG_EVENT_PLUGINS, shouldCall, PreventEventPlugin, SilentEventPlugin, StopEventPlugin, ZoneEventPlugin, AbstractEventPlugin as Éµa };

//# sourceMappingURL=tinkoff-ng-event-plugins.js.map