import { Sanitizer, SecurityContext } from '@angular/core';
import { NgDompurifyConfig } from './types/ng-dompurify-config';
import { NgDompurifyHook } from './types/ng-dompurify-hook';
import { SanitizeStyle } from './types/sanitize-style';
/**
 * Implementation of Angular {@link Sanitizer} purifying via DOMPurify
 *
 * use {@link DOMPURIFY_CONFIG} token to provide config ({@link NgDompurifyConfig})
 * use {@link SANITIZE_STYLE} token to provide a style sanitizing method ({@link SanitizeStyle})
 * use {@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({@link addHook})
 *
 * Ambient type cannot be used without @dynamic https://github.com/angular/angular/issues/23395
 * @dynamic
 */
import * as ɵngcc0 from '@angular/core';
export declare class NgDompurifySanitizer implements Sanitizer {
    private readonly config;
    private readonly sanitizeStyle;
    private readonly domPurify;
    constructor(config: NgDompurifyConfig, sanitizeStyle: SanitizeStyle, { defaultView }: Document, hooks: ReadonlyArray<NgDompurifyHook>);
    sanitize(context: SecurityContext, value: {} | string | null, config?: NgDompurifyConfig): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgDompurifySanitizer, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NgDompurifySanitizer>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZG9tcHVyaWZ5LnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibmctZG9tcHVyaWZ5LnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTYW5pdGl6ZXIsIFNlY3VyaXR5Q29udGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdEb21wdXJpZnlDb25maWcgfSBmcm9tICcuL3R5cGVzL25nLWRvbXB1cmlmeS1jb25maWcnO1xuaW1wb3J0IHsgTmdEb21wdXJpZnlIb29rIH0gZnJvbSAnLi90eXBlcy9uZy1kb21wdXJpZnktaG9vayc7XG5pbXBvcnQgeyBTYW5pdGl6ZVN0eWxlIH0gZnJvbSAnLi90eXBlcy9zYW5pdGl6ZS1zdHlsZSc7XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIEFuZ3VsYXIge0BsaW5rIFNhbml0aXplcn0gcHVyaWZ5aW5nIHZpYSBET01QdXJpZnlcbiAqXG4gKiB1c2Uge0BsaW5rIERPTVBVUklGWV9DT05GSUd9IHRva2VuIHRvIHByb3ZpZGUgY29uZmlnICh7QGxpbmsgTmdEb21wdXJpZnlDb25maWd9KVxuICogdXNlIHtAbGluayBTQU5JVElaRV9TVFlMRX0gdG9rZW4gdG8gcHJvdmlkZSBhIHN0eWxlIHNhbml0aXppbmcgbWV0aG9kICh7QGxpbmsgU2FuaXRpemVTdHlsZX0pXG4gKiB1c2Uge0BsaW5rIERPTVBVUklGWV9IT09LU30gdG9rZW4gdG8gcHJvdmlkZSBhIGhvb2tzIGZvciBET01QdXJpZnkgKHtAbGluayBhZGRIb29rfSlcbiAqXG4gKiBBbWJpZW50IHR5cGUgY2Fubm90IGJlIHVzZWQgd2l0aG91dCBAZHluYW1pYyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMzM5NVxuICogQGR5bmFtaWNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdEb21wdXJpZnlTYW5pdGl6ZXIgaW1wbGVtZW50cyBTYW5pdGl6ZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuaXRpemVTdHlsZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRvbVB1cmlmeTtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IE5nRG9tcHVyaWZ5Q29uZmlnLCBzYW5pdGl6ZVN0eWxlOiBTYW5pdGl6ZVN0eWxlLCB7IGRlZmF1bHRWaWV3IH06IERvY3VtZW50LCBob29rczogUmVhZG9ubHlBcnJheTxOZ0RvbXB1cmlmeUhvb2s+KTtcbiAgICBzYW5pdGl6ZShjb250ZXh0OiBTZWN1cml0eUNvbnRleHQsIHZhbHVlOiB7fSB8IHN0cmluZyB8IG51bGwsIGNvbmZpZz86IE5nRG9tcHVyaWZ5Q29uZmlnKTogc3RyaW5nO1xufVxuIl19