/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, SecurityContext } from '@angular/core';
import * as dompurify from 'dompurify';
import { DOMPURIFY_CONFIG } from './tokens/dompurify-config';
import { DOMPURIFY_HOOKS } from './tokens/dompurify-hooks';
import { SANITIZE_STYLE } from './tokens/sanitize-style';
import * as i0 from "@angular/core";
import * as i1 from "./tokens/dompurify-config";
import * as i2 from "./tokens/sanitize-style";
import * as i3 from "@angular/common";
import * as i4 from "./tokens/dompurify-hooks";
/** @type {?} */
var createDOMPurify = dompurify;
/**
 * Implementation of Angular {\@link Sanitizer} purifying via DOMPurify
 *
 * use {\@link DOMPURIFY_CONFIG} token to provide config ({\@link NgDompurifyConfig})
 * use {\@link SANITIZE_STYLE} token to provide a style sanitizing method ({\@link SanitizeStyle})
 * use {\@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({\@link addHook})
 *
 * Ambient type cannot be used without \@dynamic https://github.com/angular/angular/issues/23395
 * \@dynamic
 */
var NgDompurifySanitizer = /** @class */ (function () {
    function NgDompurifySanitizer(config, sanitizeStyle, _a, hooks) {
        var defaultView = _a.defaultView;
        var _this = this;
        this.config = config;
        this.sanitizeStyle = sanitizeStyle;
        this.domPurify = createDOMPurify((/** @type {?} */ (defaultView)));
        hooks.forEach(function (_a) {
            var name = _a.name, hook = _a.hook;
            _this.domPurify.addHook(name, hook);
        });
    }
    /**
     * @param {?} context
     * @param {?} value
     * @param {?=} config
     * @return {?}
     */
    NgDompurifySanitizer.prototype.sanitize = /**
     * @param {?} context
     * @param {?} value
     * @param {?=} config
     * @return {?}
     */
    function (context, value, config) {
        if (config === void 0) { config = this.config; }
        if (context === SecurityContext.SCRIPT) {
            throw new Error('DOMPurify does not support SCRIPT context');
        }
        return context === SecurityContext.STYLE
            ? this.sanitizeStyle(String(value))
            : this.domPurify.sanitize(String(value || ''), config);
    };
    NgDompurifySanitizer.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    NgDompurifySanitizer.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_CONFIG,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [SANITIZE_STYLE,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_HOOKS,] }] }
    ]; };
    /** @nocollapse */ NgDompurifySanitizer.ngInjectableDef = i0.defineInjectable({ factory: function NgDompurifySanitizer_Factory() { return new NgDompurifySanitizer(i0.inject(i1.DOMPURIFY_CONFIG), i0.inject(i2.SANITIZE_STYLE), i0.inject(i3.DOCUMENT), i0.inject(i4.DOMPURIFY_HOOKS)); }, token: NgDompurifySanitizer, providedIn: "root" });
    return NgDompurifySanitizer;
}());
export { NgDompurifySanitizer };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgDompurifySanitizer.prototype.domPurify;
    /**
     * @type {?}
     * @private
     */
    NgDompurifySanitizer.prototype.config;
    /**
     * @type {?}
     * @private
     */
    NgDompurifySanitizer.prototype.sanitizeStyle;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZG9tcHVyaWZ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1kb21wdXJpZnkvIiwic291cmNlcyI6WyJsaWIvbmctZG9tcHVyaWZ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBYSxlQUFlLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxLQUFLLFNBQVMsTUFBTSxXQUFXLENBQUM7QUFFdkMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7OztJQUtqRCxlQUFlLEdBQUcsU0FBUzs7Ozs7Ozs7Ozs7QUFZakM7SUFNSSw4QkFFcUIsTUFBeUIsRUFFekIsYUFBNEIsRUFDN0MsRUFBeUMsRUFFekMsS0FBcUM7WUFGbEIsNEJBQVc7UUFMbEMsaUJBY0M7UUFab0IsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFFekIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFLN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsbUJBQUEsV0FBVyxFQUFDLENBQUMsQ0FBQztRQUUvQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsRUFBWTtnQkFBWCxjQUFJLEVBQUUsY0FBSTtZQUN0QixLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7Ozs7O0lBRUQsdUNBQVE7Ozs7OztJQUFSLFVBQ0ksT0FBd0IsRUFDeEIsS0FBeUIsRUFDekIsTUFBdUM7UUFBdkMsdUJBQUEsRUFBQSxTQUE0QixJQUFJLENBQUMsTUFBTTtRQUV2QyxJQUFJLE9BQU8sS0FBSyxlQUFlLENBQUMsTUFBTSxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztTQUNoRTtRQUVELE9BQU8sT0FBTyxLQUFLLGVBQWUsQ0FBQyxLQUFLO1lBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvRCxDQUFDOztnQkFsQ0osVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnREFLUSxNQUFNLFNBQUMsZ0JBQWdCO2dEQUV2QixNQUFNLFNBQUMsY0FBYztnQkFFVyxRQUFRLHVCQUF4QyxNQUFNLFNBQUMsUUFBUTtnREFDZixNQUFNLFNBQUMsZUFBZTs7OytCQW5DL0I7Q0EwREMsQUFuQ0QsSUFtQ0M7U0FoQ1ksb0JBQW9COzs7Ozs7SUFDN0IseUNBQXVDOzs7OztJQUduQyxzQ0FDMEM7Ozs7O0lBQzFDLDZDQUM2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgU2FuaXRpemVyLCBTZWN1cml0eUNvbnRleHR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgZG9tcHVyaWZ5IGZyb20gJ2RvbXB1cmlmeSc7XG5pbXBvcnQge0RPTVB1cmlmeUl9IGZyb20gJ2RvbXB1cmlmeSc7XG5pbXBvcnQge0RPTVBVUklGWV9DT05GSUd9IGZyb20gJy4vdG9rZW5zL2RvbXB1cmlmeS1jb25maWcnO1xuaW1wb3J0IHtET01QVVJJRllfSE9PS1N9IGZyb20gJy4vdG9rZW5zL2RvbXB1cmlmeS1ob29rcyc7XG5pbXBvcnQge1NBTklUSVpFX1NUWUxFfSBmcm9tICcuL3Rva2Vucy9zYW5pdGl6ZS1zdHlsZSc7XG5pbXBvcnQge05nRG9tcHVyaWZ5Q29uZmlnfSBmcm9tICcuL3R5cGVzL25nLWRvbXB1cmlmeS1jb25maWcnO1xuaW1wb3J0IHtOZ0RvbXB1cmlmeUhvb2t9IGZyb20gJy4vdHlwZXMvbmctZG9tcHVyaWZ5LWhvb2snO1xuaW1wb3J0IHtTYW5pdGl6ZVN0eWxlfSBmcm9tICcuL3R5cGVzL3Nhbml0aXplLXN0eWxlJztcblxuY29uc3QgY3JlYXRlRE9NUHVyaWZ5ID0gZG9tcHVyaWZ5O1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIEFuZ3VsYXIge0BsaW5rIFNhbml0aXplcn0gcHVyaWZ5aW5nIHZpYSBET01QdXJpZnlcbiAqXG4gKiB1c2Uge0BsaW5rIERPTVBVUklGWV9DT05GSUd9IHRva2VuIHRvIHByb3ZpZGUgY29uZmlnICh7QGxpbmsgTmdEb21wdXJpZnlDb25maWd9KVxuICogdXNlIHtAbGluayBTQU5JVElaRV9TVFlMRX0gdG9rZW4gdG8gcHJvdmlkZSBhIHN0eWxlIHNhbml0aXppbmcgbWV0aG9kICh7QGxpbmsgU2FuaXRpemVTdHlsZX0pXG4gKiB1c2Uge0BsaW5rIERPTVBVUklGWV9IT09LU30gdG9rZW4gdG8gcHJvdmlkZSBhIGhvb2tzIGZvciBET01QdXJpZnkgKHtAbGluayBhZGRIb29rfSlcbiAqXG4gKiBBbWJpZW50IHR5cGUgY2Fubm90IGJlIHVzZWQgd2l0aG91dCBAZHluYW1pYyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMzM5NVxuICogQGR5bmFtaWNcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTmdEb21wdXJpZnlTYW5pdGl6ZXIgaW1wbGVtZW50cyBTYW5pdGl6ZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZG9tUHVyaWZ5OiBET01QdXJpZnlJO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRE9NUFVSSUZZX0NPTkZJRylcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjb25maWc6IE5nRG9tcHVyaWZ5Q29uZmlnLFxuICAgICAgICBASW5qZWN0KFNBTklUSVpFX1NUWUxFKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNhbml0aXplU3R5bGU6IFNhbml0aXplU3R5bGUsXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHtkZWZhdWx0Vmlld306IERvY3VtZW50LFxuICAgICAgICBASW5qZWN0KERPTVBVUklGWV9IT09LUylcbiAgICAgICAgaG9va3M6IFJlYWRvbmx5QXJyYXk8TmdEb21wdXJpZnlIb29rPixcbiAgICApIHtcbiAgICAgICAgdGhpcy5kb21QdXJpZnkgPSBjcmVhdGVET01QdXJpZnkoZGVmYXVsdFZpZXchKTtcblxuICAgICAgICBob29rcy5mb3JFYWNoKCh7bmFtZSwgaG9va30pID0+IHtcbiAgICAgICAgICAgIHRoaXMuZG9tUHVyaWZ5LmFkZEhvb2sobmFtZSwgaG9vayk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNhbml0aXplKFxuICAgICAgICBjb250ZXh0OiBTZWN1cml0eUNvbnRleHQsXG4gICAgICAgIHZhbHVlOiB7fSB8IHN0cmluZyB8IG51bGwsXG4gICAgICAgIGNvbmZpZzogTmdEb21wdXJpZnlDb25maWcgPSB0aGlzLmNvbmZpZyxcbiAgICApOiBzdHJpbmcge1xuICAgICAgICBpZiAoY29udGV4dCA9PT0gU2VjdXJpdHlDb250ZXh0LlNDUklQVCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdET01QdXJpZnkgZG9lcyBub3Qgc3VwcG9ydCBTQ1JJUFQgY29udGV4dCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPT09IFNlY3VyaXR5Q29udGV4dC5TVFlMRVxuICAgICAgICAgICAgPyB0aGlzLnNhbml0aXplU3R5bGUoU3RyaW5nKHZhbHVlKSlcbiAgICAgICAgICAgIDogdGhpcy5kb21QdXJpZnkuc2FuaXRpemUoU3RyaW5nKHZhbHVlIHx8ICcnKSwgY29uZmlnKTtcbiAgICB9XG59XG4iXX0=