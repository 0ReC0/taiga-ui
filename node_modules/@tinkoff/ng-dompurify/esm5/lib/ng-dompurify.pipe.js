/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NgDompurifySanitizer } from './ng-dompurify.service';
/**
 * Pipe that transforms dirty content to clean via {\@link NgDompurifySanitizer}
 */
var NgDompurifyPipe = /** @class */ (function () {
    function NgDompurifyPipe(sanitizer, domSanitizer) {
        this.sanitizer = sanitizer;
        this.domSanitizer = domSanitizer;
    }
    /**
     * @param {?} value
     * @param {?=} context
     * @param {?=} config
     * @return {?}
     */
    NgDompurifyPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} context
     * @param {?=} config
     * @return {?}
     */
    function (value, context, config) {
        if (context === void 0) { context = SecurityContext.HTML; }
        return this.bypassSecurityTrust(context, this.sanitizer.sanitize(context, value, config));
    };
    /**
     * @private
     * @param {?} context
     * @param {?} purifiedValue
     * @return {?}
     */
    NgDompurifyPipe.prototype.bypassSecurityTrust = /**
     * @private
     * @param {?} context
     * @param {?} purifiedValue
     * @return {?}
     */
    function (context, purifiedValue) {
        switch (context) {
            case SecurityContext.HTML:
                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);
            case SecurityContext.STYLE:
                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);
            case SecurityContext.URL:
                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);
            case SecurityContext.RESOURCE_URL:
                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);
            default:
                return null;
        }
    };
    NgDompurifyPipe.decorators = [
        { type: Pipe, args: [{ name: 'dompurify' },] }
    ];
    /** @nocollapse */
    NgDompurifyPipe.ctorParameters = function () { return [
        { type: NgDompurifySanitizer },
        { type: DomSanitizer }
    ]; };
    return NgDompurifyPipe;
}());
export { NgDompurifyPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgDompurifyPipe.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    NgDompurifyPipe.prototype.domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZG9tcHVyaWZ5LnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1kb21wdXJpZnkvIiwic291cmNlcyI6WyJsaWIvbmctZG9tcHVyaWZ5LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQWlCLGVBQWUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUMsWUFBWSxFQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7Ozs7QUFNNUQ7SUFFSSx5QkFDcUIsU0FBK0IsRUFDL0IsWUFBMEI7UUFEMUIsY0FBUyxHQUFULFNBQVMsQ0FBc0I7UUFDL0IsaUJBQVksR0FBWixZQUFZLENBQWM7SUFDNUMsQ0FBQzs7Ozs7OztJQUVKLG1DQUFTOzs7Ozs7SUFBVCxVQUNJLEtBQXlCLEVBQ3pCLE9BQStDLEVBQy9DLE1BQTBCO1FBRDFCLHdCQUFBLEVBQUEsVUFBMkIsZUFBZSxDQUFDLElBQUk7UUFHL0MsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQzNCLE9BQU8sRUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUNsRCxDQUFDO0lBQ04sQ0FBQzs7Ozs7OztJQUVPLDZDQUFtQjs7Ozs7O0lBQTNCLFVBQ0ksT0FBd0IsRUFDeEIsYUFBcUI7UUFFckIsUUFBUSxPQUFPLEVBQUU7WUFDYixLQUFLLGVBQWUsQ0FBQyxJQUFJO2dCQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDcEUsS0FBSyxlQUFlLENBQUMsS0FBSztnQkFDdEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JFLEtBQUssZUFBZSxDQUFDLEdBQUc7Z0JBQ3BCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNuRSxLQUFLLGVBQWUsQ0FBQyxZQUFZO2dCQUM3QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsOEJBQThCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDM0U7Z0JBQ0ksT0FBTyxJQUFJLENBQUM7U0FDbkI7SUFDTCxDQUFDOztnQkFsQ0osSUFBSSxTQUFDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQzs7OztnQkFOakIsb0JBQW9CO2dCQURwQixZQUFZOztJQTBDcEIsc0JBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQWxDWSxlQUFlOzs7Ozs7SUFFcEIsb0NBQWdEOzs7OztJQUNoRCx1Q0FBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm0sIFNlY3VyaXR5Q29udGV4dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RvbVNhbml0aXplciwgU2FmZVZhbHVlfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7TmdEb21wdXJpZnlTYW5pdGl6ZXJ9IGZyb20gJy4vbmctZG9tcHVyaWZ5LnNlcnZpY2UnO1xuaW1wb3J0IHtOZ0RvbXB1cmlmeUNvbmZpZ30gZnJvbSAnLi90eXBlcy9uZy1kb21wdXJpZnktY29uZmlnJztcblxuLyoqXG4gKiBQaXBlIHRoYXQgdHJhbnNmb3JtcyBkaXJ0eSBjb250ZW50IHRvIGNsZWFuIHZpYSB7QGxpbmsgTmdEb21wdXJpZnlTYW5pdGl6ZXJ9XG4gKi9cbkBQaXBlKHtuYW1lOiAnZG9tcHVyaWZ5J30pXG5leHBvcnQgY2xhc3MgTmdEb21wdXJpZnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuaXRpemVyOiBOZ0RvbXB1cmlmeVNhbml0aXplcixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICApIHt9XG5cbiAgICB0cmFuc2Zvcm0oXG4gICAgICAgIHZhbHVlOiB7fSB8IHN0cmluZyB8IG51bGwsXG4gICAgICAgIGNvbnRleHQ6IFNlY3VyaXR5Q29udGV4dCA9IFNlY3VyaXR5Q29udGV4dC5IVE1MLFxuICAgICAgICBjb25maWc/OiBOZ0RvbXB1cmlmeUNvbmZpZyxcbiAgICApOiBTYWZlVmFsdWUgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnlwYXNzU2VjdXJpdHlUcnVzdChcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICB0aGlzLnNhbml0aXplci5zYW5pdGl6ZShjb250ZXh0LCB2YWx1ZSwgY29uZmlnKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ5cGFzc1NlY3VyaXR5VHJ1c3QoXG4gICAgICAgIGNvbnRleHQ6IFNlY3VyaXR5Q29udGV4dCxcbiAgICAgICAgcHVyaWZpZWRWYWx1ZTogc3RyaW5nLFxuICAgICk6IFNhZmVWYWx1ZSB8IG51bGwge1xuICAgICAgICBzd2l0Y2ggKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGNhc2UgU2VjdXJpdHlDb250ZXh0LkhUTUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHB1cmlmaWVkVmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBTZWN1cml0eUNvbnRleHQuU1RZTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RTdHlsZShwdXJpZmllZFZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgU2VjdXJpdHlDb250ZXh0LlVSTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFVybChwdXJpZmllZFZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgU2VjdXJpdHlDb250ZXh0LlJFU09VUkNFX1VSTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKHB1cmlmaWVkVmFsdWUpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==