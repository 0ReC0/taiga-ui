/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, SecurityContext } from '@angular/core';
import * as dompurify from 'dompurify';
import { DOMPURIFY_CONFIG } from './tokens/dompurify-config';
import { DOMPURIFY_HOOKS } from './tokens/dompurify-hooks';
import { SANITIZE_STYLE } from './tokens/sanitize-style';
import * as i0 from "@angular/core";
import * as i1 from "./tokens/dompurify-config";
import * as i2 from "./tokens/sanitize-style";
import * as i3 from "@angular/common";
import * as i4 from "./tokens/dompurify-hooks";
/** @type {?} */
const createDOMPurify = dompurify;
/**
 * Implementation of Angular {\@link Sanitizer} purifying via DOMPurify
 *
 * use {\@link DOMPURIFY_CONFIG} token to provide config ({\@link NgDompurifyConfig})
 * use {\@link SANITIZE_STYLE} token to provide a style sanitizing method ({\@link SanitizeStyle})
 * use {\@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({\@link addHook})
 *
 * Ambient type cannot be used without \@dynamic https://github.com/angular/angular/issues/23395
 * \@dynamic
 */
export class NgDompurifySanitizer {
    /**
     * @param {?} config
     * @param {?} sanitizeStyle
     * @param {?} __2
     * @param {?} hooks
     */
    constructor(config, sanitizeStyle, { defaultView }, hooks) {
        this.config = config;
        this.sanitizeStyle = sanitizeStyle;
        this.domPurify = createDOMPurify((/** @type {?} */ (defaultView)));
        hooks.forEach(({ name, hook }) => {
            this.domPurify.addHook(name, hook);
        });
    }
    /**
     * @param {?} context
     * @param {?} value
     * @param {?=} config
     * @return {?}
     */
    sanitize(context, value, config = this.config) {
        if (context === SecurityContext.SCRIPT) {
            throw new Error('DOMPurify does not support SCRIPT context');
        }
        return context === SecurityContext.STYLE
            ? this.sanitizeStyle(String(value))
            : this.domPurify.sanitize(String(value || ''), config);
    }
}
NgDompurifySanitizer.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
NgDompurifySanitizer.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [SANITIZE_STYLE,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_HOOKS,] }] }
];
/** @nocollapse */ NgDompurifySanitizer.ngInjectableDef = i0.defineInjectable({ factory: function NgDompurifySanitizer_Factory() { return new NgDompurifySanitizer(i0.inject(i1.DOMPURIFY_CONFIG), i0.inject(i2.SANITIZE_STYLE), i0.inject(i3.DOCUMENT), i0.inject(i4.DOMPURIFY_HOOKS)); }, token: NgDompurifySanitizer, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgDompurifySanitizer.prototype.domPurify;
    /**
     * @type {?}
     * @private
     */
    NgDompurifySanitizer.prototype.config;
    /**
     * @type {?}
     * @private
     */
    NgDompurifySanitizer.prototype.sanitizeStyle;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZG9tcHVyaWZ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1kb21wdXJpZnkvIiwic291cmNlcyI6WyJsaWIvbmctZG9tcHVyaWZ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBYSxlQUFlLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxLQUFLLFNBQVMsTUFBTSxXQUFXLENBQUM7QUFFdkMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7OztNQUtqRCxlQUFlLEdBQUcsU0FBUzs7Ozs7Ozs7Ozs7QUFlakMsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7OztJQUc3QixZQUVxQixNQUF5QixFQUV6QixhQUE0QixFQUMzQixFQUFDLFdBQVcsRUFBVyxFQUV6QyxLQUFxQztRQUxwQixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUV6QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUs3QyxJQUFJLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxtQkFBQSxXQUFXLEVBQUMsQ0FBQyxDQUFDO1FBRS9DLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7Ozs7SUFFRCxRQUFRLENBQ0osT0FBd0IsRUFDeEIsS0FBeUIsRUFDekIsU0FBNEIsSUFBSSxDQUFDLE1BQU07UUFFdkMsSUFBSSxPQUFPLEtBQUssZUFBZSxDQUFDLE1BQU0sRUFBRTtZQUNwQyxNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7U0FDaEU7UUFFRCxPQUFPLE9BQU8sS0FBSyxlQUFlLENBQUMsS0FBSztZQUNwQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7O1lBbENKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs0Q0FLUSxNQUFNLFNBQUMsZ0JBQWdCOzRDQUV2QixNQUFNLFNBQUMsY0FBYztZQUVXLFFBQVEsdUJBQXhDLE1BQU0sU0FBQyxRQUFROzRDQUNmLE1BQU0sU0FBQyxlQUFlOzs7Ozs7OztJQVIzQix5Q0FBdUM7Ozs7O0lBR25DLHNDQUMwQzs7Ozs7SUFDMUMsNkNBQzZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBTYW5pdGl6ZXIsIFNlY3VyaXR5Q29udGV4dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBkb21wdXJpZnkgZnJvbSAnZG9tcHVyaWZ5JztcbmltcG9ydCB7RE9NUHVyaWZ5SX0gZnJvbSAnZG9tcHVyaWZ5JztcbmltcG9ydCB7RE9NUFVSSUZZX0NPTkZJR30gZnJvbSAnLi90b2tlbnMvZG9tcHVyaWZ5LWNvbmZpZyc7XG5pbXBvcnQge0RPTVBVUklGWV9IT09LU30gZnJvbSAnLi90b2tlbnMvZG9tcHVyaWZ5LWhvb2tzJztcbmltcG9ydCB7U0FOSVRJWkVfU1RZTEV9IGZyb20gJy4vdG9rZW5zL3Nhbml0aXplLXN0eWxlJztcbmltcG9ydCB7TmdEb21wdXJpZnlDb25maWd9IGZyb20gJy4vdHlwZXMvbmctZG9tcHVyaWZ5LWNvbmZpZyc7XG5pbXBvcnQge05nRG9tcHVyaWZ5SG9va30gZnJvbSAnLi90eXBlcy9uZy1kb21wdXJpZnktaG9vayc7XG5pbXBvcnQge1Nhbml0aXplU3R5bGV9IGZyb20gJy4vdHlwZXMvc2FuaXRpemUtc3R5bGUnO1xuXG5jb25zdCBjcmVhdGVET01QdXJpZnkgPSBkb21wdXJpZnk7XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgQW5ndWxhciB7QGxpbmsgU2FuaXRpemVyfSBwdXJpZnlpbmcgdmlhIERPTVB1cmlmeVxuICpcbiAqIHVzZSB7QGxpbmsgRE9NUFVSSUZZX0NPTkZJR30gdG9rZW4gdG8gcHJvdmlkZSBjb25maWcgKHtAbGluayBOZ0RvbXB1cmlmeUNvbmZpZ30pXG4gKiB1c2Uge0BsaW5rIFNBTklUSVpFX1NUWUxFfSB0b2tlbiB0byBwcm92aWRlIGEgc3R5bGUgc2FuaXRpemluZyBtZXRob2QgKHtAbGluayBTYW5pdGl6ZVN0eWxlfSlcbiAqIHVzZSB7QGxpbmsgRE9NUFVSSUZZX0hPT0tTfSB0b2tlbiB0byBwcm92aWRlIGEgaG9va3MgZm9yIERPTVB1cmlmeSAoe0BsaW5rIGFkZEhvb2t9KVxuICpcbiAqIEFtYmllbnQgdHlwZSBjYW5ub3QgYmUgdXNlZCB3aXRob3V0IEBkeW5hbWljIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzIzMzk1XG4gKiBAZHluYW1pY1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0RvbXB1cmlmeVNhbml0aXplciBpbXBsZW1lbnRzIFNhbml0aXplciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkb21QdXJpZnk6IERPTVB1cmlmeUk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChET01QVVJJRllfQ09ORklHKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZzogTmdEb21wdXJpZnlDb25maWcsXG4gICAgICAgIEBJbmplY3QoU0FOSVRJWkVfU1RZTEUpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuaXRpemVTdHlsZTogU2FuaXRpemVTdHlsZSxcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkge2RlZmF1bHRWaWV3fTogRG9jdW1lbnQsXG4gICAgICAgIEBJbmplY3QoRE9NUFVSSUZZX0hPT0tTKVxuICAgICAgICBob29rczogUmVhZG9ubHlBcnJheTxOZ0RvbXB1cmlmeUhvb2s+LFxuICAgICkge1xuICAgICAgICB0aGlzLmRvbVB1cmlmeSA9IGNyZWF0ZURPTVB1cmlmeShkZWZhdWx0VmlldyEpO1xuXG4gICAgICAgIGhvb2tzLmZvckVhY2goKHtuYW1lLCBob29rfSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kb21QdXJpZnkuYWRkSG9vayhuYW1lLCBob29rKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2FuaXRpemUoXG4gICAgICAgIGNvbnRleHQ6IFNlY3VyaXR5Q29udGV4dCxcbiAgICAgICAgdmFsdWU6IHt9IHwgc3RyaW5nIHwgbnVsbCxcbiAgICAgICAgY29uZmlnOiBOZ0RvbXB1cmlmeUNvbmZpZyA9IHRoaXMuY29uZmlnLFxuICAgICk6IHN0cmluZyB7XG4gICAgICAgIGlmIChjb250ZXh0ID09PSBTZWN1cml0eUNvbnRleHQuU0NSSVBUKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RPTVB1cmlmeSBkb2VzIG5vdCBzdXBwb3J0IFNDUklQVCBjb250ZXh0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29udGV4dCA9PT0gU2VjdXJpdHlDb250ZXh0LlNUWUxFXG4gICAgICAgICAgICA/IHRoaXMuc2FuaXRpemVTdHlsZShTdHJpbmcodmFsdWUpKVxuICAgICAgICAgICAgOiB0aGlzLmRvbVB1cmlmeS5zYW5pdGl6ZShTdHJpbmcodmFsdWUgfHwgJycpLCBjb25maWcpO1xuICAgIH1cbn1cbiJdfQ==