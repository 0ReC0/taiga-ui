(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@tinkoff/ng-polymorpheus', ['exports', '@angular/common', '@angular/core'], factory) :
    (factory((global.tinkoff = global.tinkoff || {}, global.tinkoff['ng-polymorpheus'] = {}),global.ng.common,global.ng.core));
}(this, (function (exports,common,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Use this token to access context within your components when
     * instantiating them through {\@link PolymorpheusOutletComponent}
     * @type {?}
     */
    var POLYMORPHEUS_CONTEXT = new core.InjectionToken('Context from polymorpheus-outlet');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wrapper class for a component that will be used as content for {\@link PolymorpheusOutletComponent}
     *
     * @param component — an Angular component to be dynamically created
     * @param injector — optional {\@link Injector} for lazy loaded module case
     * @template T, C
     */
    var /**
     * Wrapper class for a component that will be used as content for {\@link PolymorpheusOutletComponent}
     *
     * @param component — an Angular component to be dynamically created
     * @param injector — optional {\@link Injector} for lazy loaded module case
     * @template T, C
     */ PolymorpheusComponent = /** @class */ (function () {
        function PolymorpheusComponent(component, injector) {
            if (injector === void 0) {
                injector = null;
            }
            this.component = component;
            this.injector = injector;
        }
        /**
         * @param {?} injector
         * @param {?} context
         * @return {?}
         */
        PolymorpheusComponent.prototype.createInjector = /**
         * @param {?} injector
         * @param {?} context
         * @return {?}
         */
            function (injector, context) {
                return core.Injector.create({
                    parent: this.injector || injector,
                    providers: [
                        {
                            provide: POLYMORPHEUS_CONTEXT,
                            useValue: context,
                        },
                    ],
                });
            };
        return PolymorpheusComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * ng-template wrapper directive also storing {\@link ChangeDetectorRef} to properly handle change detection.
     * @template T
     */
    var PolymorpheusTemplate = /** @class */ (function () {
        function PolymorpheusTemplate(template, changeDetectorRef) {
            this.template = template;
            this.changeDetectorRef = changeDetectorRef;
        }
        /**
         * @return {?}
         */
        PolymorpheusTemplate.prototype.check = /**
         * @return {?}
         */
            function () {
                this.changeDetectorRef.markForCheck();
            };
        PolymorpheusTemplate.decorators = [
            { type: core.Directive, args: [{
                        selector: 'ng-template[polymorpheus]',
                        exportAs: 'polymorpheus',
                    },] }
        ];
        /** @nocollapse */
        PolymorpheusTemplate.ctorParameters = function () {
            return [
                { type: core.TemplateRef, decorators: [{ type: core.Inject, args: [core.TemplateRef,] }, { type: core.Self }] },
                { type: core.ChangeDetectorRef, decorators: [{ type: core.Inject, args: [core.ChangeDetectorRef,] }] }
            ];
        };
        return PolymorpheusTemplate;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Outlet instantiating {\@link PolymorpheusContent} with given context
     * @template C
     */
    var PolymorpheusOutletComponent = /** @class */ (function () {
        function PolymorpheusOutletComponent(injector) {
            this.injector = injector;
            this.content = null;
            this.template = null;
        }
        Object.defineProperty(PolymorpheusOutletComponent.prototype, "primitive", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.content ||
                    this.isComponent(this.content) ||
                    this.isTemplate(this.content)) {
                    return '';
                }
                return typeof this.content === 'function'
                    ? this.content(this.context)
                    : this.content;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} content
         * @return {?}
         */
        PolymorpheusOutletComponent.prototype.isDirective = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                return content instanceof PolymorpheusTemplate;
            };
        /**
         * @param {?} content
         * @return {?}
         */
        PolymorpheusOutletComponent.prototype.isTemplate = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                return this.isDirective(content) || content instanceof core.TemplateRef;
            };
        /**
         * @param {?} content
         * @return {?}
         */
        PolymorpheusOutletComponent.prototype.isComponent = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                return content instanceof PolymorpheusComponent;
            };
        /**
         * @param {?} content
         * @param {?} componentTmp
         * @return {?}
         */
        PolymorpheusOutletComponent.prototype.getTemplate = /**
         * @param {?} content
         * @param {?} componentTmp
         * @return {?}
         */
            function (content, componentTmp) {
                if (this.isComponent(content)) {
                    return componentTmp;
                }
                return this.isDirective(content) ? content.template : content;
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        PolymorpheusOutletComponent.prototype.ngOnChanges = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var content = _a.content, context = _a.context;
                // TODO: Keep an eye on private field, name can change
                /** @type {?} */
                var componentRef = ( /** @type {?} */((!content &&
                    context &&
                    this.outlet &&
                    this.outlet['_componentRef'])));
                if (componentRef) {
                    componentRef.injector.get(core.ChangeDetectorRef).markForCheck();
                }
            };
        /**
         * @return {?}
         */
        PolymorpheusOutletComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (this.isDirective(this.content)) {
                    this.content.check();
                }
            };
        PolymorpheusOutletComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'polymorpheus-outlet, [polymorpheus-outlet]',
                        template: "<ng-container\r\n    *ngIf=\"isTemplate(content) || isComponent(content)\"\r\n    #mutableContext=\"context\"\r\n    context\r\n    [ngTemplateOutlet]=\"getTemplate(content, component)\"\r\n    [ngTemplateOutletContext]=\"context\"\r\n>\r\n    <ng-template #component>\r\n        <ng-container\r\n            *ngIf=\"isComponent(content)\"\r\n            [ngComponentOutlet]=\"content.component\"\r\n            [ngComponentOutletInjector]=\"content | injector : mutableContext.context : injector\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n<ng-container *ngIf=\"primitive\">\r\n    <ng-container *ngIf=\"!template; else child\">{{primitive}}</ng-container>\r\n    <ng-template #child>\r\n        <ng-container\r\n            [ngTemplateOutlet]=\"template\"\r\n            [ngTemplateOutletContext]=\"{$implicit: primitive}\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [':host { display: block; }']
                    }] }
        ];
        /** @nocollapse */
        PolymorpheusOutletComponent.ctorParameters = function () {
            return [
                { type: core.Injector, decorators: [{ type: core.Inject, args: [core.Injector,] }] }
            ];
        };
        PolymorpheusOutletComponent.propDecorators = {
            content: [{ type: core.Input }],
            context: [{ type: core.Input }],
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }],
            outlet: [{ type: core.ViewChild, args: [common.NgComponentOutlet,] }]
        };
        return PolymorpheusOutletComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Helper directive, extracting first {\@link EmbeddedViewRef} context if it's present
     * @template C
     */
    var ContextDirective = /** @class */ (function () {
        function ContextDirective(viewContainerRef) {
            this.viewContainerRef = viewContainerRef;
        }
        Object.defineProperty(ContextDirective.prototype, "context", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var viewRef = ( /** @type {?} */(this.viewContainerRef.get(0)));
                return viewRef && viewRef.context;
            },
            enumerable: true,
            configurable: true
        });
        ContextDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[context]',
                        exportAs: 'context',
                    },] }
        ];
        /** @nocollapse */
        ContextDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef, decorators: [{ type: core.Inject, args: [core.ViewContainerRef,] }] }
            ];
        };
        return ContextDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Internal use {\@link Pipe} to create {\@link Injector}
     * only when either content or context change
     * @template C
     */
    var InjectorPipe = /** @class */ (function () {
        function InjectorPipe() {
        }
        /**
         * @param {?} content
         * @param {?} context
         * @param {?} injector
         * @return {?}
         */
        InjectorPipe.prototype.transform = /**
         * @param {?} content
         * @param {?} context
         * @param {?} injector
         * @return {?}
         */
            function (content, context, injector) {
                return content.createInjector(injector, context);
            };
        InjectorPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'injector',
                    },] }
        ];
        return InjectorPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PolymorpheusModule = /** @class */ (function () {
        function PolymorpheusModule() {
        }
        PolymorpheusModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [
                            PolymorpheusOutletComponent,
                            PolymorpheusTemplate,
                            ContextDirective,
                            InjectorPipe,
                        ],
                        exports: [PolymorpheusOutletComponent, PolymorpheusTemplate],
                    },] }
        ];
        return PolymorpheusModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.PolymorpheusComponent = PolymorpheusComponent;
    exports.PolymorpheusTemplate = PolymorpheusTemplate;
    exports.PolymorpheusOutletComponent = PolymorpheusOutletComponent;
    exports.POLYMORPHEUS_CONTEXT = POLYMORPHEUS_CONTEXT;
    exports.PolymorpheusModule = PolymorpheusModule;
    exports.ɵa = ContextDirective;
    exports.ɵb = InjectorPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=tinkoff-ng-polymorpheus.umd.js.map