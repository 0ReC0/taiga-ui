{"version":3,"sources":["ng://@tinkoff/ng-polymorpheus/tokens/context.ts","ng://@tinkoff/ng-polymorpheus/classes/component.ts","ng://@tinkoff/ng-polymorpheus/directives/template.ts","ng://@tinkoff/ng-polymorpheus/outlet/outlet.component.ts","ng://@tinkoff/ng-polymorpheus/directives/context.ts","ng://@tinkoff/ng-polymorpheus/pipes/injector.ts","ng://@tinkoff/ng-polymorpheus/polymorpheus.module.ts"],"names":["POLYMORPHEUS_CONTEXT","InjectionToken","PolymorpheusComponent","prototype","createInjector","injector","context","Injector","create","parent","this","providers","provide","useValue","component","PolymorpheusTemplate","check","changeDetectorRef","markForCheck","Directive","args","selector","exportAs","TemplateRef","decorators","type","Inject","Self","ChangeDetectorRef","template","PolymorpheusOutletComponent","Object","defineProperty","content","isComponent","isTemplate","isDirective","getTemplate","componentTmp","ngOnChanges","_a","componentRef","outlet","get","ngDoCheck","Component","changeDetection","ChangeDetectionStrategy","OnPush","Input","ContentChild","ViewChild","NgComponentOutlet","ContextDirective","viewRef","viewContainerRef","ViewContainerRef","InjectorPipe","transform","Pipe","name","PolymorpheusModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Use this token to access context within your components when\r\n * instantiating them through {@link PolymorpheusOutletComponent}\r\n */\r\nexport const POLYMORPHEUS_CONTEXT = new InjectionToken<object>(\r\n    'Context from polymorpheus-outlet',\r\n);\r\n","import {Injector, Type} from '@angular/core';\r\nimport {POLYMORPHEUS_CONTEXT} from '../tokens/context';\r\n\r\n/**\r\n * Wrapper class for a component that will be used as content for {@link PolymorpheusOutletComponent}\r\n *\r\n * @param component â an Angular component to be dynamically created\r\n * @param injector â optional {@link Injector} for lazy loaded module case\r\n */\r\nexport class PolymorpheusComponent<T extends object, C extends object> {\r\n    constructor(\r\n        readonly component: Type<T>,\r\n        private readonly injector: Injector | null = null,\r\n    ) {}\r\n\r\n    createInjector(injector: Injector, context: C): Injector {\r\n        return Injector.create({\r\n            parent: this.injector || injector,\r\n            providers: [\r\n                {\r\n                    provide: POLYMORPHEUS_CONTEXT,\r\n                    useValue: context,\r\n                },\r\n            ],\r\n        });\r\n    }\r\n}\r\n","import {ChangeDetectorRef, Directive, Inject, Self, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * ng-template wrapper directive also storing {@link ChangeDetectorRef} to properly handle change detection.\r\n */\r\n@Directive({\r\n    selector: 'ng-template[polymorpheus]',\r\n    exportAs: 'polymorpheus',\r\n})\r\nexport class PolymorpheusTemplate<T extends object> {\r\n    constructor(\r\n        @Inject(TemplateRef)\r\n        @Self()\r\n        readonly template: TemplateRef<T>,\r\n        @Inject(ChangeDetectorRef) private readonly changeDetectorRef: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    check() {\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n}\r\n","import {NgComponentOutlet} from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ComponentRef,\r\n    ContentChild,\r\n    DoCheck,\r\n    Inject,\r\n    Injector,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport {PolymorpheusComponent} from '../classes/component';\r\nimport {PolymorpheusTemplate} from '../directives/template';\r\nimport {PolymorpheusContent} from '../types/content';\r\nimport {PolymorpheusPrimitive} from '../types/primitive';\r\n\r\n/**\r\n * Outlet instantiating {@link PolymorpheusContent} with given context\r\n */\r\n@Component({\r\n    selector: 'polymorpheus-outlet, [polymorpheus-outlet]',\r\n    templateUrl: './outlet.template.html',\r\n    styles: [':host { display: block; }'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PolymorpheusOutletComponent<C extends object> implements DoCheck, OnChanges {\r\n    @Input()\r\n    content: PolymorpheusContent<C> | null = null;\r\n\r\n    @Input()\r\n    context!: C;\r\n\r\n    @ContentChild(TemplateRef)\r\n    readonly template: TemplateRef<C> | null = null;\r\n\r\n    @ViewChild(NgComponentOutlet)\r\n    readonly outlet?: NgComponentOutlet;\r\n\r\n    constructor(@Inject(Injector) readonly injector: Injector) {}\r\n\r\n    get primitive(): PolymorpheusPrimitive {\r\n        if (\r\n            !this.content ||\r\n            this.isComponent(this.content) ||\r\n            this.isTemplate(this.content)\r\n        ) {\r\n            return '';\r\n        }\r\n\r\n        return typeof this.content === 'function'\r\n            ? this.content(this.context)\r\n            : this.content;\r\n    }\r\n\r\n    isDirective(\r\n        content: PolymorpheusContent<C> | null,\r\n    ): content is PolymorpheusTemplate<C> {\r\n        return content instanceof PolymorpheusTemplate;\r\n    }\r\n\r\n    isTemplate(\r\n        content: PolymorpheusContent<C> | null,\r\n    ): content is PolymorpheusTemplate<C> | TemplateRef<C> {\r\n        return this.isDirective(content) || content instanceof TemplateRef;\r\n    }\r\n\r\n    isComponent(\r\n        content: PolymorpheusContent<C> | null,\r\n    ): content is PolymorpheusComponent<object, C> {\r\n        return content instanceof PolymorpheusComponent;\r\n    }\r\n\r\n    getTemplate(\r\n        content:\r\n            | PolymorpheusComponent<object, C>\r\n            | PolymorpheusTemplate<C>\r\n            | TemplateRef<C>,\r\n        componentTmp: TemplateRef<C>,\r\n    ): TemplateRef<C> {\r\n        if (this.isComponent(content)) {\r\n            return componentTmp;\r\n        }\r\n\r\n        return this.isDirective(content) ? content.template : content;\r\n    }\r\n\r\n    ngOnChanges({content, context}: SimpleChanges) {\r\n        // TODO: Keep an eye on private field, name can change\r\n        const componentRef = (!content &&\r\n            context &&\r\n            this.outlet &&\r\n            this.outlet['_componentRef']) as ComponentRef<object> | null | false;\r\n\r\n        if (componentRef) {\r\n            componentRef.injector.get(ChangeDetectorRef).markForCheck();\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if (this.isDirective(this.content)) {\r\n            this.content.check();\r\n        }\r\n    }\r\n}\r\n","import {Directive, EmbeddedViewRef, Inject, ViewContainerRef} from '@angular/core';\r\n\r\n/**\r\n * Helper directive, extracting first {@link EmbeddedViewRef} context if it's present\r\n */\r\n@Directive({\r\n    selector: '[context]',\r\n    exportAs: 'context',\r\n})\r\nexport class ContextDirective<C> {\r\n    constructor(\r\n        @Inject(ViewContainerRef)\r\n        private readonly viewContainerRef: ViewContainerRef,\r\n    ) {}\r\n\r\n    get context(): C | null {\r\n        const viewRef = this.viewContainerRef.get(0) as EmbeddedViewRef<C> | null;\r\n\r\n        return viewRef && viewRef.context;\r\n    }\r\n}\r\n","import {Injector, Pipe, PipeTransform} from '@angular/core';\r\nimport {PolymorpheusComponent} from '../classes/component';\r\n\r\n/**\r\n * Internal use {@link Pipe} to create {@link Injector}\r\n * only when either content or context change\r\n */\r\n@Pipe({\r\n    name: 'injector',\r\n})\r\nexport class InjectorPipe<C extends object> implements PipeTransform {\r\n    transform(\r\n        content: PolymorpheusComponent<object, C>,\r\n        context: C,\r\n        injector: Injector,\r\n    ): Injector {\r\n        return content.createInjector(injector, context);\r\n    }\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {ContextDirective} from './directives/context';\r\nimport {PolymorpheusTemplate} from './directives/template';\r\nimport {PolymorpheusOutletComponent} from './outlet/outlet.component';\r\nimport {InjectorPipe} from './pipes/injector';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [\r\n        PolymorpheusOutletComponent,\r\n        PolymorpheusTemplate,\r\n        ContextDirective,\r\n        InjectorPipe,\r\n    ],\r\n    exports: [PolymorpheusOutletComponent, PolymorpheusTemplate],\r\n})\r\nexport class PolymorpheusModule {}\r\n"]}