import { NgComponentOutlet } from '@angular/common';
import { DoCheck, Injector, OnChanges, SimpleChanges, TemplateRef } from '@angular/core';
import { PolymorpheusComponent } from '../classes/component';
import { PolymorpheusTemplate } from '../directives/template';
import { PolymorpheusContent } from '../types/content';
import { PolymorpheusPrimitive } from '../types/primitive';
/**
 * Outlet instantiating {@link PolymorpheusContent} with given context
 */
import * as ɵngcc0 from '@angular/core';
export declare class PolymorpheusOutletComponent<C extends object> implements DoCheck, OnChanges {
    readonly injector: Injector;
    content: PolymorpheusContent<C> | null;
    context: C;
    readonly template: TemplateRef<C> | null;
    readonly outlet?: NgComponentOutlet;
    constructor(injector: Injector);
    readonly primitive: PolymorpheusPrimitive;
    isDirective(content: PolymorpheusContent<C> | null): content is PolymorpheusTemplate<C>;
    isTemplate(content: PolymorpheusContent<C> | null): content is PolymorpheusTemplate<C> | TemplateRef<C>;
    isComponent(content: PolymorpheusContent<C> | null): content is PolymorpheusComponent<object, C>;
    getTemplate(content: PolymorpheusComponent<object, C> | PolymorpheusTemplate<C> | TemplateRef<C>, componentTmp: TemplateRef<C>): TemplateRef<C>;
    ngOnChanges({ content, context }: SimpleChanges): void;
    ngDoCheck(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolymorpheusOutletComponent<any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PolymorpheusOutletComponent<any>, "polymorpheus-outlet, [polymorpheus-outlet]", never, { "content": "content"; "context": "context"; }, {}, ["template"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJvdXRsZXQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdDb21wb25lbnRPdXRsZXQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBEb0NoZWNrLCBJbmplY3RvciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQb2x5bW9ycGhldXNDb21wb25lbnQgfSBmcm9tICcuLi9jbGFzc2VzL2NvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvbHltb3JwaGV1c1RlbXBsYXRlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy90ZW1wbGF0ZSc7XHJcbmltcG9ydCB7IFBvbHltb3JwaGV1c0NvbnRlbnQgfSBmcm9tICcuLi90eXBlcy9jb250ZW50JztcclxuaW1wb3J0IHsgUG9seW1vcnBoZXVzUHJpbWl0aXZlIH0gZnJvbSAnLi4vdHlwZXMvcHJpbWl0aXZlJztcclxuLyoqXHJcbiAqIE91dGxldCBpbnN0YW50aWF0aW5nIHtAbGluayBQb2x5bW9ycGhldXNDb250ZW50fSB3aXRoIGdpdmVuIGNvbnRleHRcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvbHltb3JwaGV1c091dGxldENvbXBvbmVudDxDIGV4dGVuZHMgb2JqZWN0PiBpbXBsZW1lbnRzIERvQ2hlY2ssIE9uQ2hhbmdlcyB7XHJcbiAgICByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3I7XHJcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PEM+IHwgbnVsbDtcclxuICAgIGNvbnRleHQ6IEM7XHJcbiAgICByZWFkb25seSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8Qz4gfCBudWxsO1xyXG4gICAgcmVhZG9ubHkgb3V0bGV0PzogTmdDb21wb25lbnRPdXRsZXQ7XHJcbiAgICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IpO1xyXG4gICAgcmVhZG9ubHkgcHJpbWl0aXZlOiBQb2x5bW9ycGhldXNQcmltaXRpdmU7XHJcbiAgICBpc0RpcmVjdGl2ZShjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PEM+IHwgbnVsbCk6IGNvbnRlbnQgaXMgUG9seW1vcnBoZXVzVGVtcGxhdGU8Qz47XHJcbiAgICBpc1RlbXBsYXRlKGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8Qz4gfCBudWxsKTogY29udGVudCBpcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxDPiB8IFRlbXBsYXRlUmVmPEM+O1xyXG4gICAgaXNDb21wb25lbnQoY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxDPiB8IG51bGwpOiBjb250ZW50IGlzIFBvbHltb3JwaGV1c0NvbXBvbmVudDxvYmplY3QsIEM+O1xyXG4gICAgZ2V0VGVtcGxhdGUoY29udGVudDogUG9seW1vcnBoZXVzQ29tcG9uZW50PG9iamVjdCwgQz4gfCBQb2x5bW9ycGhldXNUZW1wbGF0ZTxDPiB8IFRlbXBsYXRlUmVmPEM+LCBjb21wb25lbnRUbXA6IFRlbXBsYXRlUmVmPEM+KTogVGVtcGxhdGVSZWY8Qz47XHJcbiAgICBuZ09uQ2hhbmdlcyh7IGNvbnRlbnQsIGNvbnRleHQgfTogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxufVxyXG4iXX0=