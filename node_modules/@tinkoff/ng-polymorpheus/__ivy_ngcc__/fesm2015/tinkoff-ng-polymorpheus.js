import { NgComponentOutlet, CommonModule } from '@angular/common';
import { InjectionToken, Injector, ChangeDetectorRef, Directive, Inject, Self, TemplateRef, ChangeDetectionStrategy, Component, ContentChild, Input, ViewChild, ViewContainerRef, Pipe, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use this token to access context within your components when
 * instantiating them through {\@link PolymorpheusOutletComponent}
 * @type {?}
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function PolymorpheusOutletComponent_ng_container_0_ng_template_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 6);
    ɵngcc0.ɵɵpipe(1, "injector");
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext(2);
    const _r2 = ɵngcc0.ɵɵreference(1);
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngComponentOutlet", ctx_r5.content.component)("ngComponentOutletInjector", ɵngcc0.ɵɵpipeBind3(1, 2, ctx_r5.content, _r2.context, ctx_r5.injector));
} }
function PolymorpheusOutletComponent_ng_container_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, PolymorpheusOutletComponent_ng_container_0_ng_template_2_ng_container_0_Template, 2, 6, "ng-container", 5);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.isComponent(ctx_r4.content));
} }
function PolymorpheusOutletComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 2, 3);
    ɵngcc0.ɵɵtemplate(2, PolymorpheusOutletComponent_ng_container_0_ng_template_2_Template, 1, 1, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(3);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.getTemplate(ctx_r0.content, _r3))("ngTemplateOutletContext", ctx_r0.context);
} }
function PolymorpheusOutletComponent_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.primitive);
} }
const _c0 = function (a0) { return { $implicit: a0 }; };
function PolymorpheusOutletComponent_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 9);
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r8.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r8.primitive));
} }
function PolymorpheusOutletComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, PolymorpheusOutletComponent_ng_container_1_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(2, PolymorpheusOutletComponent_ng_container_1_ng_template_2_Template, 1, 4, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r7 = ɵngcc0.ɵɵreference(3);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.template)("ngIfElse", _r7);
} }
const POLYMORPHEUS_CONTEXT = new InjectionToken('Context from polymorpheus-outlet');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Wrapper class for a component that will be used as content for {\@link PolymorpheusOutletComponent}
 *
 * @param component — an Angular component to be dynamically created
 * @param injector — optional {\@link Injector} for lazy loaded module case
 * @template T, C
 */
class PolymorpheusComponent {
    /**
     * @param {?} component
     * @param {?=} injector
     */
    constructor(component, injector = null) {
        this.component = component;
        this.injector = injector;
    }
    /**
     * @param {?} injector
     * @param {?} context
     * @return {?}
     */
    createInjector(injector, context) {
        return Injector.create({
            parent: this.injector || injector,
            providers: [
                {
                    provide: POLYMORPHEUS_CONTEXT,
                    useValue: context,
                },
            ],
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * ng-template wrapper directive also storing {\@link ChangeDetectorRef} to properly handle change detection.
 * @template T
 */
class PolymorpheusTemplate {
    /**
     * @param {?} template
     * @param {?} changeDetectorRef
     */
    constructor(template, changeDetectorRef) {
        this.template = template;
        this.changeDetectorRef = changeDetectorRef;
    }
    /**
     * @return {?}
     */
    check() {
        this.changeDetectorRef.markForCheck();
    }
}
PolymorpheusTemplate.ɵfac = function PolymorpheusTemplate_Factory(t) { return new (t || PolymorpheusTemplate)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 2), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef)); };
PolymorpheusTemplate.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PolymorpheusTemplate, selectors: [["ng-template", "polymorpheus", ""]], exportAs: ["polymorpheus"] });
/** @nocollapse */
PolymorpheusTemplate.ctorParameters = () => [
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }, { type: Self }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PolymorpheusTemplate, [{
        type: Directive,
        args: [{
                selector: 'ng-template[polymorpheus]',
                exportAs: 'polymorpheus'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef, decorators: [{
                type: Inject,
                args: [TemplateRef]
            }, {
                type: Self
            }] }, { type: ɵngcc0.ChangeDetectorRef, decorators: [{
                type: Inject,
                args: [ChangeDetectorRef]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Outlet instantiating {\@link PolymorpheusContent} with given context
 * @template C
 */
class PolymorpheusOutletComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.content = null;
        this.template = null;
    }
    /**
     * @return {?}
     */
    get primitive() {
        if (!this.content ||
            this.isComponent(this.content) ||
            this.isTemplate(this.content)) {
            return '';
        }
        return typeof this.content === 'function'
            ? this.content(this.context)
            : this.content;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    isDirective(content) {
        return content instanceof PolymorpheusTemplate;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    isTemplate(content) {
        return this.isDirective(content) || content instanceof TemplateRef;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    isComponent(content) {
        return content instanceof PolymorpheusComponent;
    }
    /**
     * @param {?} content
     * @param {?} componentTmp
     * @return {?}
     */
    getTemplate(content, componentTmp) {
        if (this.isComponent(content)) {
            return componentTmp;
        }
        return this.isDirective(content) ? content.template : content;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    ngOnChanges({ content, context }) {
        // TODO: Keep an eye on private field, name can change
        /** @type {?} */
        const componentRef = (/** @type {?} */ ((!content &&
            context &&
            this.outlet &&
            this.outlet['_componentRef'])));
        if (componentRef) {
            componentRef.injector.get(ChangeDetectorRef).markForCheck();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.isDirective(this.content)) {
            this.content.check();
        }
    }
}
PolymorpheusOutletComponent.ɵfac = function PolymorpheusOutletComponent_Factory(t) { return new (t || PolymorpheusOutletComponent)(ɵngcc0.ɵɵdirectiveInject(Injector)); };
PolymorpheusOutletComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PolymorpheusOutletComponent, selectors: [["polymorpheus-outlet"], ["", "polymorpheus-outlet", ""]], contentQueries: function PolymorpheusOutletComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, viewQuery: function PolymorpheusOutletComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(NgComponentOutlet, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.outlet = _t.first);
    } }, inputs: { content: "content", context: "context" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [["context", "", 3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [4, "ngIf"], ["context", "", 3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["mutableContext", "context"], ["component", ""], [3, "ngComponentOutlet", "ngComponentOutletInjector", 4, "ngIf"], [3, "ngComponentOutlet", "ngComponentOutletInjector"], [4, "ngIf", "ngIfElse"], ["child", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function PolymorpheusOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, PolymorpheusOutletComponent_ng_container_0_Template, 4, 2, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, PolymorpheusOutletComponent_ng_container_1_Template, 4, 2, "ng-container", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isTemplate(ctx.content) || ctx.isComponent(ctx.content));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.primitive);
    } }, directives: function () { return [ɵngcc1.NgIf, ContextDirective, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgComponentOutlet]; }, pipes: function () { return [InjectorPipe]; }, styles: ["[_nghost-%COMP%] { display: block; }"], changeDetection: 0 });
/** @nocollapse */
PolymorpheusOutletComponent.ctorParameters = () => [
    { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] }
];
PolymorpheusOutletComponent.propDecorators = {
    content: [{ type: Input }],
    context: [{ type: Input }],
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    outlet: [{ type: ViewChild, args: [NgComponentOutlet,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PolymorpheusOutletComponent, [{
        type: Component,
        args: [{
                selector: 'polymorpheus-outlet, [polymorpheus-outlet]',
                template: "<ng-container\r\n    *ngIf=\"isTemplate(content) || isComponent(content)\"\r\n    #mutableContext=\"context\"\r\n    context\r\n    [ngTemplateOutlet]=\"getTemplate(content, component)\"\r\n    [ngTemplateOutletContext]=\"context\"\r\n>\r\n    <ng-template #component>\r\n        <ng-container\r\n            *ngIf=\"isComponent(content)\"\r\n            [ngComponentOutlet]=\"content.component\"\r\n            [ngComponentOutletInjector]=\"content | injector : mutableContext.context : injector\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n<ng-container *ngIf=\"primitive\">\r\n    <ng-container *ngIf=\"!template; else child\">{{primitive}}</ng-container>\r\n    <ng-template #child>\r\n        <ng-container\r\n            [ngTemplateOutlet]=\"template\"\r\n            [ngTemplateOutletContext]=\"{$implicit: primitive}\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [':host { display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.Injector, decorators: [{
                type: Inject,
                args: [Injector]
            }] }]; }, { content: [{
            type: Input
        }], template: [{
            type: ContentChild,
            args: [TemplateRef]
        }], context: [{
            type: Input
        }], outlet: [{
            type: ViewChild,
            args: [NgComponentOutlet]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Helper directive, extracting first {\@link EmbeddedViewRef} context if it's present
 * @template C
 */
class ContextDirective {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    /**
     * @return {?}
     */
    get context() {
        /** @type {?} */
        const viewRef = (/** @type {?} */ (this.viewContainerRef.get(0)));
        return viewRef && viewRef.context;
    }
}
ContextDirective.ɵfac = function ContextDirective_Factory(t) { return new (t || ContextDirective)(ɵngcc0.ɵɵdirectiveInject(ViewContainerRef)); };
ContextDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ContextDirective, selectors: [["", "context", ""]], exportAs: ["context"] });
/** @nocollapse */
ContextDirective.ctorParameters = () => [
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContextDirective, [{
        type: Directive,
        args: [{
                selector: '[context]',
                exportAs: 'context'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef, decorators: [{
                type: Inject,
                args: [ViewContainerRef]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Internal use {\@link Pipe} to create {\@link Injector}
 * only when either content or context change
 * @template C
 */
class InjectorPipe {
    /**
     * @param {?} content
     * @param {?} context
     * @param {?} injector
     * @return {?}
     */
    transform(content, context, injector) {
        return content.createInjector(injector, context);
    }
}
InjectorPipe.ɵfac = function InjectorPipe_Factory(t) { return new (t || InjectorPipe)(); };
InjectorPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "injector", type: InjectorPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InjectorPipe, [{
        type: Pipe,
        args: [{
                name: 'injector'
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PolymorpheusModule {
}
PolymorpheusModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PolymorpheusModule });
PolymorpheusModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PolymorpheusModule_Factory(t) { return new (t || PolymorpheusModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PolymorpheusModule, { declarations: function () { return [PolymorpheusOutletComponent,
        PolymorpheusTemplate,
        ContextDirective,
        InjectorPipe]; }, imports: function () { return [CommonModule]; }, exports: function () { return [PolymorpheusOutletComponent,
        PolymorpheusTemplate]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PolymorpheusModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    PolymorpheusOutletComponent,
                    PolymorpheusTemplate,
                    ContextDirective,
                    InjectorPipe,
                ],
                exports: [PolymorpheusOutletComponent, PolymorpheusTemplate]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PolymorpheusComponent, PolymorpheusTemplate, PolymorpheusOutletComponent, POLYMORPHEUS_CONTEXT, PolymorpheusModule, ContextDirective as ɵa, InjectorPipe as ɵb };

//# sourceMappingURL=tinkoff-ng-polymorpheus.js.map