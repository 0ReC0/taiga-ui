{"version":3,"file":"tinkoff-ng-polymorpheus.js","sources":["ng:/@tinkoff/ng-polymorpheus/tokens/context.ts","ng:/@tinkoff/ng-polymorpheus/classes/component.ts","ng:/@tinkoff/ng-polymorpheus/directives/template.ts","ng:/@tinkoff/ng-polymorpheus/outlet/outlet.component.ts","ng:/@tinkoff/ng-polymorpheus/directives/context.ts","ng:/@tinkoff/ng-polymorpheus/pipes/injector.ts","ng:/@tinkoff/ng-polymorpheus/polymorpheus.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Use this token to access context within your components when\r\n * instantiating them through {@link PolymorpheusOutletComponent}\r\n */\r\nexport const POLYMORPHEUS_CONTEXT = new InjectionToken<object>(\r\n    'Context from polymorpheus-outlet',\r\n);\r\n","import {Injector, Type} from '@angular/core';\r\nimport {POLYMORPHEUS_CONTEXT} from '../tokens/context';\r\n\r\n/**\r\n * Wrapper class for a component that will be used as content for {@link PolymorpheusOutletComponent}\r\n *\r\n * @param component â an Angular component to be dynamically created\r\n * @param injector â optional {@link Injector} for lazy loaded module case\r\n */\r\nexport class PolymorpheusComponent<T extends object, C extends object> {\r\n    constructor(\r\n        readonly component: Type<T>,\r\n        private readonly injector: Injector | null = null,\r\n    ) {}\r\n\r\n    createInjector(injector: Injector, context: C): Injector {\r\n        return Injector.create({\r\n            parent: this.injector || injector,\r\n            providers: [\r\n                {\r\n                    provide: POLYMORPHEUS_CONTEXT,\r\n                    useValue: context,\r\n                },\r\n            ],\r\n        });\r\n    }\r\n}\r\n","import {ChangeDetectorRef, Directive, Inject, Self, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * ng-template wrapper directive also storing {@link ChangeDetectorRef} to properly handle change detection.\r\n */\r\n@Directive({\r\n    selector: 'ng-template[polymorpheus]',\r\n    exportAs: 'polymorpheus',\r\n})\r\nexport class PolymorpheusTemplate<T extends object> {\r\n    constructor(\r\n        @Inject(TemplateRef)\r\n        @Self()\r\n        readonly template: TemplateRef<T>,\r\n        @Inject(ChangeDetectorRef) private readonly changeDetectorRef: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    check() {\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n}\r\n","import {NgComponentOutlet} from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ComponentRef,\r\n    ContentChild,\r\n    DoCheck,\r\n    Inject,\r\n    Injector,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport {PolymorpheusComponent} from '../classes/component';\r\nimport {PolymorpheusTemplate} from '../directives/template';\r\nimport {PolymorpheusContent} from '../types/content';\r\nimport {PolymorpheusPrimitive} from '../types/primitive';\r\n\r\n/**\r\n * Outlet instantiating {@link PolymorpheusContent} with given context\r\n */\r\n@Component({\r\n    selector: 'polymorpheus-outlet, [polymorpheus-outlet]',\r\n    templateUrl: './outlet.template.html',\r\n    styles: [':host { display: block; }'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PolymorpheusOutletComponent<C extends object> implements DoCheck, OnChanges {\r\n    @Input()\r\n    content: PolymorpheusContent<C> | null = null;\r\n\r\n    @Input()\r\n    context!: C;\r\n\r\n    @ContentChild(TemplateRef)\r\n    readonly template: TemplateRef<C> | null = null;\r\n\r\n    @ViewChild(NgComponentOutlet)\r\n    readonly outlet?: NgComponentOutlet;\r\n\r\n    constructor(@Inject(Injector) readonly injector: Injector) {}\r\n\r\n    get primitive(): PolymorpheusPrimitive {\r\n        if (\r\n            !this.content ||\r\n            this.isComponent(this.content) ||\r\n            this.isTemplate(this.content)\r\n        ) {\r\n            return '';\r\n        }\r\n\r\n        return typeof this.content === 'function'\r\n            ? this.content(this.context)\r\n            : this.content;\r\n    }\r\n\r\n    isDirective(\r\n        content: PolymorpheusContent<C> | null,\r\n    ): content is PolymorpheusTemplate<C> {\r\n        return content instanceof PolymorpheusTemplate;\r\n    }\r\n\r\n    isTemplate(\r\n        content: PolymorpheusContent<C> | null,\r\n    ): content is PolymorpheusTemplate<C> | TemplateRef<C> {\r\n        return this.isDirective(content) || content instanceof TemplateRef;\r\n    }\r\n\r\n    isComponent(\r\n        content: PolymorpheusContent<C> | null,\r\n    ): content is PolymorpheusComponent<object, C> {\r\n        return content instanceof PolymorpheusComponent;\r\n    }\r\n\r\n    getTemplate(\r\n        content:\r\n            | PolymorpheusComponent<object, C>\r\n            | PolymorpheusTemplate<C>\r\n            | TemplateRef<C>,\r\n        componentTmp: TemplateRef<C>,\r\n    ): TemplateRef<C> {\r\n        if (this.isComponent(content)) {\r\n            return componentTmp;\r\n        }\r\n\r\n        return this.isDirective(content) ? content.template : content;\r\n    }\r\n\r\n    ngOnChanges({content, context}: SimpleChanges) {\r\n        // TODO: Keep an eye on private field, name can change\r\n        const componentRef = (!content &&\r\n            context &&\r\n            this.outlet &&\r\n            this.outlet['_componentRef']) as ComponentRef<object> | null | false;\r\n\r\n        if (componentRef) {\r\n            componentRef.injector.get(ChangeDetectorRef).markForCheck();\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if (this.isDirective(this.content)) {\r\n            this.content.check();\r\n        }\r\n    }\r\n}\r\n","import {Directive, EmbeddedViewRef, Inject, ViewContainerRef} from '@angular/core';\r\n\r\n/**\r\n * Helper directive, extracting first {@link EmbeddedViewRef} context if it's present\r\n */\r\n@Directive({\r\n    selector: '[context]',\r\n    exportAs: 'context',\r\n})\r\nexport class ContextDirective<C> {\r\n    constructor(\r\n        @Inject(ViewContainerRef)\r\n        private readonly viewContainerRef: ViewContainerRef,\r\n    ) {}\r\n\r\n    get context(): C | null {\r\n        const viewRef = this.viewContainerRef.get(0) as EmbeddedViewRef<C> | null;\r\n\r\n        return viewRef && viewRef.context;\r\n    }\r\n}\r\n","import {Injector, Pipe, PipeTransform} from '@angular/core';\r\nimport {PolymorpheusComponent} from '../classes/component';\r\n\r\n/**\r\n * Internal use {@link Pipe} to create {@link Injector}\r\n * only when either content or context change\r\n */\r\n@Pipe({\r\n    name: 'injector',\r\n})\r\nexport class InjectorPipe<C extends object> implements PipeTransform {\r\n    transform(\r\n        content: PolymorpheusComponent<object, C>,\r\n        context: C,\r\n        injector: Injector,\r\n    ): Injector {\r\n        return content.createInjector(injector, context);\r\n    }\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {ContextDirective} from './directives/context';\r\nimport {PolymorpheusTemplate} from './directives/template';\r\nimport {PolymorpheusOutletComponent} from './outlet/outlet.component';\r\nimport {InjectorPipe} from './pipes/injector';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [\r\n        PolymorpheusOutletComponent,\r\n        PolymorpheusTemplate,\r\n        ContextDirective,\r\n        InjectorPipe,\r\n    ],\r\n    exports: [PolymorpheusOutletComponent, PolymorpheusTemplate],\r\n})\r\nexport class PolymorpheusModule {}\r\n"]}