/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgComponentOutlet } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Inject, Injector, Input, TemplateRef, ViewChild, } from '@angular/core';
import { PolymorpheusComponent } from '../classes/component';
import { PolymorpheusTemplate } from '../directives/template';
/**
 * Outlet instantiating {\@link PolymorpheusContent} with given context
 * @template C
 */
var PolymorpheusOutletComponent = /** @class */ (function () {
    function PolymorpheusOutletComponent(injector) {
        this.injector = injector;
        this.content = null;
        this.template = null;
    }
    Object.defineProperty(PolymorpheusOutletComponent.prototype, "primitive", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.content ||
                this.isComponent(this.content) ||
                this.isTemplate(this.content)) {
                return '';
            }
            return typeof this.content === 'function'
                ? this.content(this.context)
                : this.content;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} content
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.isDirective = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        return content instanceof PolymorpheusTemplate;
    };
    /**
     * @param {?} content
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.isTemplate = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        return this.isDirective(content) || content instanceof TemplateRef;
    };
    /**
     * @param {?} content
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.isComponent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        return content instanceof PolymorpheusComponent;
    };
    /**
     * @param {?} content
     * @param {?} componentTmp
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.getTemplate = /**
     * @param {?} content
     * @param {?} componentTmp
     * @return {?}
     */
    function (content, componentTmp) {
        if (this.isComponent(content)) {
            return componentTmp;
        }
        return this.isDirective(content) ? content.template : content;
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.ngOnChanges = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var content = _a.content, context = _a.context;
        // TODO: Keep an eye on private field, name can change
        /** @type {?} */
        var componentRef = (/** @type {?} */ ((!content &&
            context &&
            this.outlet &&
            this.outlet['_componentRef'])));
        if (componentRef) {
            componentRef.injector.get(ChangeDetectorRef).markForCheck();
        }
    };
    /**
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.isDirective(this.content)) {
            this.content.check();
        }
    };
    PolymorpheusOutletComponent.decorators = [
        { type: Component, args: [{
                    selector: 'polymorpheus-outlet, [polymorpheus-outlet]',
                    template: "<ng-container\r\n    *ngIf=\"isTemplate(content) || isComponent(content)\"\r\n    #mutableContext=\"context\"\r\n    context\r\n    [ngTemplateOutlet]=\"getTemplate(content, component)\"\r\n    [ngTemplateOutletContext]=\"context\"\r\n>\r\n    <ng-template #component>\r\n        <ng-container\r\n            *ngIf=\"isComponent(content)\"\r\n            [ngComponentOutlet]=\"content.component\"\r\n            [ngComponentOutletInjector]=\"content | injector : mutableContext.context : injector\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n<ng-container *ngIf=\"primitive\">\r\n    <ng-container *ngIf=\"!template; else child\">{{primitive}}</ng-container>\r\n    <ng-template #child>\r\n        <ng-container\r\n            [ngTemplateOutlet]=\"template\"\r\n            [ngTemplateOutletContext]=\"{$implicit: primitive}\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [':host { display: block; }']
                }] }
    ];
    /** @nocollapse */
    PolymorpheusOutletComponent.ctorParameters = function () { return [
        { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] }
    ]; };
    PolymorpheusOutletComponent.propDecorators = {
        content: [{ type: Input }],
        context: [{ type: Input }],
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        outlet: [{ type: ViewChild, args: [NgComponentOutlet,] }]
    };
    return PolymorpheusOutletComponent;
}());
export { PolymorpheusOutletComponent };
if (false) {
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.content;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.context;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.template;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.outlet;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cy8iLCJzb3VyY2VzIjpbIm91dGxldC9vdXRsZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRCxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBRVQsWUFBWSxFQUVaLE1BQU0sRUFDTixRQUFRLEVBQ1IsS0FBSyxFQUdMLFdBQVcsRUFDWCxTQUFTLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDM0QsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7Ozs7O0FBTzVEO0lBbUJJLHFDQUF1QyxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBWHpELFlBQU8sR0FBa0MsSUFBSSxDQUFDO1FBTXJDLGFBQVEsR0FBMEIsSUFBSSxDQUFDO0lBS1ksQ0FBQztJQUU3RCxzQkFBSSxrREFBUzs7OztRQUFiO1lBQ0ksSUFDSSxDQUFDLElBQUksQ0FBQyxPQUFPO2dCQUNiLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQy9CO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2FBQ2I7WUFFRCxPQUFPLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxVQUFVO2dCQUNyQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUM1QixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN2QixDQUFDOzs7T0FBQTs7Ozs7SUFFRCxpREFBVzs7OztJQUFYLFVBQ0ksT0FBc0M7UUFFdEMsT0FBTyxPQUFPLFlBQVksb0JBQW9CLENBQUM7SUFDbkQsQ0FBQzs7Ozs7SUFFRCxnREFBVTs7OztJQUFWLFVBQ0ksT0FBc0M7UUFFdEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sWUFBWSxXQUFXLENBQUM7SUFDdkUsQ0FBQzs7Ozs7SUFFRCxpREFBVzs7OztJQUFYLFVBQ0ksT0FBc0M7UUFFdEMsT0FBTyxPQUFPLFlBQVkscUJBQXFCLENBQUM7SUFDcEQsQ0FBQzs7Ozs7O0lBRUQsaURBQVc7Ozs7O0lBQVgsVUFDSSxPQUdvQixFQUNwQixZQUE0QjtRQUU1QixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsT0FBTyxZQUFZLENBQUM7U0FDdkI7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNsRSxDQUFDOzs7OztJQUVELGlEQUFXOzs7O0lBQVgsVUFBWSxFQUFpQztZQUFoQyxvQkFBTyxFQUFFLG9CQUFPOzs7WUFFbkIsWUFBWSxHQUFHLG1CQUFBLENBQUMsQ0FBQyxPQUFPO1lBQzFCLE9BQU87WUFDUCxJQUFJLENBQUMsTUFBTTtZQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBdUM7UUFFeEUsSUFBSSxZQUFZLEVBQUU7WUFDZCxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQy9EO0lBQ0wsQ0FBQzs7OztJQUVELCtDQUFTOzs7SUFBVDtRQUNJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN4QjtJQUNMLENBQUM7O2dCQW5GSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDRDQUE0QztvQkFDdEQsNDZCQUFxQztvQkFFckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07NkJBRHRDLDJCQUEyQjtpQkFFdkM7Ozs7Z0JBcEJHLFFBQVEsdUJBa0NLLE1BQU0sU0FBQyxRQUFROzs7MEJBWjNCLEtBQUs7MEJBR0wsS0FBSzsyQkFHTCxZQUFZLFNBQUMsV0FBVzt5QkFHeEIsU0FBUyxTQUFDLGlCQUFpQjs7SUFvRWhDLGtDQUFDO0NBQUEsQUFwRkQsSUFvRkM7U0E5RVksMkJBQTJCOzs7SUFDcEMsOENBQzhDOztJQUU5Qyw4Q0FDWTs7SUFFWiwrQ0FDZ0Q7O0lBRWhELDZDQUNvQzs7SUFFeEIsK0NBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ0NvbXBvbmVudE91dGxldH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtcclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBDb21wb25lbnRSZWYsXHJcbiAgICBDb250ZW50Q2hpbGQsXHJcbiAgICBEb0NoZWNrLFxyXG4gICAgSW5qZWN0LFxyXG4gICAgSW5qZWN0b3IsXHJcbiAgICBJbnB1dCxcclxuICAgIE9uQ2hhbmdlcyxcclxuICAgIFNpbXBsZUNoYW5nZXMsXHJcbiAgICBUZW1wbGF0ZVJlZixcclxuICAgIFZpZXdDaGlsZCxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtQb2x5bW9ycGhldXNDb21wb25lbnR9IGZyb20gJy4uL2NsYXNzZXMvY29tcG9uZW50JztcclxuaW1wb3J0IHtQb2x5bW9ycGhldXNUZW1wbGF0ZX0gZnJvbSAnLi4vZGlyZWN0aXZlcy90ZW1wbGF0ZSc7XHJcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnLi4vdHlwZXMvY29udGVudCc7XHJcbmltcG9ydCB7UG9seW1vcnBoZXVzUHJpbWl0aXZlfSBmcm9tICcuLi90eXBlcy9wcmltaXRpdmUnO1xyXG5cclxuLyoqXHJcbiAqIE91dGxldCBpbnN0YW50aWF0aW5nIHtAbGluayBQb2x5bW9ycGhldXNDb250ZW50fSB3aXRoIGdpdmVuIGNvbnRleHRcclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwb2x5bW9ycGhldXMtb3V0bGV0LCBbcG9seW1vcnBoZXVzLW91dGxldF0nLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL291dGxldC50ZW1wbGF0ZS5odG1sJyxcclxuICAgIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGJsb2NrOyB9J10sXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvbHltb3JwaGV1c091dGxldENvbXBvbmVudDxDIGV4dGVuZHMgb2JqZWN0PiBpbXBsZW1lbnRzIERvQ2hlY2ssIE9uQ2hhbmdlcyB7XHJcbiAgICBASW5wdXQoKVxyXG4gICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxDPiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBjb250ZXh0ITogQztcclxuXHJcbiAgICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmKVxyXG4gICAgcmVhZG9ubHkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPEM+IHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgQFZpZXdDaGlsZChOZ0NvbXBvbmVudE91dGxldClcclxuICAgIHJlYWRvbmx5IG91dGxldD86IE5nQ29tcG9uZW50T3V0bGV0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoSW5qZWN0b3IpIHJlYWRvbmx5IGluamVjdG9yOiBJbmplY3Rvcikge31cclxuXHJcbiAgICBnZXQgcHJpbWl0aXZlKCk6IFBvbHltb3JwaGV1c1ByaW1pdGl2ZSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhdGhpcy5jb250ZW50IHx8XHJcbiAgICAgICAgICAgIHRoaXMuaXNDb21wb25lbnQodGhpcy5jb250ZW50KSB8fFxyXG4gICAgICAgICAgICB0aGlzLmlzVGVtcGxhdGUodGhpcy5jb250ZW50KVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuY29udGVudCA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICA/IHRoaXMuY29udGVudCh0aGlzLmNvbnRleHQpXHJcbiAgICAgICAgICAgIDogdGhpcy5jb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGlzRGlyZWN0aXZlKFxyXG4gICAgICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8Qz4gfCBudWxsLFxyXG4gICAgKTogY29udGVudCBpcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxDPiB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQgaW5zdGFuY2VvZiBQb2x5bW9ycGhldXNUZW1wbGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBpc1RlbXBsYXRlKFxyXG4gICAgICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8Qz4gfCBudWxsLFxyXG4gICAgKTogY29udGVudCBpcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxDPiB8IFRlbXBsYXRlUmVmPEM+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0RpcmVjdGl2ZShjb250ZW50KSB8fCBjb250ZW50IGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XHJcbiAgICB9XHJcblxyXG4gICAgaXNDb21wb25lbnQoXHJcbiAgICAgICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxDPiB8IG51bGwsXHJcbiAgICApOiBjb250ZW50IGlzIFBvbHltb3JwaGV1c0NvbXBvbmVudDxvYmplY3QsIEM+IHtcclxuICAgICAgICByZXR1cm4gY29udGVudCBpbnN0YW5jZW9mIFBvbHltb3JwaGV1c0NvbXBvbmVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUZW1wbGF0ZShcclxuICAgICAgICBjb250ZW50OlxyXG4gICAgICAgICAgICB8IFBvbHltb3JwaGV1c0NvbXBvbmVudDxvYmplY3QsIEM+XHJcbiAgICAgICAgICAgIHwgUG9seW1vcnBoZXVzVGVtcGxhdGU8Qz5cclxuICAgICAgICAgICAgfCBUZW1wbGF0ZVJlZjxDPixcclxuICAgICAgICBjb21wb25lbnRUbXA6IFRlbXBsYXRlUmVmPEM+LFxyXG4gICAgKTogVGVtcGxhdGVSZWY8Qz4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ29tcG9uZW50KGNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRUbXA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5pc0RpcmVjdGl2ZShjb250ZW50KSA/IGNvbnRlbnQudGVtcGxhdGUgOiBjb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKHtjb250ZW50LCBjb250ZXh0fTogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgICAgIC8vIFRPRE86IEtlZXAgYW4gZXllIG9uIHByaXZhdGUgZmllbGQsIG5hbWUgY2FuIGNoYW5nZVxyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9ICghY29udGVudCAmJlxyXG4gICAgICAgICAgICBjb250ZXh0ICYmXHJcbiAgICAgICAgICAgIHRoaXMub3V0bGV0ICYmXHJcbiAgICAgICAgICAgIHRoaXMub3V0bGV0WydfY29tcG9uZW50UmVmJ10pIGFzIENvbXBvbmVudFJlZjxvYmplY3Q+IHwgbnVsbCB8IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoY29tcG9uZW50UmVmKSB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudFJlZi5pbmplY3Rvci5nZXQoQ2hhbmdlRGV0ZWN0b3JSZWYpLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ0RvQ2hlY2soKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEaXJlY3RpdmUodGhpcy5jb250ZW50KSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuY2hlY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19