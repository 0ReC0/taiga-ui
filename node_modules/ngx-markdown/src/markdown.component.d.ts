import { AfterViewInit, ElementRef, EventEmitter, OnChanges } from '@angular/core';
import { KatexOptions } from './katex-options';
import { MarkdownService } from './markdown.service';
import * as ɵngcc0 from '@angular/core';
export declare class MarkdownComponent implements OnChanges, AfterViewInit {
    element: ElementRef<HTMLElement>;
    markdownService: MarkdownService;
    data: string;
    src: string;
    katex: boolean;
    katexOptions: KatexOptions;
    lineNumbers: boolean;
    start: number;
    lineHighlight: boolean;
    line: string | string[];
    lineOffset: number;
    error: EventEmitter<string>;
    load: EventEmitter<string>;
    ready: EventEmitter<void>;
    private _katex;
    private _lineHighlight;
    private _lineNumbers;
    constructor(element: ElementRef<HTMLElement>, markdownService: MarkdownService);
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    render(markdown: string, decodeHtml?: boolean): void;
    private coerceBooleanProperty;
    private handleData;
    private handleSrc;
    private handleTransclusion;
    private handlePlugins;
    private setPluginClass;
    private setPluginOptions;
    private toLispCase;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkdownComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MarkdownComponent, "markdown, [markdown]", never, { "katex": "katex"; "lineNumbers": "lineNumbers"; "lineHighlight": "lineHighlight"; "data": "data"; "src": "src"; "katexOptions": "katexOptions"; "start": "start"; "line": "line"; "lineOffset": "lineOffset"; }, { "error": "error"; "load": "load"; "ready": "ready"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm1hcmtkb3duLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgS2F0ZXhPcHRpb25zIH0gZnJvbSAnLi9rYXRleC1vcHRpb25zJztcclxuaW1wb3J0IHsgTWFya2Rvd25TZXJ2aWNlIH0gZnJvbSAnLi9tYXJrZG93bi5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWFya2Rvd25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xyXG4gICAgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XHJcbiAgICBtYXJrZG93blNlcnZpY2U6IE1hcmtkb3duU2VydmljZTtcclxuICAgIGRhdGE6IHN0cmluZztcclxuICAgIHNyYzogc3RyaW5nO1xyXG4gICAga2F0ZXg6IGJvb2xlYW47XHJcbiAgICBrYXRleE9wdGlvbnM6IEthdGV4T3B0aW9ucztcclxuICAgIGxpbmVOdW1iZXJzOiBib29sZWFuO1xyXG4gICAgc3RhcnQ6IG51bWJlcjtcclxuICAgIGxpbmVIaWdobGlnaHQ6IGJvb2xlYW47XHJcbiAgICBsaW5lOiBzdHJpbmcgfCBzdHJpbmdbXTtcclxuICAgIGxpbmVPZmZzZXQ6IG51bWJlcjtcclxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIGxvYWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgcmVhZHk6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIHByaXZhdGUgX2thdGV4O1xyXG4gICAgcHJpdmF0ZSBfbGluZUhpZ2hsaWdodDtcclxuICAgIHByaXZhdGUgX2xpbmVOdW1iZXJzO1xyXG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIG1hcmtkb3duU2VydmljZTogTWFya2Rvd25TZXJ2aWNlKTtcclxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIHJlbmRlcihtYXJrZG93bjogc3RyaW5nLCBkZWNvZGVIdG1sPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eTtcclxuICAgIHByaXZhdGUgaGFuZGxlRGF0YTtcclxuICAgIHByaXZhdGUgaGFuZGxlU3JjO1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVUcmFuc2NsdXNpb247XHJcbiAgICBwcml2YXRlIGhhbmRsZVBsdWdpbnM7XHJcbiAgICBwcml2YXRlIHNldFBsdWdpbkNsYXNzO1xyXG4gICAgcHJpdmF0ZSBzZXRQbHVnaW5PcHRpb25zO1xyXG4gICAgcHJpdmF0ZSB0b0xpc3BDYXNlO1xyXG59XHJcbiJdfQ==