import { HttpClient } from '@angular/common/http';
import { DomSanitizer } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { KatexOptions } from './katex-options';
import { MarkedOptions } from './marked-options';
import { MarkedRenderer } from './marked-renderer';
import * as ɵngcc0 from '@angular/core';
export declare const errorKatexNotLoaded = "[ngx-markdown When using the [katex] attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information";
export declare const errorSrcWithoutHttpClient = "[ngx-markdown] When using the [src] attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information";
export declare class MarkdownService {
    private platform;
    private http;
    private domSanitizer;
    private _options;
    options: MarkedOptions;
    renderer: MarkedRenderer;
    constructor(platform: Object, http: HttpClient, domSanitizer: DomSanitizer, options: MarkedOptions);
    compile(markdown: string, decodeHtml?: boolean, markedOptions?: MarkedOptions): string;
    getSource(src: string): Observable<string>;
    highlight(element?: Element | Document): void;
    renderKatex(html: string, options?: KatexOptions): string;
    private decodeHtml;
    private handleExtension;
    private trimIndentation;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkdownService, [null, { optional: true; }, null, null]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MarkdownService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24uc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJtYXJrZG93bi5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgS2F0ZXhPcHRpb25zIH0gZnJvbSAnLi9rYXRleC1vcHRpb25zJztcclxuaW1wb3J0IHsgTWFya2VkT3B0aW9ucyB9IGZyb20gJy4vbWFya2VkLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBNYXJrZWRSZW5kZXJlciB9IGZyb20gJy4vbWFya2VkLXJlbmRlcmVyJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZXJyb3JLYXRleE5vdExvYWRlZCA9IFwiW25neC1tYXJrZG93biBXaGVuIHVzaW5nIHRoZSBba2F0ZXhdIGF0dHJpYnV0ZSB5b3UgKmhhdmUgdG8qIGluY2x1ZGUgS2FUZVggZmlsZXMgdG8gYGFuZ3VsYXIuanNvbmAgb3IgdXNlIGltcG9ydHMuIFNlZSBSRUFETUUgZm9yIG1vcmUgaW5mb3JtYXRpb25cIjtcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZXJyb3JTcmNXaXRob3V0SHR0cENsaWVudCA9IFwiW25neC1tYXJrZG93bl0gV2hlbiB1c2luZyB0aGUgW3NyY10gYXR0cmlidXRlIHlvdSAqaGF2ZSB0byogcGFzcyB0aGUgYEh0dHBDbGllbnRgIGFzIGEgcGFyYW1ldGVyIG9mIHRoZSBgZm9yUm9vdGAgbWV0aG9kLiBTZWUgUkVBRE1FIGZvciBtb3JlIGluZm9ybWF0aW9uXCI7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hcmtkb3duU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHBsYXRmb3JtO1xyXG4gICAgcHJpdmF0ZSBodHRwO1xyXG4gICAgcHJpdmF0ZSBkb21TYW5pdGl6ZXI7XHJcbiAgICBwcml2YXRlIF9vcHRpb25zO1xyXG4gICAgb3B0aW9uczogTWFya2VkT3B0aW9ucztcclxuICAgIHJlbmRlcmVyOiBNYXJrZWRSZW5kZXJlcjtcclxuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtOiBPYmplY3QsIGh0dHA6IEh0dHBDbGllbnQsIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBvcHRpb25zOiBNYXJrZWRPcHRpb25zKTtcclxuICAgIGNvbXBpbGUobWFya2Rvd246IHN0cmluZywgZGVjb2RlSHRtbD86IGJvb2xlYW4sIG1hcmtlZE9wdGlvbnM/OiBNYXJrZWRPcHRpb25zKTogc3RyaW5nO1xyXG4gICAgZ2V0U291cmNlKHNyYzogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgaGlnaGxpZ2h0KGVsZW1lbnQ/OiBFbGVtZW50IHwgRG9jdW1lbnQpOiB2b2lkO1xyXG4gICAgcmVuZGVyS2F0ZXgoaHRtbDogc3RyaW5nLCBvcHRpb25zPzogS2F0ZXhPcHRpb25zKTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBkZWNvZGVIdG1sO1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVFeHRlbnNpb247XHJcbiAgICBwcml2YXRlIHRyaW1JbmRlbnRhdGlvbjtcclxufVxyXG4iXX0=