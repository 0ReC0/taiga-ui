/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NodeContext, PrebootAppData, PrebootData, PrebootEvent, PrebootWindow } from '../common/preboot.interfaces';
import * as ɵngcc0 from '@angular/core';
export declare function _window(): PrebootWindow;
export declare class EventReplayer {
    clientNodeCache: {
        [key: string]: Element;
    };
    replayStarted: boolean;
    win: PrebootWindow;
    /**
     * Window setting and getter to facilitate testing of window
     * in non-browser environments
     */
    setWindow(win: PrebootWindow): void;
    /**
     * Window setting and getter to facilitate testing of window
     * in non-browser environments
     */
    getWindow(): PrebootWindow;
    /**
     * Replay all events for all apps. this can only be run once.
     * if called multiple times, will only do something once
     */
    replayAll(): void;
    /**
     * Replay all events for one app (most of the time there is just one app)
     * @param appData
     */
    replayForApp(appData: PrebootAppData): void;
    /**
     * Replay one particular event
     * @param appData
     * @param prebootEvent
     */
    replayEvent(appData: PrebootAppData, prebootEvent: PrebootEvent): void;
    /**
     * Switch the buffer for one particular app (i.e. display the client
     * view and destroy the server view)
     * @param appData
     */
    switchBuffer(appData: PrebootAppData): void;
    /**
     * Finally, set focus, remove all the event listeners and remove
     * any freeze screen that may be there
     * @param prebootData
     */
    cleanup(prebootData: PrebootData): void;
    setFocus(activeNode: NodeContext): void;
    /**
     * Given a node from the server rendered view, find the equivalent
     * node in the client rendered view. We do this by the following approach:
     *      1. take the name of the server node tag (ex. div or h1 or input)
     *      2. add either id (ex. div#myid) or class names (ex. div.class1.class2)
     *      3. use that value as a selector to get all the matching client nodes
     *      4. loop through all client nodes found and for each generate a key value
     *      5. compare the client key to the server key; once there is a match,
     *          we have our client node
     *
     * NOTE: this only works when the client view is almost exactly the same as
     * the server view. we will need an improvement here in the future to account
     * for situations where the client view is different in structure from the
     * server view
     */
    findClientNode(serverNodeContext: NodeContext): HTMLElement | null;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EventReplayer, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<EventReplayer>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQucmVwbGF5ZXIuZC50cyIsInNvdXJjZXMiOlsiZXZlbnQucmVwbGF5ZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBOb2RlQ29udGV4dCwgUHJlYm9vdEFwcERhdGEsIFByZWJvb3REYXRhLCBQcmVib290RXZlbnQsIFByZWJvb3RXaW5kb3cgfSBmcm9tICcuLi9jb21tb24vcHJlYm9vdC5pbnRlcmZhY2VzJztcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIF93aW5kb3coKTogUHJlYm9vdFdpbmRvdztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEV2ZW50UmVwbGF5ZXIge1xuICAgIGNsaWVudE5vZGVDYWNoZToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBFbGVtZW50O1xuICAgIH07XG4gICAgcmVwbGF5U3RhcnRlZDogYm9vbGVhbjtcbiAgICB3aW46IFByZWJvb3RXaW5kb3c7XG4gICAgLyoqXG4gICAgICogV2luZG93IHNldHRpbmcgYW5kIGdldHRlciB0byBmYWNpbGl0YXRlIHRlc3Rpbmcgb2Ygd2luZG93XG4gICAgICogaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzXG4gICAgICovXG4gICAgc2V0V2luZG93KHdpbjogUHJlYm9vdFdpbmRvdyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogV2luZG93IHNldHRpbmcgYW5kIGdldHRlciB0byBmYWNpbGl0YXRlIHRlc3Rpbmcgb2Ygd2luZG93XG4gICAgICogaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzXG4gICAgICovXG4gICAgZ2V0V2luZG93KCk6IFByZWJvb3RXaW5kb3c7XG4gICAgLyoqXG4gICAgICogUmVwbGF5IGFsbCBldmVudHMgZm9yIGFsbCBhcHBzLiB0aGlzIGNhbiBvbmx5IGJlIHJ1biBvbmNlLlxuICAgICAqIGlmIGNhbGxlZCBtdWx0aXBsZSB0aW1lcywgd2lsbCBvbmx5IGRvIHNvbWV0aGluZyBvbmNlXG4gICAgICovXG4gICAgcmVwbGF5QWxsKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVwbGF5IGFsbCBldmVudHMgZm9yIG9uZSBhcHAgKG1vc3Qgb2YgdGhlIHRpbWUgdGhlcmUgaXMganVzdCBvbmUgYXBwKVxuICAgICAqIEBwYXJhbSBhcHBEYXRhXG4gICAgICovXG4gICAgcmVwbGF5Rm9yQXBwKGFwcERhdGE6IFByZWJvb3RBcHBEYXRhKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXBsYXkgb25lIHBhcnRpY3VsYXIgZXZlbnRcbiAgICAgKiBAcGFyYW0gYXBwRGF0YVxuICAgICAqIEBwYXJhbSBwcmVib290RXZlbnRcbiAgICAgKi9cbiAgICByZXBsYXlFdmVudChhcHBEYXRhOiBQcmVib290QXBwRGF0YSwgcHJlYm9vdEV2ZW50OiBQcmVib290RXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFN3aXRjaCB0aGUgYnVmZmVyIGZvciBvbmUgcGFydGljdWxhciBhcHAgKGkuZS4gZGlzcGxheSB0aGUgY2xpZW50XG4gICAgICogdmlldyBhbmQgZGVzdHJveSB0aGUgc2VydmVyIHZpZXcpXG4gICAgICogQHBhcmFtIGFwcERhdGFcbiAgICAgKi9cbiAgICBzd2l0Y2hCdWZmZXIoYXBwRGF0YTogUHJlYm9vdEFwcERhdGEpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEZpbmFsbHksIHNldCBmb2N1cywgcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIGFuZCByZW1vdmVcbiAgICAgKiBhbnkgZnJlZXplIHNjcmVlbiB0aGF0IG1heSBiZSB0aGVyZVxuICAgICAqIEBwYXJhbSBwcmVib290RGF0YVxuICAgICAqL1xuICAgIGNsZWFudXAocHJlYm9vdERhdGE6IFByZWJvb3REYXRhKTogdm9pZDtcbiAgICBzZXRGb2N1cyhhY3RpdmVOb2RlOiBOb2RlQ29udGV4dCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBub2RlIGZyb20gdGhlIHNlcnZlciByZW5kZXJlZCB2aWV3LCBmaW5kIHRoZSBlcXVpdmFsZW50XG4gICAgICogbm9kZSBpbiB0aGUgY2xpZW50IHJlbmRlcmVkIHZpZXcuIFdlIGRvIHRoaXMgYnkgdGhlIGZvbGxvd2luZyBhcHByb2FjaDpcbiAgICAgKiAgICAgIDEuIHRha2UgdGhlIG5hbWUgb2YgdGhlIHNlcnZlciBub2RlIHRhZyAoZXguIGRpdiBvciBoMSBvciBpbnB1dClcbiAgICAgKiAgICAgIDIuIGFkZCBlaXRoZXIgaWQgKGV4LiBkaXYjbXlpZCkgb3IgY2xhc3MgbmFtZXMgKGV4LiBkaXYuY2xhc3MxLmNsYXNzMilcbiAgICAgKiAgICAgIDMuIHVzZSB0aGF0IHZhbHVlIGFzIGEgc2VsZWN0b3IgdG8gZ2V0IGFsbCB0aGUgbWF0Y2hpbmcgY2xpZW50IG5vZGVzXG4gICAgICogICAgICA0LiBsb29wIHRocm91Z2ggYWxsIGNsaWVudCBub2RlcyBmb3VuZCBhbmQgZm9yIGVhY2ggZ2VuZXJhdGUgYSBrZXkgdmFsdWVcbiAgICAgKiAgICAgIDUuIGNvbXBhcmUgdGhlIGNsaWVudCBrZXkgdG8gdGhlIHNlcnZlciBrZXk7IG9uY2UgdGhlcmUgaXMgYSBtYXRjaCxcbiAgICAgKiAgICAgICAgICB3ZSBoYXZlIG91ciBjbGllbnQgbm9kZVxuICAgICAqXG4gICAgICogTk9URTogdGhpcyBvbmx5IHdvcmtzIHdoZW4gdGhlIGNsaWVudCB2aWV3IGlzIGFsbW9zdCBleGFjdGx5IHRoZSBzYW1lIGFzXG4gICAgICogdGhlIHNlcnZlciB2aWV3LiB3ZSB3aWxsIG5lZWQgYW4gaW1wcm92ZW1lbnQgaGVyZSBpbiB0aGUgZnV0dXJlIHRvIGFjY291bnRcbiAgICAgKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB0aGUgY2xpZW50IHZpZXcgaXMgZGlmZmVyZW50IGluIHN0cnVjdHVyZSBmcm9tIHRoZVxuICAgICAqIHNlcnZlciB2aWV3XG4gICAgICovXG4gICAgZmluZENsaWVudE5vZGUoc2VydmVyTm9kZUNvbnRleHQ6IE5vZGVDb250ZXh0KTogSFRNTEVsZW1lbnQgfCBudWxsO1xufVxuIl19