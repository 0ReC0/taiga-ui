{"version":3,"sources":["./src/modules/markup/icons/customization/customization-icons.component.ts","./src/modules/markup/icons/customization/customization-icons.template.html","./src/modules/markup/icons/icons-group/icons-group.component.ts","./src/modules/markup/icons/icons-group/icons-group.template.html","./src/modules/markup/icons/icons-group/icons-group.directive.ts","./src/modules/markup/icons/icons-group/icons-group.module.ts","./src/modules/markup/icons/icons.component.ts","./src/modules/markup/icons/icons.template.html","./src/modules/markup/icons/icons.module.ts","./src/modules/markup/icons/icons.tokens.ts"],"names":[],"mappings":"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","file":"markup-icons-icons-module.js","sourcesContent":["import {Component} from '@angular/core';\nimport {TUI_SVG_SRC_PROCESSOR} from '@taiga-ui/core';\n\nexport function icons8SourceProcessor(): (src: string) => string {\n    return (src: string) => {\n        const myCustomPrefix = `icons8::`;\n\n        return src.startsWith(myCustomPrefix)\n            ? `assets/icons8/${src.replace(myCustomPrefix, ``)}.svg`\n            : src;\n    };\n}\n\n@Component({\n    selector: `customization-icons-example`,\n    templateUrl: `./customization-icons.template.html`,\n    styleUrls: [`./customization-icons.style.less`],\n    providers: [\n        {\n            provide: TUI_SVG_SRC_PROCESSOR,\n            useFactory: icons8SourceProcessor,\n        },\n    ],\n})\nexport class IconsCustomizationComponent {}\n","<div class=\"icons8\">\n    <p class=\"icons8-label icons8-label-violet\">Violet color</p>\n\n    <tui-svg\n        src=\"icons8::android\"\n        class=\"icons8-icon icons8-violet\"\n    ></tui-svg>\n\n    <tui-svg\n        src=\"icons8::ios\"\n        class=\"icons8-icon icons8-violet\"\n    ></tui-svg>\n</div>\n\n<div class=\"icons8\">\n    <p class=\"icons8-label icons8-label-blue\">Blue color</p>\n\n    <tui-svg\n        src=\"icons8::android\"\n        class=\"icons8-icon icons8-blue\"\n    ></tui-svg>\n\n    <tui-svg\n        src=\"icons8::ios\"\n        class=\"icons8-icon icons8-blue\"\n    ></tui-svg>\n</div>\n","import {Clipboard} from '@angular/cdk/clipboard';\nimport {Component, ContentChild, Inject, Input} from '@angular/core';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {TUI_DEFAULT_MATCHER, tuiDefaultProp} from '@taiga-ui/cdk';\nimport {TuiAlertService, TuiNotification} from '@taiga-ui/core';\n\nimport {IconsGroupDirective} from './icons-group.directive';\n\n@Component({\n    selector: `icons-group`,\n    templateUrl: `./icons-group.template.html`,\n    styleUrls: [`./icons-group.style.less`],\n    changeDetection,\n})\nexport class IconsGroupComponent {\n    @ContentChild(IconsGroupDirective)\n    readonly iconGroup?: IconsGroupDirective;\n\n    @Input()\n    @tuiDefaultProp()\n    icons: Record<string, readonly string[]> = {};\n\n    matcher = TUI_DEFAULT_MATCHER;\n    search = ``;\n\n    constructor(\n        @Inject(Clipboard) private readonly clipboard: Clipboard,\n        @Inject(TuiAlertService) private readonly alertService: TuiAlertService,\n    ) {}\n\n    copyPath = (name: string): void => {\n        this.clipboard.copy(name);\n        this.alertService\n            .open(`The name ${name} copied`, {status: TuiNotification.Success})\n            .subscribe();\n    };\n}\n","<h2\n    i18n\n    class=\"title\"\n>\n    Search by name\n</h2>\n<tui-input\n    i18n\n    tuiHintContent=\"You can copy icon's name with a click\"\n    tuiTextfieldSize=\"m\"\n    [tuiTextfieldLabelOutside]=\"true\"\n    [(ngModel)]=\"search\"\n>\n    Input icon name to highlight\n</tui-input>\n\n<ng-container *tuiForAsync=\"let key of icons | tuiKeys\">\n    <ng-container *ngIf=\"icons[key] | tuiFilter: matcher:search as filtered\">\n        <div class=\"header-group\">\n            <h2\n                i18n\n                class=\"title\"\n            >\n                {{ key }}\n            </h2>\n\n            <tui-badge\n                size=\"m\"\n                class=\"badge\"\n                [hoverable]=\"true\"\n                [value]=\"filtered.length.toString()\"\n                [status]=\"filtered.length ? 'success' : 'error'\"\n            ></tui-badge>\n        </div>\n        <p *ngIf=\"!filtered.length\">Nothing found</p>\n\n        <div class=\"icons\">\n            <ng-container\n                *tuiForAsync=\"let icon of filtered\"\n                [ngTemplateOutlet]=\"iconGroup?.template || null\"\n                [ngTemplateOutletContext]=\"{icon: icon, group: key, copyPath: copyPath}\"\n            ></ng-container>\n        </div>\n    </ng-container>\n</ng-container>\n","import {Directive, Inject, Input, TemplateRef} from '@angular/core';\nimport {tuiDefaultProp} from '@taiga-ui/cdk';\n\n@Directive({\n    selector: `[iconGroup]`,\n})\nexport class IconsGroupDirective {\n    @Input()\n    @tuiDefaultProp()\n    iconGroup?: string | '';\n\n    constructor(@Inject(TemplateRef) readonly template: TemplateRef<unknown>) {}\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {TuiFilterPipeModule, TuiForAsyncModule, TuiKeysPipeModule} from '@taiga-ui/cdk';\nimport {TuiHintControllerModule, TuiTextfieldControllerModule} from '@taiga-ui/core';\nimport {TuiBadgeModule, TuiInputModule} from '@taiga-ui/kit';\n\nimport {IconsGroupComponent} from './icons-group.component';\nimport {IconsGroupDirective} from './icons-group.directive';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        CommonModule,\n        TuiInputModule,\n        TuiBadgeModule,\n        TuiForAsyncModule,\n        TuiKeysPipeModule,\n        TuiFilterPipeModule,\n        TuiHintControllerModule,\n        TuiTextfieldControllerModule,\n    ],\n    declarations: [IconsGroupComponent, IconsGroupDirective],\n    exports: [IconsGroupComponent, IconsGroupDirective],\n})\nexport class IconsGroupModule {}\n","import {Component, Inject} from '@angular/core';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {TuiDocExample} from '@taiga-ui/addon-doc';\n\nimport {DemoTuiIconsTabs, TUI_DEMO_ICONS} from './icons.tokens';\n\n@Component({\n    selector: `icons`,\n    templateUrl: `./icons.template.html`,\n    styleUrls: [`./icons.style.less`],\n    changeDetection,\n})\nexport class IconsComponent {\n    readonly keys = Object.keys(this.icons);\n\n    readonly example1: TuiDocExample = {\n        TypeScript: import(\n            `!!raw-loader!./customization/customization-icons.component.ts`\n        ),\n        HTML: import(`!!raw-loader!./customization/customization-icons.template.html`),\n        LESS: import(`!!raw-loader!./customization/customization-icons.style.less`),\n    };\n\n    constructor(@Inject(TUI_DEMO_ICONS) readonly icons: DemoTuiIconsTabs) {}\n}\n","<tui-doc-page\n    i18n-header\n    header=\"Icons\"\n>\n    <ng-template\n        *ngFor=\"let key of keys\"\n        i18n-pageTab\n        [pageTab]=\"key\"\n    >\n        <p i18n>\n            These icons can be used by name in\n            <a\n                tuiLink\n                routerLink=\"/components/svg\"\n            >\n                Svg\n            </a>\n            component and all Taiga UI component accepting icons as input.\n        </p>\n\n        <icons-group [icons]=\"icons[key]\">\n            <ng-template\n                iconGroup\n                let-icon=\"icon\"\n                let-copyPath=\"copyPath\"\n            >\n                <button\n                    tuiIconButton\n                    type=\"button\"\n                    size=\"m\"\n                    i18n-title\n                    title=\"Copy\"\n                    appearance=\"icon\"\n                    class=\"icon\"\n                    [attr.aria-label]=\"icon\"\n                    [icon]=\"icon\"\n                    (click)=\"copyPath(icon)\"\n                ></button>\n            </ng-template>\n        </icons-group>\n    </ng-template>\n\n    <ng-template pageTab=\"SVG Processing\">\n        <tui-doc-example\n            id=\"base\"\n            i18n-heading\n            heading=\"Customization\"\n            description=\"You can customize the path to your icons and inherit color\"\n            [content]=\"example1\"\n        >\n            <customization-icons-example></customization-icons-example>\n        </tui-doc-example>\n    </ng-template>\n</tui-doc-page>\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {TuiAddonDocModule, tuiGenerateRoutes} from '@taiga-ui/addon-doc';\nimport {TuiButtonModule, TuiLinkModule, TuiSvgModule} from '@taiga-ui/core';\n\nimport {IconsCustomizationComponent} from './customization/customization-icons.component';\nimport {IconsComponent} from './icons.component';\nimport {IconsGroupModule} from './icons-group/icons-group.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TuiLinkModule,\n        TuiSvgModule,\n        TuiButtonModule,\n        TuiAddonDocModule,\n        IconsGroupModule,\n        RouterModule.forChild(tuiGenerateRoutes(IconsComponent)),\n    ],\n    declarations: [IconsComponent, IconsCustomizationComponent],\n    exports: [IconsComponent],\n})\nexport class IconsModule {}\n","import {InjectionToken} from '@angular/core';\nimport * as allIcons from '@taiga-ui/icons';\n\nexport type DemoTuiIcon = keyof typeof import('@taiga-ui/icons');\n\nexport type DemoTuiIconsList = ReadonlyArray<string | DemoTuiIcon>;\n\nexport type DemoTuiIconsTabs = Record<string, Record<string, DemoTuiIconsList>>;\n\nexport const COMMERCE: DemoTuiIcon[] = [\n    `tuiIconElectron`,\n    `tuiIconMaestro`,\n    `tuiIconMastercard`,\n    `tuiIconMir`,\n    `tuiIconVisa`,\n];\n\nconst {LARGE, NORMAL} = ensureIcons();\n\nexport const ICONS: DemoTuiIconsTabs = {\n    'Description and examples': {\n        [`Normal interface icons / 16px`]: NORMAL,\n        [`Large interface icons / 24px`]: LARGE,\n        [`Payment systems`]: COMMERCE,\n    },\n};\n\nexport const TUI_DEMO_ICONS: InjectionToken<DemoTuiIconsTabs> =\n    new InjectionToken<DemoTuiIconsTabs>(`Icons`, {factory: () => ICONS});\n\n/**\n * @description:\n * Algorithm: O(n), where `n` - count of icons\n */\nfunction ensureIcons(): {LARGE: DemoTuiIcon[]; NORMAL: DemoTuiIcon[]} {\n    const large: DemoTuiIcon[] = [];\n    const normal: DemoTuiIcon[] = [];\n    const commerceSet = new Set(COMMERCE);\n\n    for (const icon in allIcons) {\n        const shouldSkip =\n            commerceSet.has(icon as DemoTuiIcon) ||\n            icon === `tuiCoreIcons` ||\n            icon === `tuiKitIcons`;\n\n        if (shouldSkip) {\n            continue;\n        }\n\n        if (icon.includes(`Large`)) {\n            large.push(icon as DemoTuiIcon);\n        } else {\n            normal.push(icon as DemoTuiIcon);\n        }\n    }\n\n    return {LARGE: large, NORMAL: normal};\n}\n"],"sourceRoot":"webpack:///"}