(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[98695],{98695:n=>{n.exports="import {Component} from '@angular/core';\nimport {\n    AbstractControl,\n    UntypedFormControl,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {distinctUntilChanged} from 'rxjs/operators';\n\nconst latinChars = /^[a-zA-Z]+$/;\n\nexport function passwordValidator(field: AbstractControl): Validators | null {\n    return field.value && latinChars.test(field.value)\n        ? null\n        : {\n              other: 'Only latin letters are allowed',\n          };\n}\n\nexport function superComputerValidator(field: AbstractControl): Validators | null {\n    return field.value === '42'\n        ? null\n        : {\n              other: 'Wrong',\n          };\n}\n\n@Component({\n    selector: 'tui-field-error-pipe-example-1',\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport class TuiFieldErrorPipeExample1 {\n    readonly testValue1 = new UntypedFormControl('', [\n        Validators.required,\n        passwordValidator,\n    ]);\n\n    readonly testValue3 = new UntypedFormControl('', [\n        Validators.required,\n        passwordValidator,\n    ]);\n\n    readonly testForm = new UntypedFormGroup(\n        {\n            testValue1: this.testValue1,\n            testValue2: new UntypedFormControl('', [\n                Validators.required,\n                superComputerValidator,\n            ]),\n        },\n        control =>\n            Object.values((control as UntypedFormGroup).controls).every(\n                ({valid}) => valid,\n            )\n                ? null\n                : {other: 'Form is invalid'},\n    );\n\n    constructor() {\n        this.testValue1.valueChanges.pipe(distinctUntilChanged()).subscribe(() => {\n            this.testValue1.markAsTouched();\n        });\n    }\n}\n"}}]);