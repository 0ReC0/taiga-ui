{"version":3,"sources":["webpack:///./src/modules/components/combo-box/examples/2/request.service.ts?cd45"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,wEAAS,mBAAmB,sBAAsB,UAAU,uCAAuC,sBAAsB,UAAU,wBAAwB,aAAa,UAAU,4GAA4G,uBAAuB,YAAY,iBAAiB,6BAA6B,UAAU,KAAK,eAAe,6DAA6D,wDAAwD,ubAAub,8BAA8B,UAAU,8FAA8F,2EAA2E,0CAA0C,kCAAkC,OAAO,GAAG,GAAG,E","file":"!!raw-loader!-examples-2-request-service.js","sourcesContent":["export default \"import {Inject, Injectable} from '@angular/core';\\nimport {TUI_DEFAULT_MATCHER, TuiDestroyService} from '@taiga-ui/cdk';\\nimport {Observable, of, Subject} from 'rxjs';\\nimport {\\n    delay,\\n    distinctUntilChanged,\\n    shareReplay,\\n    startWith,\\n    switchMap,\\n    takeUntil,\\n} from 'rxjs/operators';\\n\\nimport {databaseMockData} from './database-mock-data';\\nimport {User} from './user';\\n\\n// @dynamic\\n@Injectable()\\nexport class RequestService {\\n    private readonly request$ = new Subject<string>();\\n\\n    // Imitating server request with switchMap + delay pair\\n    private readonly response$ = this.request$.pipe(\\n        distinctUntilChanged(),\\n        switchMap(query =>\\n            of(databaseMockData.filter(user => TUI_DEFAULT_MATCHER(user, query))).pipe(\\n                delay(Math.random() * 1000 + 500),\\n                startWith(null),\\n            ),\\n        ),\\n        takeUntil(this.destroy$),\\n        shareReplay({bufferSize: 1, refCount: true}),\\n    );\\n\\n    constructor(@Inject(TuiDestroyService) private readonly destroy$: Observable<void>) {}\\n\\n    request(query: string | null): Observable<readonly User[] | null> {\\n        this.request$.next(query || ``);\\n\\n        return this.response$;\\n    }\\n}\\n\";"],"sourceRoot":"webpack:///"}