{"version":3,"sources":["webpack:///./src/modules/components/input-inline/examples/1/component.ts?bf4c","webpack:///./src/modules/components/scrollbar/examples/1/component.ts?c6f1","webpack:///./src/modules/pipes/filter/examples/1/component.ts?cf37","webpack:///./src/modules/pipes/mapper/examples/1/component.ts?c912","webpack:///./src/modules/services/destroy/examples/1/component.ts?4e1b"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,wEAAS,UAAU,sBAAsB,UAAU,uBAAuB,uBAAuB,UAAU,gBAAgB,uCAAuC,UAAU,cAAc,oCAAoC,gBAAgB,iKAAiK,wCAAwC,gCAAgC,oMAAoM,EAAE,qCAAqC,+EAA+E,OAAO,oCAAoC,+DAA+D,OAAO,+BAA+B,uCAAuC,qCAAqC,WAAW,OAAO,sCAAsC,WAAW,OAAO,GAAG,GAAG,E;;;;;;;;;;;;ACA5kC;AAAe,wEAAS,UAAU,sBAAsB,UAAU,gBAAgB,uCAAuC,UAAU,cAAc,oCAAoC,gBAAgB,8JAA8J,gDAAgD,GAAG,E;;;;;;;;;;;;ACAtZ;AAAe,wEAAS,UAAU,sBAAsB,UAAU,gBAAgB,uCAAuC,UAAU,cAAc,oCAAoC,2BAA2B,4BAA4B,6BAA6B,GAAG,gBAAgB,wHAAwH,mCAAmC,oDAAoD,iEAAiE,YAAY,8DAA8D,YAAY,gEAAgE,SAAS,wFAAwF,GAAG,GAAG,E;;;;;;;;;;;;ACAzyB;AAAe,wEAAS,UAAU,sBAAsB,UAAU,gBAAgB,uCAAuC,UAAU,cAAc,oCAAoC,gBAAgB,wHAAwH,mCAAmC,+FAA+F,OAAO,GAAG,eAAe,EAAE,GAAG,GAAG,E;;;;;;;;;;;;ACAhe;AAAe,wEAAS,sBAAsB,sBAAsB,UAAU,gBAAgB,uCAAuC,UAAU,cAAc,oCAAoC,UAAU,kBAAkB,sBAAsB,UAAU,UAAU,aAAa,UAAU,UAAU,uBAAuB,gBAAgB,6JAA6J,mCAAmC,gDAAgD,cAAc,4BAA4B,yIAAyI,OAAO,GAAG,GAAG,E","file":"!!raw-loader!-examples-1-component-ts.js","sourcesContent":["export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-input-inline-example-1`,\\n    templateUrl: `./template.html`,\\n    styleUrls: [`./style.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputInlineExample1 {\\n    testForm = new FormGroup({\\n        testValue1: new FormControl(`Hello 1`),\\n        testValue2: new FormControl(`Hello 2`),\\n        testValue3: new FormControl(`Hello 3`),\\n        testValue4: new FormControl(``),\\n    });\\n\\n    get toggleContent(): string {\\n        return this.testForm.disabled ? `enable (allow editing)` : `disable`;\\n    }\\n\\n    get input4Empty(): boolean {\\n        return this.testForm.get(`testValue4`)!.value === ``;\\n    }\\n\\n    onToggleClick(): void {\\n        if (this.testForm.disabled) {\\n            this.testForm.enable();\\n        } else {\\n            this.testForm.disable();\\n        }\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-scrollbar-example-1`,\\n    templateUrl: `./template.html`,\\n    styleUrls: [`./style.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiScrollbarExample1Component {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\nexport interface Item {\\n    readonly name: string;\\n    readonly price: number;\\n}\\n\\n@Component({\\n    selector: `tui-filter-example1`,\\n    templateUrl: `./template.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiFilterExample1 {\\n    readonly items: readonly Item[] = [\\n        {\\n            name: `Sword`,\\n            price: 1000,\\n        },\\n        {\\n            name: `Axe`,\\n            price: 100,\\n        },\\n        {\\n            name: `Spear`,\\n            price: 500,\\n        },\\n    ];\\n\\n    readonly matcher = (item: Item, search: number): boolean => item.price > search;\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-mapper-example1`,\\n    templateUrl: `./template.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiMapperExample1 {\\n    readonly mapper = (amount: number, currencySymbol: string): string =>\\n        `Total: ${amount} ${currencySymbol}`;\\n}\\n\";","export default \"import {Component, ElementRef} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDestroyService} from '@taiga-ui/cdk';\\nimport {fromEvent} from 'rxjs';\\nimport {takeUntil} from 'rxjs/operators';\\n\\n@Component({\\n    selector: `tui-destroy-example`,\\n    templateUrl: `./template.html`,\\n    changeDetection,\\n    encapsulation,\\n    providers: [TuiDestroyService],\\n})\\nexport class TuiDestroyExample {\\n    constructor(destroy$: TuiDestroyService, {nativeElement}: ElementRef<HTMLElement>) {\\n        fromEvent(nativeElement, `click`)\\n            .pipe(takeUntil(destroy$))\\n            .subscribe(() => console.info(`click`));\\n    }\\n}\\n\";"],"sourceRoot":"webpack:///"}