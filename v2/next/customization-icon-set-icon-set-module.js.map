{"version":3,"sources":["./src/modules/customization/icon-set/examples/1/index.ts","./src/modules/customization/icon-set/examples/1/index.html","./src/modules/customization/icon-set/icon-set.component.ts","./src/modules/customization/icon-set/icon-set.template.html","./src/modules/customization/icon-set/icon-set.module.ts"],"names":[],"mappings":"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","file":"customization-icon-set-icon-set-module.js","sourcesContent":["import {Component} from '@angular/core';\nimport {TUI_ICONS_PATH} from '@taiga-ui/core';\n\nconst MAPPER: Record<string, string> = {\n    tuiIconCalendarLarge: `date_range-24px`,\n    tuiIconTooltipLarge: `help-24px`,\n    tuiIconInfo: `info-16px`,\n    tuiIconCloseLarge: `clear-24px`,\n    tuiIconChevronLeftLarge: `keyboard_arrow_left-24px`,\n    tuiIconChevronRightLarge: `keyboard_arrow_right-24px`,\n    // and so on\n};\n\n// This assumes that icons were properly processed\nexport function iconsPath(name: string): string {\n    return `assets/icons/${MAPPER[name]}.svg#${MAPPER[name]}`;\n}\n\n@Component({\n    selector: `tui-icon-set-example-1`,\n    templateUrl: `./index.html`,\n    providers: [\n        {\n            provide: TUI_ICONS_PATH,\n            useValue: iconsPath,\n        },\n    ],\n})\nexport class TuiIconSetExample1 {\n    date = null;\n}\n","<div class=\"b-form\">\n    <tui-notification>\n        As usual with the DI this is hierarchical. Meaning you can provide different\n        <code>TUI_ICONS_PATH</code>\n        and use different icons across your app.\n    </tui-notification>\n    <tui-input-date-range\n        tuiHintContent=\"You can use any icons you want\"\n        class=\"tui-space_top-4\"\n        [tuiTextfieldCleaner]=\"true\"\n        [(ngModel)]=\"date\"\n    >\n        Pick your favorite date range\n    </tui-input-date-range>\n</div>\n","import {Component} from '@angular/core';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {tuiKitIcons} from '@taiga-ui/icons';\n\n@Component({\n    selector: `icon-set`,\n    templateUrl: `./icon-set.template.html`,\n    styleUrls: [`./icon-set.style.less`],\n    changeDetection,\n})\nexport class IconSetComponent {\n    readonly exampleSanitizer = import(`!!raw-loader!./examples/sanitizer/sanitizer.md`);\n\n    readonly example1 = {\n        'process-icons.js': import(`!!raw-loader!./examples/1/process-icons.js.md`),\n        'process-icons.ts': import(`!!raw-loader!./examples/1/process-icons.ts.md`),\n        TypeScript: import(`!!raw-loader!./examples/1/index.ts`),\n        HTML: import(`!!raw-loader!./examples/1/index.html`),\n    };\n\n    readonly names = Object.keys(tuiKitIcons);\n\n    expanded = false;\n\n    toggle(): void {\n        this.expanded = !this.expanded;\n    }\n}\n","<tui-doc-page\n    i18n-header\n    header=\"Icons set\"\n>\n    <p i18n>\n        Taiga UI uses\n        <a\n            tuiLink\n            routerLink=\"/components/svg\"\n        >\n            <code>tui-svg</code>\n        </a>\n        component to display SVG icons. It can show icons by name, link or source code. Several icon names are hardcoded\n        into kit components so if you want to switch to a different icon set you would need to provide a mapping.\n    </p>\n    <p>\n        <button\n            tuiButton\n            (click)=\"toggle()\"\n        >\n            Show names\n        </button>\n    </p>\n    <tui-expand [expanded]=\"expanded\">\n        <div class=\"wrapper\">\n            <tui-doc-copy\n                *ngFor=\"let name of names\"\n                [cdkCopyToClipboard]=\"name\"\n            >\n                <code>{{ name }}</code>\n            </tui-doc-copy>\n        </div>\n    </tui-expand>\n    <p i18n>\n        These are keys of following dictionaries:\n        <code>tuiCoreIcons</code>\n        and\n        <code>tuiKitIcons</code>\n        . It is not required to provide all those icons, you can gradually add the ones you need depending on components\n        you use.\n    </p>\n\n    <p i18n>\n        There are two ways to add icons: bundled and as assets. Bundled icons have the benefit of immediate display but\n        increase your app size. Assets work like regular\n        <code>img src=\"xxx\"</code>\n        with all the benefits of caching. In both cases you can control color with CSS\n        <code>color</code>\n        style.\n    </p>\n\n    <tui-notification status=\"warning\">\n        Make sure you mark regions in your icons that need to be colored with\n        <code>fill=\"currentColor\"</code>\n        or\n        <code>stroke=\"currentColor\"</code>\n        .\n    </tui-notification>\n\n    <p i18n>\n        If you want to bundle your icons, you need to provide\n        <code>TUI_ICONS</code>\n        token with a dictionary of name to source code. Also you need to process your icons by\n        <code>processIcons</code>\n        from\n        <code>@taiga-ui/icons/scripts</code>\n        package. Then move icons to the assets folder and provide\n        <code>TUI_ICONS_PATH</code>\n        as seen in example below:\n    </p>\n\n    <tui-doc-example\n        id=\"material\"\n        i18n-heading\n        heading=\"Material icons\"\n        [content]=\"example1\"\n    >\n        <tui-icon-set-example-1></tui-icon-set-example-1>\n    </tui-doc-example>\n\n    <section\n        id=\"sanitizer\"\n        class=\"sanitizer-example\"\n    >\n        <h2>Sanitizer</h2>\n        <p i18n>\n            If you use unsafe icons or\n            <a\n                tuiLink\n                routerLink=\"/components/editor\"\n            >\n                Editor component\n            </a>\n            you need to provide\n            <code>TUI_SANITIZER</code>\n            token, which is responsible for removing malicious code from the svg. We recommend to use\n            <a\n                tuiLink\n                href=\"https://github.com/tinkoff/ng-dompurify\"\n                target=\"_blank\"\n            >\n                NgDompurify\n            </a>\n            as a sanitizer. This library implements\n            <a\n                tuiLink\n                href=\"https://github.com/cure53/DOMPurify\"\n                target=\"_blank\"\n            >\n                DOMPurify\n            </a>\n            as Angular Sanitizer or Pipe. It delegates sanitizing to DOMPurify and supports the same configuration.\n        </p>\n\n        <tui-doc-code\n            filename=\"app.module.ts\"\n            [code]=\"exampleSanitizer\"\n        ></tui-doc-code>\n    </section>\n</tui-doc-page>\n","import {ClipboardModule} from '@angular/cdk/clipboard';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {generateRoutes, TuiAddonDocModule, TuiDocCopyModule} from '@taiga-ui/addon-doc';\nimport {\n    TuiButtonModule,\n    TuiExpandModule,\n    TuiHintControllerModule,\n    TuiLinkModule,\n    TuiNotificationModule,\n    TuiTextfieldControllerModule,\n} from '@taiga-ui/core';\nimport {TuiInputDateRangeModule} from '@taiga-ui/kit';\n\nimport {TuiIconSetExample1} from './examples/1';\nimport {IconSetComponent} from './icon-set.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ClipboardModule,\n        TuiDocCopyModule,\n        TuiLinkModule,\n        TuiExpandModule,\n        TuiButtonModule,\n        TuiInputDateRangeModule,\n        TuiNotificationModule,\n        TuiTextfieldControllerModule,\n        TuiHintControllerModule,\n        TuiAddonDocModule,\n        RouterModule.forChild(generateRoutes(IconSetComponent)),\n    ],\n    declarations: [IconSetComponent, TuiIconSetExample1],\n    exports: [IconSetComponent],\n})\nexport class IconSetModule {}\n"],"sourceRoot":"webpack:///"}