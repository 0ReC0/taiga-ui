{"version":3,"sources":["webpack:///./src/modules/charts/arc-chart/examples/2/index.ts?71c6","webpack:///./src/modules/charts/axes/examples/2/index.ts?f103","webpack:///./src/modules/charts/bar-chart/examples/2/index.ts?201a","webpack:///./src/modules/charts/bar-set/examples/2/index.ts?788d","webpack:///./src/modules/charts/bar/examples/2/index.ts?83ee","webpack:///./src/modules/charts/legend-item/examples/2/index.ts?fbb5","webpack:///./src/modules/charts/line-chart/examples/2/index.ts?02cc","webpack:///./src/modules/charts/line-days-chart/examples/2/index.ts?c10b","webpack:///./src/modules/charts/pie-chart/examples/2/index.ts?b410","webpack:///./src/modules/charts/ring-chart/examples/2/index.ts?a0cb","webpack:///./src/modules/components/accordion/examples/2/index.ts?ceac","webpack:///./src/modules/components/action/examples/2/index.ts?f5ab","webpack:///./src/modules/components/avatar/examples/2/index.ts?1c6e","webpack:///./src/modules/components/badge/examples/2/index.ts?01a8","webpack:///./src/modules/components/badged-content/examples/2/index.ts?7106","webpack:///./src/modules/components/button/examples/2/index.ts?48b8","webpack:///./src/modules/components/calendar-month/examples/2/index.ts?4209","webpack:///./src/modules/components/calendar-range/examples/2/index.ts?7023","webpack:///./src/modules/components/calendar/examples/2/index.ts?65fb","webpack:///./src/modules/components/card/examples/2/index.ts?52df","webpack:///./src/modules/components/carousel/examples/2/index.ts?2f35","webpack:///./src/modules/components/checkbox-block/examples/2/index.ts?e2a9","webpack:///./src/modules/components/checkbox-labeled/examples/2/index.ts?f6ed","webpack:///./src/modules/components/checkbox/examples/2/index.ts?0192","webpack:///./src/modules/components/color-picker/examples/2/index.ts?f050","webpack:///./src/modules/components/combo-box/examples/2/index.ts?1b05","webpack:///./src/modules/components/data-list/examples/2/index.ts?ebdf","webpack:///./src/modules/components/dialog/examples/2/index.ts?91ae","webpack:///./src/modules/components/editor-new/examples/2/index.ts?a812","webpack:///./src/modules/components/field-error/examples/2/index.ts?675e","webpack:///./src/modules/components/filter/examples/2/index.ts?72bf","webpack:///./src/modules/components/group/examples/2/index.ts?30e5","webpack:///./src/modules/components/hosted-dropdown/examples/2/index.ts?1695","webpack:///./src/modules/components/input-card-grouped/examples/2/index.ts?0dac","webpack:///./src/modules/components/input-count/examples/2/index.ts?6110","webpack:///./src/modules/components/input-date-range/examples/2/index.ts?ff1a","webpack:///./src/modules/components/input-date-time/examples/2/index.ts?0be5","webpack:///./src/modules/components/input-date/examples/2/index.ts?0472","webpack:///./src/modules/components/input-file/examples/2/index.ts?3f98","webpack:///./src/modules/components/input-files/examples/2/index.ts?2080","webpack:///./src/modules/components/input-month-range/examples/2/index.ts?e075","webpack:///./src/modules/components/input-month/examples/2/index.ts?9e23","webpack:///./src/modules/components/input-number/examples/2/index.ts?acc2","webpack:///./src/modules/components/input-password/examples/2/index.ts?ff9e","webpack:///./src/modules/components/input-phone-international/examples/2/index.ts?5166","webpack:///./src/modules/components/input-phone/examples/2/index.ts?6097","webpack:///./src/modules/components/input-range/examples/2/index.ts?8140","webpack:///./src/modules/components/input-tag/examples/2/index.ts?6161","webpack:///./src/modules/components/input-time/examples/2/index.ts?67f1","webpack:///./src/modules/components/input/examples/2/index.ts?8d7e","webpack:///./src/modules/components/island/examples/2/index.ts?c7c6","webpack:///./src/modules/components/label/examples/2/index.ts?019d","webpack:///./src/modules/components/line-clamp/examples/2/index.ts?15fb","webpack:///./src/modules/components/link/examples/2/index.ts?9f28","webpack:///./src/modules/components/loader/examples/2/index.ts?d992","webpack:///./src/modules/components/marker-icon/examples/2/index.ts?4b84","webpack:///./src/modules/components/mobile-calendar/examples/2/index.ts?8e14","webpack:///./src/modules/components/mobile-themes/examples/2/index.ts?845a","webpack:///./src/modules/components/money/examples/2/index.ts?ccc9","webpack:///./src/modules/components/multi-select/examples/2/index.ts?2fd2","webpack:///./src/modules/components/notification/examples/2/index.ts?38f0","webpack:///./src/modules/components/pagination/examples/2/index.ts?1105","webpack:///./src/modules/components/pdf-viewer/examples/2/index.ts?7013","webpack:///./src/modules/components/preview/examples/2/index.ts?9950","webpack:///./src/modules/components/primitive-textfield/examples/2/index.ts?57ca","webpack:///./src/modules/components/progress-bar/examples/2/index.ts?080f","webpack:///./src/modules/components/progress-circle/examples/2/index.ts?6889","webpack:///./src/modules/components/progress-segmented/examples/2/index.ts?3d3d","webpack:///./src/modules/components/pull-to-refresh/examples/2/index.ts?ae55","webpack:///./src/modules/components/push/examples/2/index.ts?58bd","webpack:///./src/modules/components/radio-block/examples/2/index.ts?79e4","webpack:///./src/modules/components/radio-labeled/examples/2/index.ts?1c1c","webpack:///./src/modules/components/radio-list/examples/2/index.ts?8bec","webpack:///./src/modules/components/radio/examples/2/index.ts?2109","webpack:///./src/modules/components/rating/examples/2/index.ts?85b9","webpack:///./src/modules/components/select/examples/2/index.ts?f143","webpack:///./src/modules/components/sheet/examples/2/index.ts?7aba","webpack:///./src/modules/components/slider-old/examples/2/index.ts?533d","webpack:///./src/modules/components/stepper/examples/2/index.ts?f7a3","webpack:///./src/modules/components/svg/examples/2/index.ts?a878","webpack:///./src/modules/components/tabs/examples/2/index.ts?3ec6","webpack:///./src/modules/components/tag/examples/2/index.ts?4a51","webpack:///./src/modules/components/text-area/examples/2/index.ts?ce23","webpack:///./src/modules/components/toggle/examples/2/index.ts?0f0f","webpack:///./src/modules/components/tooltip/examples/2/index.ts?26a1","webpack:///./src/modules/components/tree/examples/2/index.ts?3bc7","webpack:///./src/modules/directives/dropdown-context/examples/2/index.ts?f899","webpack:///./src/modules/directives/dropdown-selection/examples/2/index.ts?580b","webpack:///./src/modules/directives/dropdown/examples/2/index.ts?0165","webpack:///./src/modules/directives/let/examples/2/index.ts?18a2","webpack:///./src/modules/directives/media/examples/2/index.ts?ea84","webpack:///./src/modules/directives/overscroll/examples/2/index.ts?e9a0","webpack:///./src/modules/directives/swipe/examples/2/index.ts?1e0c","webpack:///./src/modules/markup/skeleton/examples/2/index.ts?43ec","webpack:///./src/modules/markup/spaces/examples/2/index.ts?6af2","webpack:///./src/modules/pipes/field-error/examples/2/index.ts?3655","webpack:///./src/modules/pipes/filter-by-input/examples/2/index.ts?0f84","webpack:///./src/modules/services/alerts/examples/2/index.ts?a200","webpack:///./src/modules/tables/table-pagination/examples/2/index.ts?d883","webpack:///./src/modules/tables/table/examples/2/index.ts?b27d","webpack:///./src/modules/utils/format/examples/2/index.ts?286b","webpack:///./src/modules/utils/math/examples/2/index.ts?39e5","webpack:///./src/modules/utils/miscellaneous/examples/2/index.ts?a36a","webpack:///./src/modules/utils/tokens/examples/2/index.ts?caba"],"names":[],"mappings":"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","file":"!!raw-loader!-examples-2-index-ts.js","sourcesContent":["export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {sum} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-arc-chart-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiArcChartExample2 {\\n    private readonly labels = [`Food`, `Cafe`, `Open Source`, `Taxi`, `other`];\\n    readonly value = [13769, 12367, 10172, 3018, 2592];\\n    readonly sum = sum(...this.value);\\n\\n    getValue(index: number): number {\\n        return Number.isNaN(index) ? this.sum : this.value[index];\\n    }\\n\\n    getLabel(index: number): string {\\n        return Number.isNaN(index) ? `Total` : this.labels[index];\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_ALWAYS_DASHED, TUI_ALWAYS_NONE} from '@taiga-ui/addon-charts';\\nimport {ceil, tuiPure} from '@taiga-ui/cdk';\\n\\nconst BENJI = 100;\\n\\n@Component({\\n    selector: `tui-axes-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiAxesExample2 {\\n    private readonly setNames = [`cdk`, `core`, `kit`, `charts`];\\n\\n    readonly value: ReadonlyArray<[number, number, number, number]> = [\\n        [10, 20, 3, 7],\\n        [15, 18, 24, 1],\\n        [34, 23, 12, 9],\\n        [30, 14, 18, 14],\\n    ];\\n\\n    readonly axisYSecondaryLabels = [\\n        ``,\\n        `${this.getMax(this.value) / 2} k`,\\n        `${this.getMax(this.value)} k`,\\n    ];\\n\\n    readonly axisXLabels = [`Q1`, `Q2`, `Q3`, `Q4`];\\n\\n    readonly horizontalLinesHandler = TUI_ALWAYS_DASHED;\\n\\n    readonly verticalLinesHandler = TUI_ALWAYS_NONE;\\n\\n    getPercent(set: [number, number, number, number]): number {\\n        return (BENJI * Math.max(...set)) / this.getMax(this.value);\\n    }\\n\\n    getSetName(index: number): string {\\n        return this.setNames[index];\\n    }\\n\\n    getBackground(index: number): string {\\n        return `var(--tui-chart-${index})`;\\n    }\\n\\n    @tuiPure\\n    private getMax(value: ReadonlyArray<[number, number, number, number]>): number {\\n        return ceil(\\n            value.reduce((max, value) => Math.max(...value, max), 0),\\n            -1,\\n        );\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-bar-chart-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiBarChartExample2 {\\n    readonly value = [\\n        [1000, 8000, 4000, 3000, 4000],\\n        [6000, 2000, 4500, 7000, 5000],\\n    ];\\n\\n    readonly labelsX = [`Jan 2021`, `Feb`, `Mar`];\\n    readonly labelsY = [`0`, `10 000`];\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-bar-set-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiBarSetExample2 {\\n    readonly value = [30, 15, 10];\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-bar-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiBarExample2 {\\n    readonly value = [30, 15, 10];\\n}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {sum, tuiPure} from '@taiga-ui/cdk';\\nimport {formatNumber, TuiAlertService} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-legend-item-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiLegendItemExample2 {\\n    private enabled = new Array(5).fill(true);\\n\\n    readonly data = [13769, 12367, 10172, 3018, 2592];\\n    readonly sum = sum(...this.data);\\n    readonly labels = [`Axes`, `Faxes`, `Taxes`, `Saxes`, `Other`];\\n\\n    constructor(\\n        @Inject(TuiAlertService)\\n        private readonly alertService: TuiAlertService,\\n    ) {}\\n\\n    get value(): readonly number[] {\\n        return this.getValue(this.data, this.enabled);\\n    }\\n\\n    isEnabled(index: number): boolean {\\n        return this.enabled[index];\\n    }\\n\\n    toggle(index: number): void {\\n        this.enabled = this.enabled.map((value, i) => (i === index ? !value : value));\\n    }\\n\\n    onClick(index: number): void {\\n        if (this.isEnabled(index)) {\\n            this.alertService\\n                .open(`Category spendings: ${formatNumber(this.data[index])} ₽`, {\\n                    label: this.labels[index],\\n                })\\n                .subscribe();\\n        } else {\\n            this.toggle(index);\\n        }\\n    }\\n\\n    getColor(index: number): string {\\n        return `var(--tui-chart-${index})`;\\n    }\\n\\n    @tuiPure\\n    private getValue(\\n        data: readonly number[],\\n        enabled: readonly number[],\\n    ): readonly number[] {\\n        return data.map((value, index) => (enabled[index] ? value : 0));\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiPoint} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-line-chart-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiLineChartExample2 {\\n    readonly value: readonly TuiPoint[] = [\\n        [50, 50],\\n        [100, 75],\\n        [150, 50],\\n        [200, 150],\\n        [250, 155],\\n        [300, 190],\\n        [350, 90],\\n    ];\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {\\n    TuiDay,\\n    TuiDayLike,\\n    TuiDayRange,\\n    TuiMapper,\\n    TuiMatcher,\\n    tuiPure,\\n} from '@taiga-ui/cdk';\\nimport {TuiPoint} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-line-days-chart-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n})\\nexport class TuiLineDaysChartExample2 {\\n    data = new TuiDayRange(\\n        TuiDay.currentLocal(),\\n        TuiDay.currentLocal().append({month: 5}),\\n    );\\n\\n    show = this.data;\\n\\n    days: ReadonlyArray<ReadonlyArray<[TuiDay, number]>> = this.computeArrays(this.data);\\n\\n    readonly maxLength: TuiDayLike = {month: 6};\\n\\n    get range(): TuiDayRange {\\n        return this.computeRange(this.show);\\n    }\\n\\n    @tuiPure\\n    getWidth({from, to}: TuiDayRange): number {\\n        return TuiDay.lengthBetween(from, to);\\n    }\\n\\n    @tuiPure\\n    getDate(day: number | TuiDay, date: TuiDay): TuiDay {\\n        return day instanceof TuiDay ? day : date.append({day});\\n    }\\n\\n    readonly filter: TuiMatcher<[TuiDay, number]> = ([day], {from, to}: TuiDayRange) =>\\n        day.daySameOrAfter(from) && day.daySameOrBefore(to);\\n\\n    readonly toNumbers: TuiMapper<ReadonlyArray<[TuiDay, number]>, readonly TuiPoint[]> =\\n        (days, {from}: TuiDayRange) =>\\n            days.map(\\n                ([day, value]) =>\\n                    [TuiDay.lengthBetween(from, day), value] as [number, number],\\n            );\\n\\n    onDataChange(data: TuiDayRange): void {\\n        this.days = this.computeArrays(data);\\n    }\\n\\n    @tuiPure\\n    private computeRange(range: TuiDayRange): TuiDayRange {\\n        const {from, to} = range;\\n        const length = TuiDay.lengthBetween(from, to);\\n        const dayOfWeekFrom = from.dayOfWeek();\\n        const dayOfWeekTo = to.dayOfWeek();\\n        const mondayFrom = dayOfWeekFrom ? from.append({day: 7 - dayOfWeekFrom}) : from;\\n        const mondayTo = dayOfWeekTo ? to.append({day: 7 - dayOfWeekTo}) : to;\\n        const mondaysLength = TuiDay.lengthBetween(mondayFrom, mondayTo);\\n\\n        if (length > 60) {\\n            return new TuiDayRange(\\n                mondayFrom,\\n                mondayTo.append({day: mondaysLength % 14}),\\n            );\\n        }\\n\\n        if (length > 14) {\\n            return new TuiDayRange(mondayFrom, mondayTo);\\n        }\\n\\n        if (length > 7) {\\n            return new TuiDayRange(from, to.append({day: length % 2}));\\n        }\\n\\n        return range;\\n    }\\n\\n    // Random data generation\\n    @tuiPure\\n    private computeData(\\n        {from, to}: TuiDayRange,\\n        initial: number,\\n    ): ReadonlyArray<[TuiDay, number]> {\\n        return new Array(TuiDay.lengthBetween(from, to) + 1)\\n            .fill(0)\\n            .reduce<ReadonlyArray<[TuiDay, number]>>(\\n                (array, _, i) => [\\n                    ...array,\\n                    [\\n                        from.append({day: i}),\\n                        Math.max(\\n                            (i ? array[i - 1][1] : initial) + Math.random() * 10 - 5,\\n                            0,\\n                        ),\\n                    ],\\n                ],\\n                [],\\n            )\\n            .filter(([day]) => day.dayOfWeek() < 5);\\n    }\\n\\n    private computeArrays(\\n        data: TuiDayRange,\\n    ): ReadonlyArray<ReadonlyArray<[TuiDay, number]>> {\\n        return [\\n            this.computeData(data, 100),\\n            this.computeData(data, 75),\\n            this.computeData(data, 50),\\n        ];\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-pie-chart-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiPieChartExample2 {\\n    readonly value = [13769, 12367, 10172, 3018, 2592];\\n    readonly labels = [`Food`, `Cafe`, `Open Source`, `Taxi`, `Other`];\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {sum} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-ring-chart-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiRingChartExample2 {\\n    private readonly labels = [`Food`, `Cafe`, `Open Source`, `Taxi`, `other`];\\n    readonly value = [13769, 12367, 10172, 3018, 2592];\\n    readonly total = sum(...this.value);\\n\\n    index = NaN;\\n\\n    get sum(): number {\\n        return isNaN(this.index) ? this.total : this.value[this.index];\\n    }\\n\\n    get label(): string {\\n        return isNaN(this.index) ? `Total` : this.labels[this.index];\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\nclass Account {\\n    constructor(readonly name: string, readonly balance: number) {}\\n\\n    toString(): string {\\n        return `${this.name} (${this.balance})`;\\n    }\\n}\\n\\n@Component({\\n    selector: `tui-accordion-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiAccordionExample2 {\\n    readonly accounts = [\\n        new Account(`Rubles`, 500),\\n        new Account(`Dollar`, 237),\\n        new Account(`Euro`, 100),\\n    ];\\n\\n    svgIcons = {\\n        rubles: import(`!!raw-loader!./rubles.svg`) as Promise<{default: string}>,\\n    };\\n\\n    testForm = new FormGroup({\\n        name: new FormControl(``),\\n        accounts: new FormControl(this.accounts[0]),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-action-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiActionExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-avatar-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiAvatarExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-badge-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiBadgeExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-badged-content-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiBadgedContentExample2 {\\n    value = ``;\\n\\n    contentTop = 0;\\n\\n    get badgeValue(): number {\\n        return this.value.length;\\n    }\\n\\n    get color(): string {\\n        return this.contentTop === 50 ? `tuiIconCheck` : `var(--tui-error-fill)`;\\n    }\\n\\n    get contentBottom(): string {\\n        return this.contentTop === 50 ? `` : ``;\\n    }\\n\\n    onClick(): void {\\n        this.contentTop++;\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-button-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiButtonExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiMonth, TuiMonthRange} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-calendar-month-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiMonthExample2 {\\n    value: TuiMonthRange | null = null;\\n\\n    max = new TuiMonth(2021, 7);\\n    min = new TuiMonth(2019, 7);\\n\\n    onMonthClick(month: TuiMonth): void {\\n        if (this.value === null || !this.value.isSingleMonth) {\\n            this.value = new TuiMonthRange(month, month);\\n\\n            return;\\n        }\\n\\n        this.value = TuiMonthRange.sort(this.value.from, month);\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDay, TuiDayRange} from '@taiga-ui/cdk';\\nimport {TUI_CALENDAR_DATA_STREAM} from '@taiga-ui/kit';\\nimport {of} from 'rxjs';\\n\\nexport const calendarStream$ = of(\\n    new TuiDayRange(new TuiDay(2019, 2, 11), new TuiDay(2019, 2, 14)),\\n);\\n\\n@Component({\\n    selector: `tui-range-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        {\\n            provide: TUI_CALENDAR_DATA_STREAM,\\n            useValue: calendarStream$,\\n        },\\n    ],\\n})\\nexport class TuiRangeExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDay, TuiDayRange, TuiMonth} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-calendar-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiCalendarExample2 {\\n    value: TuiDayRange | null = null;\\n\\n    firstMonth = TuiMonth.currentLocal();\\n\\n    middleMonth = TuiMonth.currentLocal().append({month: 1});\\n\\n    lastMonth = TuiMonth.currentLocal().append({month: 2});\\n\\n    hoveredItem: TuiDay | null = null;\\n\\n    onDayClick(day: TuiDay): void {\\n        if (this.value === null || !this.value.isSingleDay) {\\n            this.value = new TuiDayRange(day, day);\\n        }\\n\\n        this.value = TuiDayRange.sort(this.value.from, day);\\n    }\\n\\n    onMonthChangeFirst(month: TuiMonth): void {\\n        this.firstMonth = month;\\n        this.middleMonth = month.append({month: 1});\\n        this.lastMonth = month.append({month: 2});\\n    }\\n\\n    onMonthChangeMiddle(month: TuiMonth): void {\\n        this.firstMonth = month.append({month: -1});\\n        this.middleMonth = month;\\n        this.lastMonth = month.append({month: 1});\\n    }\\n\\n    onMonthChangeLast(month: TuiMonth): void {\\n        this.firstMonth = month.append({month: -2});\\n        this.middleMonth = month.append({month: -1});\\n        this.lastMonth = month;\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-card-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiCardExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-carousel-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiCarouselExample2 {\\n    index = 0;\\n\\n    readonly items = [\\n        `angular.svg`,\\n        `avatar.jpg`,\\n        `angular.svg`,\\n        `avatar.jpg`,\\n        `angular.svg`,\\n        `avatar.jpg`,\\n    ];\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-checkbox-block-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiCheckboxBlockExample2 {\\n    testForm = new FormGroup({\\n        testValue1: new FormControl(false),\\n        testValue2: new FormControl(false),\\n        testValue3: new FormControl(false),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-checkbox-labeled-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiCheckboxLabeledExample2 {\\n    testForm = new FormGroup({\\n        testValue1: new FormControl(true),\\n        testValue2: new FormControl(false),\\n        testValue3: new FormControl(false),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-checkbox-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiCheckboxExample2 {\\n    testForm = new FormGroup({\\n        testValue1: new FormControl(true),\\n        testValue2: new FormControl(false),\\n        testValue3: new FormControl({value: true, disabled: true}),\\n        testValue4: new FormControl({value: false, disabled: true}),\\n    });\\n}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {DomSanitizer, SafeStyle} from '@angular/platform-browser';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-color-picker-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiColorPickerExample2 {\\n    color = `#ffdd2d`;\\n\\n    constructor(@Inject(DomSanitizer) private readonly sanitizer: DomSanitizer) {}\\n\\n    get background(): SafeStyle {\\n        return this.sanitizer.bypassSecurityTrustStyle(this.color);\\n    }\\n}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {FormControl} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {TuiDestroyService} from '@taiga-ui/cdk';\\n\\nimport {databaseMockData} from './database-mock-data';\\nimport {RequestService} from './request.service';\\n\\n@Component({\\n    selector: `tui-combo-box-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    providers: [RequestService, TuiDestroyService],\\n    changeDetection,\\n})\\nexport class TuiComboBoxExample2 {\\n    search: string | null = ``;\\n\\n    readonly control = new FormControl(databaseMockData[0]);\\n\\n    constructor(@Inject(RequestService) readonly service: RequestService) {}\\n}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDialogService, TuiSizeL, TuiSizeXS} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-data-list-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiDataListExample2 {\\n    dropdownOpen = false;\\n    size: TuiSizeXS | TuiSizeL = `s`;\\n\\n    readonly burgers = [`Classic`, `Cheeseburger`, `Royal Cheeseburger`];\\n    readonly drinks = [`Cola`, `Tea`, `Coffee`, `Slurm`];\\n\\n    constructor(\\n        @Inject(TuiDialogService) private readonly dialogService: TuiDialogService,\\n    ) {}\\n\\n    selectOption(item: string): void {\\n        this.dropdownOpen = false;\\n        this.dialogService.open(`You selected ${item}`).subscribe();\\n    }\\n}\\n\";","export default \"import {Component, Inject, Injector} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDialogService} from '@taiga-ui/core';\\nimport {PolymorpheusComponent} from '@tinkoff/ng-polymorpheus';\\n\\nimport {DialogExampleComponent} from './dialog-example/dialog-example.component';\\n\\n@Component({\\n    selector: `tui-dialog-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiDialogExampleComponent2 {\\n    private readonly dialog = this.dialogService.open<number>(\\n        new PolymorpheusComponent(DialogExampleComponent, this.injector),\\n        {\\n            data: 237,\\n            dismissible: true,\\n            label: `Heading`,\\n        },\\n    );\\n\\n    constructor(\\n        @Inject(TuiDialogService) private readonly dialogService: TuiDialogService,\\n        @Inject(Injector) private readonly injector: Injector,\\n    ) {}\\n\\n    showDialog(): void {\\n        this.dialog.subscribe({\\n            next: data => {\\n                console.info(`Dialog emitted data = ${data}`);\\n            },\\n            complete: () => {\\n                console.info(`Dialog closed`);\\n            },\\n        });\\n    }\\n}\\n\";","export default \"import {HttpClient} from '@angular/common/http';\\nimport {Component, Inject, Injector} from '@angular/core';\\nimport {FormControl} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {\\n    tiptapEditorStyles,\\n    TUI_EDITOR_EXTENSIONS,\\n    TUI_EDITOR_STYLES,\\n    TUI_IMAGE_LOADER,\\n    TuiEditorTool,\\n} from '@taiga-ui/addon-editor';\\nimport {TuiDestroyService, TuiHandler} from '@taiga-ui/cdk';\\nimport {Observable} from 'rxjs';\\nimport {switchMap, takeUntil} from 'rxjs/operators';\\n\\n@Component({\\n    selector: `tui-editor-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    providers: [\\n        TuiDestroyService,\\n        {\\n            provide: TUI_EDITOR_EXTENSIONS,\\n            deps: [Injector],\\n            useFactory: (injector: Injector) => [\\n                import(`@taiga-ui/addon-editor/extensions/starter-kit`).then(\\n                    m => m.StarterKit,\\n                ),\\n                import(`@taiga-ui/addon-editor/extensions/image-editor`).then(m =>\\n                    m.createImageEditorExtension(injector),\\n                ),\\n            ],\\n        },\\n        {\\n            provide: TUI_EDITOR_STYLES,\\n            useValue: tiptapEditorStyles,\\n        },\\n    ],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiEditorNewExample2 {\\n    readonly builtInTools = [TuiEditorTool.Undo, TuiEditorTool.Img];\\n\\n    base64Image$ = this.http\\n        .get(`assets/images/lumberjack.png`, {responseType: `blob`})\\n        .pipe(switchMap(file => this.imageLoader(file)));\\n\\n    control = new FormControl(``);\\n\\n    constructor(\\n        @Inject(TUI_IMAGE_LOADER)\\n        private readonly imageLoader: TuiHandler<Blob, Observable<string>>,\\n        @Inject(HttpClient) private readonly http: HttpClient,\\n        @Inject(TuiDestroyService) destroy$: TuiDestroyService,\\n    ) {\\n        this.base64Image$.pipe(takeUntil(destroy$)).subscribe(src => {\\n            this.control.patchValue(\\n                `<img data-type=\\\"image-editor\\\" src=\\\"${src}\\\" width=\\\"300\\\"><p>Try to drag right border of image!</p><p>To change min size of image use token <code>TUI_EDITOR_MIN_IMAGE_WIDTH</code>.</p><p>To change max size of image use token <code>TUI_EDITOR_MAX_IMAGE_WIDTH</code>.</p>`,\\n            );\\n        });\\n    }\\n}\\n\";","export default \"import {Component, OnInit, ViewChild} from '@angular/core';\\nimport {\\n    AbstractControl,\\n    FormControl,\\n    FormGroup,\\n    ValidationErrors,\\n    Validators,\\n} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiValidationError} from '@taiga-ui/cdk';\\nimport {PolymorpheusContent} from '@tinkoff/ng-polymorpheus';\\n\\nconst secretRegexTen = /^\\\\d{10}$/;\\nconst secretRegexTwelve = /^\\\\d{12}$/;\\n\\nexport function innValidator(field: AbstractControl): unknown {\\n    return field.value &&\\n        (secretRegexTen.test(field.value) || secretRegexTwelve.test(field.value))\\n        ? null\\n        : {\\n              inn: new TuiValidationError(`Secret number contains 10 or 12 digits`),\\n          };\\n}\\n\\n@Component({\\n    selector: `tui-field-error-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiFieldErrorExample2 implements OnInit {\\n    @ViewChild(`errorContent`)\\n    errorContent: PolymorpheusContent = ``;\\n\\n    @ViewChild(`bigErrorContent`)\\n    bigErrorContent: PolymorpheusContent = ``;\\n\\n    readonly testValue2 = new FormControl(``);\\n\\n    readonly testForm = new FormGroup({\\n        testValue1: new FormControl(``, [Validators.required, this.getSecretValidator()]),\\n        testValue2: this.testValue2,\\n    });\\n\\n    ngOnInit(): void {\\n        this.testValue2.setValidators([Validators.required, this.companyValidator]);\\n    }\\n\\n    private readonly companyValidator = (\\n        field: AbstractControl,\\n    ): ValidationErrors | null =>\\n        field.value\\n            ? {\\n                  inn: new TuiValidationError(this.bigErrorContent),\\n              }\\n            : null;\\n\\n    private getSecretValidator(): (field: AbstractControl) => ValidationErrors | null {\\n        return (field: AbstractControl): ValidationErrors | null =>\\n            field.value &&\\n            (secretRegexTen.test(field.value) || secretRegexTwelve.test(field.value))\\n                ? null\\n                : {\\n                      secret: new TuiValidationError(this.errorContent),\\n                  };\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiHandler, TuiIdentityMatcher} from '@taiga-ui/cdk';\\n\\ninterface Orerations {\\n    title: string;\\n    operations: readonly Oreration[];\\n}\\n\\ninterface Oreration {\\n    amount: number;\\n}\\n\\nconst COMPLETED = {\\n    title: `Done`,\\n    operations: [\\n        {\\n            amount: 100,\\n        },\\n        {\\n            amount: 200,\\n        },\\n    ],\\n};\\n\\n@Component({\\n    selector: `tui-filter-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiFilterExample2 {\\n    readonly form = new FormGroup({\\n        filters: new FormControl([\\n            {\\n                title: `Drafts`,\\n            },\\n        ]),\\n    });\\n\\n    items: readonly Orerations[] = [\\n        COMPLETED,\\n        {\\n            title: `Drafts`,\\n            operations: [\\n                {\\n                    amount: 100,\\n                },\\n                {\\n                    amount: 200,\\n                },\\n                {\\n                    amount: 100,\\n                },\\n                {\\n                    amount: 100,\\n                },\\n            ],\\n        },\\n        {\\n            title: `For sign`,\\n            operations: [],\\n        },\\n        {\\n            title: `Queue`,\\n            operations: [\\n                {\\n                    amount: 100,\\n                },\\n                {\\n                    amount: 200,\\n                },\\n                {\\n                    amount: 100,\\n                },\\n                {\\n                    amount: 200,\\n                },\\n                {\\n                    amount: 100,\\n                },\\n                {\\n                    amount: 200,\\n                },\\n            ],\\n        },\\n    ];\\n\\n    identityMatcher: TuiIdentityMatcher<Orerations> = (\\n        item1: Orerations,\\n        item2: Orerations,\\n    ) => item1.title === item2.title;\\n\\n    badgeHandler: TuiHandler<Orerations, number> = item => item.operations.length;\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-group-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.style.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiGroupExample2 {}\\n\";","export default \"import {Component, ViewChild} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiHostedDropdownComponent} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-hosted-dropdown-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiHostedDropdownExample2 {\\n    @ViewChild(TuiHostedDropdownComponent)\\n    component?: TuiHostedDropdownComponent;\\n\\n    readonly items = [`Edit`, `Download`, `Rename`, `Delete`];\\n\\n    readonly selectItems = [`Item 1`, `Item 2`];\\n\\n    open = false;\\n\\n    selected = null;\\n\\n    onClick(): void {\\n        this.open = false;\\n        this.component?.nativeFocusableElement?.focus();\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {TuiInputCardGroupedComponent} from '@taiga-ui/addon-commerce';\\n\\n@Component({\\n    selector: `tui-input-card-grouped-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n})\\nexport class TuiInputCardGroupedExample2 {\\n    readonly items = [\\n        {card: `4321***1234`, expire: `12/21`, name: `Salary`, bank: `Tinkoff`},\\n        {\\n            card: `8765***5678`,\\n            expire: `03/42`,\\n            cvc: `***`,\\n            name: `Tips`,\\n            bank: `Bank of America`,\\n        },\\n        {card: `4200***9000`, name: `Dogecoins`, bank: `Crypto`},\\n    ];\\n\\n    readonly card = new FormGroup({meta: new FormControl(this.items[0])});\\n\\n    onClick(component: TuiInputCardGroupedComponent): void {\\n        this.card.get(`meta`)?.setValue(null);\\n        this.onEsc(component);\\n    }\\n\\n    onEsc(component: TuiInputCardGroupedComponent): void {\\n        component.nativeFocusableElement?.focus();\\n        component.open = false;\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-input-count-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputCountExample2 {\\n    testForm = new FormGroup({\\n        testValue1: new FormControl(10, Validators.required),\\n        testValue2: new FormControl(10, Validators.required),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDay, TuiDayRange} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-input-date-range-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputDateRangeExample2 {\\n    readonly control = new FormControl(\\n        new TuiDayRange(new TuiDay(2018, 2, 10), new TuiDay(2018, 3, 20)),\\n    );\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDay} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-input-date-time-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputDateTimeExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl([new TuiDay(2017, 2, 15), null]),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDay} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-input-date-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputDateExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl(new TuiDay(2017, 2, 15)),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {isPresent} from '@taiga-ui/cdk';\\nimport {TuiFileLike} from '@taiga-ui/kit';\\nimport {combineLatest, Observable, Subject, timer} from 'rxjs';\\nimport {\\n    filter,\\n    map,\\n    mapTo,\\n    mergeScan,\\n    pairwise,\\n    scan,\\n    share,\\n    startWith,\\n    switchMap,\\n    takeUntil,\\n    tap,\\n} from 'rxjs/operators';\\n\\nclass RejectedFile {\\n    constructor(readonly file: TuiFileLike, readonly reason: string) {}\\n}\\n\\nfunction isFile(file: unknown): file is File {\\n    return file instanceof File;\\n}\\n\\nfunction isRejectedFile(file: unknown): file is RejectedFile {\\n    return file instanceof RejectedFile;\\n}\\n\\nfunction convertRejected({file, reason}: RejectedFile): TuiFileLike {\\n    return {\\n        name: file.name,\\n        size: file.size,\\n        type: file.type,\\n        content: reason,\\n    };\\n}\\n\\n@Component({\\n    selector: `tui-input-file-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputFileExample2 {\\n    private readonly files = new FormControl([]);\\n\\n    private readonly rejectedFiles$ = new Subject<readonly TuiFileLike[]>();\\n\\n    private readonly files$ = this.files.valueChanges.pipe(\\n        // We start with empty array for pairwise to work immediately\\n        startWith<readonly File[]>([]),\\n        pairwise(),\\n        // We map each emit to newly added files\\n        map(([prev, cur]) => cur.filter(item => !prev.includes(item))),\\n        // We use mergeScan + combineLatest to accumulate results in one array\\n        mergeScan(\\n            (acc: ReadonlyArray<RejectedFile | File>, cur) =>\\n                combineLatest(\\n                    cur.map(file =>\\n                        this.serverRequest(file).pipe(\\n                            startWith(file),\\n                            takeUntil(\\n                                // Cancel upload if file is removed from control\\n                                this.files.valueChanges.pipe(\\n                                    filter(files => !files.includes(file)),\\n                                ),\\n                            ),\\n                        ),\\n                    ),\\n                    // Filtering out `null` as successfully uploaded files\\n                ).pipe(map(files => [...acc, ...files.filter(isPresent)])),\\n            [],\\n        ),\\n        // Now we have a shared Observable of currently loading Files and server-rejects\\n        share(),\\n    );\\n\\n    readonly loading$: Observable<readonly TuiFileLike[]> = this.files$.pipe(\\n        // We filter out RejectedFiles to remove errors from loading array\\n        map(files => files.filter(isFile)),\\n        switchMap(loading =>\\n            this.files.valueChanges.pipe(\\n                startWith(this.files.value),\\n                // We filter out loading items that were removed from control before server responded\\n                map(value => loading.filter(file => value.includes(file))),\\n            ),\\n        ),\\n        startWith([]),\\n    );\\n\\n    // We start with internal changes (i.e. wrong format or size found or user removed existing error message)\\n    readonly rejected$: Observable<readonly TuiFileLike[]> = this.rejectedFiles$.pipe(\\n        switchMap(rejectedFiles =>\\n            this.files$.pipe(\\n                // We filter out Files to ignore loading files\\n                map(files => files.filter(isRejectedFile)),\\n                // We collect all newly rejected files and previously rejected since we switch mapped\\n                scan<RejectedFile[]>(\\n                    (previous, current) => [\\n                        ...previous,\\n                        ...current.filter(({file}) => this.files.value.includes(file)),\\n                    ],\\n                    [],\\n                ),\\n                // We remove server errored files from control **SIDE EFFECT**\\n                tap(files => this.removeRejected(files)),\\n                // Map new RejectedFiles to TuiFileLike with rejection reason\\n                map(files => files.map(convertRejected)),\\n                // Combine with currently present rejected files\\n                map(filtered => [...rejectedFiles, ...filtered]),\\n            ),\\n        ),\\n        startWith([]),\\n    );\\n\\n    readonly form = new FormGroup({\\n        files: this.files,\\n    });\\n\\n    onRejectedFilesChange(rejectedFiles: readonly TuiFileLike[]): void {\\n        this.rejectedFiles$.next(rejectedFiles);\\n    }\\n\\n    private removeRejected(rejectedFiles: readonly RejectedFile[]): void {\\n        const filtered = this.files.value.filter((file: File) =>\\n            rejectedFiles.every(rejectedFile => rejectedFile.file !== file),\\n        );\\n\\n        if (filtered.length !== this.files.value.length) {\\n            this.files.setValue(filtered);\\n        }\\n    }\\n\\n    private serverRequest(file: File): Observable<RejectedFile | File | null> {\\n        const delay = Math.round(Math.random() * 5000 + 500);\\n        const result =\\n            delay % 2\\n                ? null\\n                : new RejectedFile(file, `Server responded for odd number of time`);\\n\\n        return timer(delay).pipe(mapTo(result));\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiFileLike} from '@taiga-ui/kit';\\n\\n@Component({\\n    selector: `tui-input-files-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputFilesExample2 {\\n    readonly control = new FormControl([]);\\n    rejectedFiles: readonly TuiFileLike[] = [];\\n\\n    onReject(files: TuiFileLike | readonly TuiFileLike[]): void {\\n        this.rejectedFiles = [...this.rejectedFiles, ...(files as TuiFileLike[])];\\n    }\\n\\n    removeFile({name}: File): void {\\n        this.control.setValue(\\n            this.control.value.filter((current: File) => current.name !== name),\\n        );\\n    }\\n\\n    clearRejected({name}: TuiFileLike): void {\\n        this.rejectedFiles = this.rejectedFiles.filter(\\n            rejected => rejected.name !== name,\\n        );\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-input-month-range-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputMonthRangeExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl(null),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `input-month-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class InputMonthExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl(null),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-input-number-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputNumberExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl(),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_PASSWORD_TEXTS, tuiInputPasswordOptionsProvider} from '@taiga-ui/kit';\\nimport {of} from 'rxjs';\\n\\n@Component({\\n    selector: `tui-input-password-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        tuiInputPasswordOptionsProvider({\\n            icons: {\\n                hide: `tuiIconLockLarge`,\\n                show: `tuiIconLockOpenLarge`,\\n            },\\n        }),\\n        {\\n            provide: TUI_PASSWORD_TEXTS,\\n            useValue: of([``]),\\n        },\\n    ],\\n})\\nexport class TuiInputPasswordExample2 {\\n    testForm = new FormGroup({\\n        testValue: new FormControl(`password`, Validators.required),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiCountryIsoCode} from '@taiga-ui/i18n';\\n\\n@Component({\\n    selector: `tui-input-phone-international-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputPhoneExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl(``, Validators.minLength(12)),\\n    });\\n\\n    readonly countries = Object.values(TuiCountryIsoCode);\\n\\n    countryIsoCode = TuiCountryIsoCode.US;\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, Validators} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-input-phone-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputPhoneExample2 {\\n    readonly control = new FormControl(``, Validators.minLength(12));\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_NUMBER_FORMAT} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-input-range-example-2`,\\n    templateUrl: `./index.html`,\\n    styles: [\\n        `\\n            tui-input-range {\\n                max-width: 30rem;\\n            }\\n        `,\\n    ],\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        {\\n            provide: TUI_NUMBER_FORMAT,\\n            useValue: {\\n                decimalSeparator: `.`,\\n                thousandSeparator: `,`,\\n                zeroPadding: true,\\n            },\\n        },\\n    ],\\n})\\nexport class TuiInputRangeExample2 {\\n    readonly max = 50_000_001;\\n    readonly min = 5_001;\\n\\n    readonly control = new FormControl([this.min, this.max / 2]);\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {Observable, of, Subject} from 'rxjs';\\nimport {delay, startWith, switchMap} from 'rxjs/operators';\\n\\nconst databaseMockData: readonly string[] = [\\n    `John Cleese`,\\n    `Eric Idle`,\\n    `Michael Palin`,\\n    `Terry Gilliam`,\\n    `Terry Jones`,\\n    `Graham Chapman`,\\n];\\n\\n@Component({\\n    selector: `tui-input-tag-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputTagExample2 {\\n    private readonly search$ = new Subject<string>();\\n\\n    value = [];\\n\\n    readonly items$ = this.search$.pipe(\\n        switchMap(search =>\\n            this.serverRequest(search).pipe(startWith<readonly string[] | null>(null)),\\n        ),\\n        startWith(databaseMockData),\\n    );\\n\\n    onSearchChange(search: string): void {\\n        this.search$.next(search);\\n    }\\n\\n    /**\\n     * Server request emulation\\n     */\\n    private serverRequest(search: string): Observable<readonly string[]> {\\n        const result = databaseMockData.filter(item =>\\n            item.toLowerCase().includes(search.toLowerCase()),\\n        );\\n\\n        return of(result).pipe(delay(Math.random() * 1000 + 500));\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {tuiCreateTimePeriods} from '@taiga-ui/kit';\\n\\n@Component({\\n    selector: `tui-input-time-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputTimeExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl(null),\\n    });\\n\\n    items1 = tuiCreateTimePeriods();\\n    items2 = tuiCreateTimePeriods(10, 20, [0, 15, 30, 45]);\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-input-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiInputExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl(`mail@mail.ru`),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-island-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiIslandExample2 {\\n    testForm = new FormGroup({\\n        testValue: new FormControl(true),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-label-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiLabelExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl(),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-line-clamp-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiLineClampExample2 {\\n    linesLimit = 2;\\n\\n    toggle(): void {\\n        this.linesLimit = this.collpased ? 10 : 2;\\n    }\\n\\n    private get collpased(): boolean {\\n        return this.linesLimit === 2;\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-link-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiLinkExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-loader-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiLoaderExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-marker-icon-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiMarkerIconExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDay} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-mobile-calendar-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiMobileCalendarExample2 {\\n    min = new TuiDay(new Date().getFullYear(), new Date().getMonth(), 1);\\n    max = new TuiDay(new Date().getFullYear(), new Date().getMonth(), 10);\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_IS_ANDROID, TUI_IS_IOS, TUI_IS_MOBILE} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-mobile-themes-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        {\\n            provide: TUI_IS_MOBILE,\\n            useValue: true,\\n        },\\n        {\\n            provide: TUI_IS_ANDROID,\\n            useValue: false,\\n        },\\n        {\\n            provide: TUI_IS_IOS,\\n            useValue: true,\\n        },\\n    ],\\n})\\nexport class TuiMobileThemesExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-money-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiMoneyExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_DEFAULT_MATCHER} from '@taiga-ui/cdk';\\nimport {Observable, of, Subject} from 'rxjs';\\nimport {delay, filter, startWith, switchMap} from 'rxjs/operators';\\n\\nimport {default as avatar} from '!!file-loader!../../../../../assets/images/avatar.jpg';\\n\\nclass User {\\n    constructor(\\n        readonly firstName: string,\\n        readonly lastName: string,\\n        readonly avatarUrl: string | null = null,\\n    ) {}\\n\\n    toString(): string {\\n        return `${this.firstName} ${this.lastName}`;\\n    }\\n}\\n\\nconst databaseMockData: readonly User[] = [\\n    new User(`Roman`, `Sedov`, `http://marsibarsi.me/images/1x1small.jpg`),\\n    new User(`Alex`, `Inkin`, avatar),\\n    new User(`Dmitriy`, `Demenskiy`),\\n    new User(`Evgeniy`, `Mamaev`),\\n    new User(`Ivan`, `Ishmametiev`),\\n    new User(`Igor`, `Katsuba`),\\n    new User(`Yulia`, `Tsareva`),\\n];\\n\\n@Component({\\n    selector: `tui-multi-select-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiMultiSelectExample2 {\\n    readonly search$ = new Subject<string | null>();\\n\\n    readonly items$: Observable<readonly User[] | null> = this.search$.pipe(\\n        filter(value => value !== null),\\n        switchMap(search =>\\n            this.serverRequest(search).pipe(startWith<readonly User[] | null>(null)),\\n        ),\\n        startWith(databaseMockData),\\n    );\\n\\n    readonly testValue = new FormControl([databaseMockData[0]]);\\n\\n    onSearchChange(searchQuery: string | null): void {\\n        this.search$.next(searchQuery);\\n    }\\n\\n    /**\\n     * Server request emulation\\n     */\\n    private serverRequest(searchQuery: string | null): Observable<readonly User[]> {\\n        const result = databaseMockData.filter(user =>\\n            TUI_DEFAULT_MATCHER(user, searchQuery || ``),\\n        );\\n\\n        return of(result).pipe(delay(Math.random() * 1000 + 500));\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {\\n    TUI_NOTIFICATION_DEFAULT_OPTIONS,\\n    TUI_NOTIFICATION_OPTIONS,\\n    TuiNotification,\\n} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-notification-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        {\\n            provide: TUI_NOTIFICATION_OPTIONS,\\n            useValue: {\\n                ...TUI_NOTIFICATION_DEFAULT_OPTIONS,\\n                status: TuiNotification.Error,\\n                hasIcon: false,\\n            },\\n        },\\n    ],\\n})\\nexport class TuiNotificationExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-pagination-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiPaginationExample2 {\\n    activePadding = 2;\\n}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDialog} from '@taiga-ui/cdk';\\nimport {TuiAlertService} from '@taiga-ui/core';\\nimport {TuiPdfViewerOptions, TuiPdfViewerService} from '@taiga-ui/kit';\\nimport {PolymorpheusComponent} from '@tinkoff/ng-polymorpheus';\\nimport {switchMap} from 'rxjs/operators';\\n\\nimport {ActionsContent} from './actions-content.component';\\nimport {PdfContent} from './pdf-content.component';\\n\\nexport type Buttons = ReadonlyArray<\\n    Readonly<{\\n        text: string;\\n        onClick(context: TuiDialog<TuiPdfViewerOptions<Buttons>, string>): void;\\n    }>\\n>;\\n\\n@Component({\\n    selector: `tui-pdf-viewer-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiPdfViewerExample2 {\\n    constructor(\\n        @Inject(TuiAlertService)\\n        private readonly alertService: TuiAlertService,\\n        @Inject(TuiPdfViewerService) private readonly pdfService: TuiPdfViewerService,\\n    ) {}\\n\\n    show(): void {\\n        const options: TuiPdfViewerOptions<Buttons> = {\\n            label: `Taiga UI`,\\n            actions: new PolymorpheusComponent(ActionsContent),\\n            data: [\\n                {\\n                    text: `Sign`,\\n                    onClick: context => context.completeWith(`Document signed`),\\n                },\\n                {\\n                    text: `Deny`,\\n                    onClick: context => context.completeWith(`Document denied`),\\n                },\\n            ],\\n        };\\n\\n        this.pdfService\\n            .open<string>(new PolymorpheusComponent(PdfContent), options)\\n            .pipe(switchMap(response => this.alertService.open(response)))\\n            .subscribe();\\n    }\\n}\\n\";","export default \"import {Component, Inject, TemplateRef, ViewChild} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {PreviewDialogService} from '@taiga-ui/addon-preview';\\nimport {TuiDialogContext} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-preview-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiPreviewExample2 {\\n    @ViewChild(`preview`)\\n    readonly preview?: TemplateRef<TuiDialogContext<void>>;\\n\\n    constructor(\\n        @Inject(PreviewDialogService)\\n        private readonly previewDialogService: PreviewDialogService,\\n    ) {}\\n\\n    show(): void {\\n        this.previewDialogService.open(this.preview || ``).subscribe();\\n    }\\n}\\n\";","export default \"import {\\n    ChangeDetectorRef,\\n    Component,\\n    Inject,\\n    Optional,\\n    Self,\\n    ViewChild,\\n} from '@angular/core';\\nimport {NgControl} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {AbstractTuiControl, TuiNativeFocusableElement} from '@taiga-ui/cdk';\\nimport {\\n    TuiPrimitiveTextfieldComponent,\\n    tuiPrimitiveTextfieldOptionsProvider,\\n} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-primitive-textfield-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        tuiPrimitiveTextfieldOptionsProvider({\\n            iconCleaner: `tuiIconChevronUp`,\\n        }),\\n    ],\\n})\\nexport class TuiPrimitiveTextfieldExample2 extends AbstractTuiControl<string> {\\n    @ViewChild(TuiPrimitiveTextfieldComponent)\\n    private readonly textfield?: TuiPrimitiveTextfieldComponent;\\n\\n    constructor(\\n        @Optional()\\n        @Self()\\n        @Inject(NgControl)\\n        control: NgControl | null,\\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\\n    ) {\\n        super(control, changeDetectorRef);\\n    }\\n\\n    get nativeFocusableElement(): TuiNativeFocusableElement | null {\\n        return this.computedDisabled || !this.textfield\\n            ? null\\n            : this.textfield.nativeFocusableElement;\\n    }\\n\\n    get focused(): boolean {\\n        return !!this.textfield && this.textfield.focused;\\n    }\\n\\n    onValueChange(textValue: string): void {\\n        this.updateValue(textValue);\\n    }\\n\\n    onFocused(focused: boolean): void {\\n        this.updateFocused(focused);\\n    }\\n\\n    protected getFallbackValue(): string {\\n        return ``;\\n    }\\n}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_IS_CYPRESS} from '@taiga-ui/cdk';\\nimport {of, timer} from 'rxjs';\\n\\n@Component({\\n    selector: `tui-progress-bar-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiProgressBarExample2 {\\n    readonly fastValue$ = this.isCypress ? of(80) : timer(500, 100);\\n    readonly slowValue$ = this.isCypress ? of(4) : timer(500, 2000);\\n    readonly colors = [\\n        `var(--tui-support-01)`,\\n        `var(--tui-support-21)`,\\n        `lightskyblue`,\\n        `#3682db`,\\n        `var(--tui-primary)`,\\n    ];\\n\\n    constructor(@Inject(TUI_IS_CYPRESS) private readonly isCypress: boolean) {}\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-progress-circle-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiProgressCircleExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-progress-segmented-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiProgressSegmentedExample2 {}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_LOADED} from '@taiga-ui/addon-mobile';\\nimport {TUI_IS_ANDROID, TUI_IS_IOS} from '@taiga-ui/cdk';\\nimport {TuiAlertService} from '@taiga-ui/core';\\nimport {Subject} from 'rxjs';\\n\\nconst loaded$ = new Subject<void>();\\n\\n@Component({\\n    selector: `tui-pull-to-refresh-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        {\\n            provide: TUI_IS_IOS,\\n            useValue: true,\\n        },\\n        {\\n            provide: TUI_IS_ANDROID,\\n            useValue: false,\\n        },\\n        {\\n            provide: TUI_LOADED,\\n            useValue: loaded$.asObservable(),\\n        },\\n    ],\\n})\\nexport class TuiPullToRefreshExample2 {\\n    constructor(\\n        @Inject(TuiAlertService)\\n        private readonly alertService: TuiAlertService,\\n    ) {}\\n\\n    onPull(): void {\\n        this.alertService.open(`Loading...`).subscribe();\\n    }\\n\\n    finishLoading(): void {\\n        loaded$.next();\\n    }\\n}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiAlertService} from '@taiga-ui/core';\\nimport {TuiPushService} from '@taiga-ui/kit';\\nimport {switchMap, take} from 'rxjs/operators';\\n\\n@Component({\\n    selector: `tui-push-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiPushExample2 {\\n    constructor(\\n        @Inject(TuiPushService) protected readonly push: TuiPushService,\\n        @Inject(TuiAlertService) protected readonly alert: TuiAlertService,\\n    ) {}\\n\\n    onClick(): void {\\n        this.push\\n            .open(`This is heavy!`, {\\n                heading: `Great Scott!`,\\n                type: `Quote`,\\n                icon: `tuiIconVideoLarge`,\\n                buttons: [`Roads?`, `1.21 Gigawatts!?!`],\\n            })\\n            .pipe(\\n                take(1),\\n                switchMap(button => this.alert.open(button)),\\n            )\\n            .subscribe();\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-radio-block-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiRadioBlockExample2 {\\n    readonly testForm = new FormGroup({\\n        testValue: new FormControl(`orange`),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-radio-labeled-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiRadioLabeledExample2 {\\n    items = [{name: `tariff1`}, {name: `tariff2`}, {name: `tariff3`}];\\n\\n    testForm = new FormGroup({\\n        testValue1: new FormControl(this.items[0]),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-radio-list-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiRadioListExample2 {\\n    readonly items = [\\n        {\\n            name: `Simple`,\\n            description: `Something usual`,\\n        },\\n        {\\n            name: `Advanced`,\\n            description: `Something better`,\\n        },\\n        {\\n            name: `PRO`,\\n            description: `Something cool`,\\n        },\\n    ];\\n\\n    readonly testForm = new FormGroup({\\n        tariff: new FormControl(this.items[0]),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-radio-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiRadioExample2 {\\n    testForm = new FormGroup({\\n        testValue1: new FormControl(`One`),\\n        testValue2: new FormControl({value: `One`, disabled: true}),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\n\\n@Component({\\n    selector: `tui-rating-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n})\\nexport class TuiRatingExample2 {\\n    firstRate = 5;\\n    secondRate = 3;\\n    thirdRate = 4;\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiCurrency} from '@taiga-ui/addon-commerce';\\n\\nclass Card {\\n    constructor(readonly cardName: string, readonly cardNumber: string) {}\\n}\\n\\nclass Account {\\n    constructor(\\n        readonly id: string,\\n        readonly name: string,\\n        readonly amount: number,\\n        readonly currency: TuiCurrency,\\n    ) {}\\n}\\n\\n@Component({\\n    selector: `tui-select-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiSelectExample2 {\\n    cards = [\\n        new Card(`Bitcoin`, `*6713`),\\n        new Card(`Money`, `*4562`),\\n        new Card(`Charity`, `*6788`),\\n        new Card(`Subscriptions`, `*1231`),\\n    ];\\n\\n    accounts = [\\n        new Account(`1`, `RUB`, 24876.55, TuiCurrency.Ruble),\\n        new Account(`2`, `USD`, 335, TuiCurrency.Dollar),\\n        new Account(`3`, `EUR`, 10000, TuiCurrency.Euro),\\n        new Account(`4`, `PND`, 100, TuiCurrency.Pound),\\n    ];\\n\\n    testForm = new FormGroup({\\n        testValue: new FormControl(this.cards[0]),\\n        accounts: new FormControl(this.accounts[0]),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiSheetOptions} from '@taiga-ui/addon-mobile';\\n\\n@Component({\\n    selector: `tui-sheet-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiSheetExample2 {\\n    open = false;\\n\\n    readonly options: Partial<TuiSheetOptions> = {\\n        overlay: true,\\n        image: `assets/images/avatar.jpg`,\\n    };\\n\\n    toggle(): void {\\n        this.open = !this.open;\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiKeySteps} from '@taiga-ui/kit';\\n\\n@Component({\\n    selector: `tui-slider-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiSliderExample2 {\\n    readonly testValue = new FormControl();\\n\\n    keySteps: TuiKeySteps = [\\n        [(100 / 3) * 1, 100000],\\n        [(100 / 3) * (1 + 1), 300000],\\n    ];\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-stepper-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiStepperExample2 {\\n    readonly steps = [`Start Up`, `Cash In`, `Sell Out`, `Bro Down`];\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-svg-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiSvgExample2 {}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_IS_ANDROID, TUI_IS_IOS} from '@taiga-ui/cdk';\\nimport {TuiAlertService} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-tabs-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        {\\n            provide: TUI_IS_IOS,\\n            useValue: true,\\n        },\\n        {\\n            provide: TUI_IS_ANDROID,\\n            useValue: false,\\n        },\\n    ],\\n})\\nexport class TuiTabsExample2 {\\n    readonly items = [\\n        {\\n            text: `Maps`,\\n            icon: `tuiIconCard`,\\n        },\\n        {\\n            text: `Calls`,\\n            icon: `tuiIconCall`,\\n        },\\n        {\\n            text: `Settings`,\\n            icon: `tuiIconSettings`,\\n        },\\n    ];\\n\\n    activeItemIndex = 0;\\n\\n    constructor(@Inject(TuiAlertService) private readonly alerts: TuiAlertService) {}\\n\\n    onClick(item: string): void {\\n        this.alerts.open(item).subscribe();\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-tag-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiTagExample2 {\\n    tag = `Hello!`;\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-text-area-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiTextAreaExample2 {\\n    testForm = new FormGroup({\\n        testValue1: new FormControl(`A field`, Validators.required),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {tuiToggleOptionsProvider} from '@taiga-ui/kit';\\n\\n@Component({\\n    selector: `tui-toggle-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        tuiToggleOptionsProvider({\\n            icons: {\\n                toggleOff: ({$implicit}) =>\\n                    $implicit === `m`\\n                        ? `tuiIconChevronRight`\\n                        : `tuiIconChevronRightLarge`,\\n                toggleOn: ({$implicit}) =>\\n                    $implicit === `m` ? `tuiIconChevronLeft` : `tuiIconChevronLeftLarge`,\\n            },\\n            showIcons: true,\\n        }),\\n    ],\\n})\\nexport class TuiToggleExample2 {\\n    testForm = new FormGroup({\\n        testValue1: new FormControl(true),\\n        testValue2: new FormControl(false),\\n    });\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-tooltip-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiTooltipExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-tree-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    encapsulation,\\n    changeDetection,\\n})\\nexport class TuiTreeExample2 {\\n    readonly data = [\\n        `Top level 1`,\\n        [`Second level item`, [`Third level 1`, `Third level 2`, `Third level 3`]],\\n        `Top level 2`,\\n        `Top level 3`,\\n        [`Second 1`, `Second 2`],\\n    ];\\n}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiDialogService} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-dropdown-context-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiDropdownContextExample2 {\\n    readonly menuItems = [\\n        {title: `View`, iconName: `tuiIconEyeOpen`},\\n        {title: `Copy`, iconName: `tuiIconCopy`},\\n        {title: `Delete`, iconName: `tuiIconTrash`},\\n        {title: `Move`, iconName: `tuiIconFolder`},\\n    ] as const;\\n\\n    readonly tableData = [\\n        {character: `Ross Geller`, actor: `David Schwimmer`},\\n        {character: `Chandler Bing`, actor: `Matthew Perry`},\\n        {character: `Joey Tribbiani`, actor: `Matt LeBlanc`},\\n        {character: `Phoebe Buffay`, actor: `Lisa Kudrow`},\\n        {character: `Monica Geller`, actor: `Courteney Cox`},\\n        {character: `Rachel Green`, actor: `Jennifer Aniston`},\\n    ] as const;\\n\\n    readonly tableColumns = Object.keys(this.tableData[0]);\\n\\n    readonly moreOptions = [`Option 1`, `Option 2`, `Option 3`];\\n\\n    constructor(\\n        @Inject(TuiDialogService) private readonly dialogService: TuiDialogService,\\n    ) {}\\n\\n    getObjectValues = (obj: Record<string, unknown>): unknown[] => Object.values(obj);\\n\\n    printToConsole(action: string, contextInfo: unknown): void {\\n        this.dialogService\\n            .open(`[${action}]: ${JSON.stringify(contextInfo)}`)\\n            .subscribe();\\n    }\\n}\\n\";","export default \"import {Component, ElementRef, QueryList, ViewChildren} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {EMPTY_QUERY, setNativeFocused, TuiBooleanHandler, tuiPure} from '@taiga-ui/cdk';\\nimport {TuiOptionComponent} from '@taiga-ui/core';\\nimport {getWordRange} from '@taiga-ui/kit';\\n\\nimport {default as avatar} from '!!file-loader!../../../../../assets/images/avatar.jpg';\\n\\nexport interface User {\\n    readonly name: string;\\n    readonly avatar: string;\\n    readonly login: string;\\n}\\n\\n@Component({\\n    selector: `tui-dropdown-selection-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiDropdownSelectionExample2 {\\n    @ViewChildren(TuiOptionComponent, {read: ElementRef})\\n    private readonly options: QueryList<ElementRef<HTMLElement>> = EMPTY_QUERY;\\n\\n    value = `Type @ to see a dropdown`;\\n\\n    readonly items = [\\n        {\\n            name: `Alexander Inkin`,\\n            avatar,\\n            login: `a.inkin`,\\n        },\\n        {\\n            name: `Roman Sedov`,\\n            avatar: ``,\\n            login: `r.sedov`,\\n        },\\n    ];\\n\\n    get focused(): true | null {\\n        return !!this.options.length || null;\\n    }\\n\\n    predicate: TuiBooleanHandler<Range> = range =>\\n        getWordRange(range).toString().startsWith(`@`);\\n\\n    onArrow(event: Event, which: 'first' | 'last'): void {\\n        const item = this.options[which];\\n\\n        if (!item) {\\n            return;\\n        }\\n\\n        event.preventDefault();\\n        setNativeFocused(item.nativeElement);\\n    }\\n\\n    filterItems(textarea: HTMLTextAreaElement): readonly User[] {\\n        const search = this.getCurrentSearch(textarea).replace(`@`, ``);\\n\\n        return this.getFilteredItems(this.items, search);\\n    }\\n\\n    onClick(login: string, textarea: HTMLTextAreaElement): void {\\n        const search = this.getCurrentSearch(textarea);\\n        const value = this.value.replace(search, login);\\n        const caret = value.indexOf(login) + login.length;\\n\\n        this.value = value;\\n        setNativeFocused(textarea);\\n        textarea.value = value;\\n        textarea.setSelectionRange(caret, caret);\\n    }\\n\\n    @tuiPure\\n    private getFilteredItems(items: readonly User[], search: string): readonly User[] {\\n        return items.filter(\\n            ({name, login}) => login.startsWith(search) || name.startsWith(search),\\n        );\\n    }\\n\\n    private getCurrentSearch(textarea: HTMLTextAreaElement): string {\\n        return textarea.value.slice(textarea.value.indexOf(`@`), textarea.selectionStart);\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\nimport {default as avatarUrl} from '!!file-loader!../../../../../assets/images/avatar.jpg';\\n\\n@Component({\\n    selector: `tui-dropdown-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiDropdownExample2 {\\n    open = false;\\n\\n    avatarUrl = avatarUrl;\\n\\n    onMouseEnter(): void {\\n        this.open = true;\\n    }\\n\\n    onMouseLeave(): void {\\n        this.open = false;\\n    }\\n}\\n\";","export default \"import {Component, Inject} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiAlertService} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-let-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiLetExample2 {\\n    constructor(\\n        @Inject(TuiAlertService)\\n        private readonly alertService: TuiAlertService,\\n    ) {}\\n\\n    get getter(): string {\\n        this.alertService.open(`Getter called`).subscribe();\\n\\n        return `🐳`;\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {SECONDS_IN_MINUTE} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-media-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiMediaExample2 {\\n    currentTime = 0;\\n    paused = true;\\n\\n    get icon(): string {\\n        return this.paused ? `tuiIconPlayLarge` : `tuiIconPauseLarge`;\\n    }\\n\\n    getTime(time: number): string {\\n        const integer = Math.round(time || 0);\\n        const seconds = integer % SECONDS_IN_MINUTE;\\n        const minutes = (integer - seconds) / SECONDS_IN_MINUTE;\\n        const secondsString = String(seconds);\\n        const minutesString = String(minutes);\\n        const paddedSeconds =\\n            secondsString.length === 1 ? `0${secondsString}` : secondsString;\\n        const paddedMinutes =\\n            minutesString.length === 1 ? `0${minutesString}` : minutesString;\\n\\n        return `${paddedMinutes}:${paddedSeconds}`;\\n    }\\n\\n    toggleState(): void {\\n        this.paused = !this.paused;\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-overscroll-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiOverscrollExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiSwipe} from '@taiga-ui/cdk';\\nimport {Subject} from 'rxjs';\\n\\n@Component({\\n    selector: `tui-swipe-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiSwipeExample2 {\\n    readonly open$ = new Subject<boolean>();\\n\\n    toggle(open: boolean): void {\\n        this.open$.next(open);\\n    }\\n\\n    onSwipe(swipe: TuiSwipe): void {\\n        console.info(swipe.direction);\\n\\n        if (swipe.direction === `left`) {\\n            this.toggle(true);\\n        }\\n\\n        if (swipe.direction === `right`) {\\n            this.toggle(false);\\n        }\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiTime} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-skeleton-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiSkeletonExample2 {\\n    testForm = new FormGroup({\\n        nameValue: new FormControl(``, Validators.required),\\n        passwordValue: new FormControl(``, Validators.required),\\n        moneyValue: new FormControl(`100`, Validators.required),\\n        timeValue: new FormControl(new TuiTime(12, 30), Validators.required),\\n        osnoValue: new FormControl(false),\\n        usnValue: new FormControl(false),\\n        eshnValue: new FormControl(false),\\n        envdValue: new FormControl(false),\\n    });\\n\\n    skeletonVisible = false;\\n    lightMode = false;\\n\\n    showSkelet(): void {\\n        this.skeletonVisible = !this.skeletonVisible;\\n    }\\n\\n    toggleLight(): void {\\n        this.lightMode = !this.lightMode;\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-spaces-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.style.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiSpacingExample2 {}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_VALIDATION_ERRORS} from '@taiga-ui/kit';\\nimport {interval} from 'rxjs';\\nimport {map, scan, startWith} from 'rxjs/operators';\\n\\nexport function maxLengthValidator(context: {requiredLength: string}): string {\\n    return `Maximum length — ${context.requiredLength}`;\\n}\\n\\nexport function minLengthValidator(context: {requiredLength: string}): string {\\n    return `Minimum length — ${context.requiredLength}`;\\n}\\n\\n@Component({\\n    selector: `tui-field-error-pipe-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n    providers: [\\n        {\\n            provide: TUI_VALIDATION_ERRORS,\\n            useValue: {\\n                required: `Enter this!`,\\n                email: `Enter a valid email`,\\n                maxlength: maxLengthValidator,\\n                minlength: minLengthValidator,\\n                min: interval(2000).pipe(\\n                    scan(acc => !acc, false),\\n                    map(val => (val ? `Fix please` : `Min number 3`)),\\n                    startWith(`Min number 3`),\\n                ),\\n            },\\n        },\\n    ],\\n})\\nexport class TuiFieldErrorPipeExample2 {\\n    readonly testValue1 = new FormControl(``, [\\n        Validators.minLength(4),\\n        Validators.maxLength(4),\\n    ]);\\n\\n    readonly testValue2 = new FormControl(``, [Validators.required, Validators.email]);\\n\\n    readonly testValue3 = new FormControl(2, [Validators.min(3)]);\\n\\n    readonly testForm = new FormGroup({\\n        testValue1: this.testValue1,\\n        testValue2: this.testValue2,\\n        testValue3: this.testValue3,\\n    });\\n\\n    constructor() {\\n        this.testValue1.valueChanges.subscribe(() => {\\n            this.testValue1.markAsTouched();\\n        });\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\n@Component({\\n    selector: `tui-filter-by-input-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiFilterByInputExample2 {\\n    readonly items = [\\n        `John Cleese`,\\n        `Eric Idle`,\\n        `Graham Chapman`,\\n        `Michael Palin`,\\n        `Terry Gilliam`,\\n        `Terry Jones`,\\n    ];\\n\\n    readonly form = new FormGroup({\\n        user: new FormControl(),\\n    });\\n\\n    readonly matcher = (name: string, search: string): boolean =>\\n        name.split(` `).pop()!.toLowerCase().startsWith(search.toLowerCase());\\n}\\n\";","export default \"import {Component, Inject, TemplateRef, ViewChild} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TuiAlertContext} from '@taiga-ui/cdk';\\nimport {TuiAlertOptions, TuiAlertService, TuiNotification} from '@taiga-ui/core';\\n\\n@Component({\\n    selector: `tui-alerts-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiAlertsExampleComponent2 {\\n    @ViewChild(`withdrawTemplate`)\\n    withdrawTemplate?: TemplateRef<TuiAlertContext<TuiAlertOptions<unknown>>>;\\n\\n    @ViewChild(`depositTemplate`)\\n    depositTemplate?: TemplateRef<TuiAlertContext<TuiAlertOptions<unknown>>>;\\n\\n    money = 1000;\\n\\n    constructor(\\n        @Inject(TuiAlertService)\\n        private readonly alertService: TuiAlertService,\\n    ) {}\\n\\n    showWithdrawAlert(): void {\\n        this.alertService\\n            .open(this.withdrawTemplate || ``, {\\n                label: `A template sample`,\\n                status: TuiNotification.Warning,\\n                autoClose: false,\\n            })\\n            .subscribe();\\n    }\\n\\n    showDepositAlert(): void {\\n        this.alertService\\n            .open(this.depositTemplate || ``, {\\n                label: `A template sample`,\\n                status: TuiNotification.Success,\\n                autoClose: false,\\n            })\\n            .subscribe();\\n    }\\n\\n    withdraw(): void {\\n        this.money -= 100;\\n    }\\n\\n    deposit(): void {\\n        this.money += 100;\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {\\n    TuiTablePaginationOptions,\\n    tuiTablePaginationOptionsProvider,\\n} from '@taiga-ui/addon-table';\\n\\nconst customOptionContent: TuiTablePaginationOptions['sizeOptionContent'] = ({\\n    $implicit,\\n    total,\\n}) => {\\n    switch ($implicit) {\\n        case 10:\\n            return `Ten`;\\n        case total:\\n            return `Show all rows`;\\n        default:\\n            return $implicit;\\n    }\\n};\\n\\n@Component({\\n    selector: `tui-table-pagination-example-2`,\\n    templateUrl: `./index.html`,\\n    providers: [\\n        tuiTablePaginationOptionsProvider({sizeOptionContent: customOptionContent}),\\n    ],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiTablePaginationExample2 {\\n    total = 350;\\n    sizeOptions = [10, 50, 100, this.total];\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\n\\ninterface User {\\n    readonly name: string;\\n    readonly email: string;\\n    readonly status: 'alive' | 'deceased';\\n    readonly tags: readonly string[];\\n}\\n\\n@Component({\\n    selector: `tui-table-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiTableExample2 {\\n    readonly columns = [`name`, `email`, `status`, `tags`, `actions`];\\n\\n    users: readonly User[] = [\\n        {\\n            name: `Michael Palin`,\\n            email: `m.palin@montypython.com`,\\n            status: `alive`,\\n            tags: [`Funny`],\\n        },\\n        {\\n            name: `Eric Idle`,\\n            email: `e.idle@montypython.com`,\\n            status: `alive`,\\n            tags: [`Funny`, `Music`],\\n        },\\n        {\\n            name: `John Cleese`,\\n            email: `j.cleese@montypython.com`,\\n            status: `alive`,\\n            tags: [`Funny`, `Tall`, `Actor`],\\n        },\\n        {\\n            name: `Terry Jones`,\\n            email: ``,\\n            status: `deceased`,\\n            tags: [`Funny`, `Director`],\\n        },\\n        {\\n            name: `Terry Gilliam`,\\n            email: `t.gilliam@montypython.com`,\\n            status: `alive`,\\n            tags: [`Funny`, `Director`],\\n        },\\n        {\\n            name: `Graham Chapman`,\\n            email: ``,\\n            status: `deceased`,\\n            tags: [`Funny`, `King Arthur`],\\n        },\\n    ];\\n\\n    remove(item: User): void {\\n        this.users = this.users.filter(user => user !== item);\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {padStart} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-format-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiFormatExample2 {\\n    parametersForm = new FormGroup({\\n        sourceString: new FormControl(`Friend!`),\\n        minResultLength: new FormControl(21),\\n        padString: new FormControl(`Hey, `),\\n    });\\n\\n    get paddedStart(): string {\\n        const {sourceString, minResultLength, padString} = this.parametersForm.value;\\n\\n        return padStart(sourceString || ``, minResultLength || 0, padString || ` `);\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {FormControl, FormGroup} from '@angular/forms';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {inRange} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-math-example-2`,\\n    templateUrl: `./index.html`,\\n    styleUrls: [`./index.less`],\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiMathExample2 {\\n    parametersForm = new FormGroup({\\n        value: new FormControl(13),\\n        fromInclude: new FormControl(5),\\n        toExclude: new FormControl(42),\\n    });\\n\\n    get ranged(): boolean {\\n        const {value, fromInclude, toExclude} = this.parametersForm.value;\\n\\n        return inRange(value, fromInclude, toExclude);\\n    }\\n}\\n\";","export default \"import {Component} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {flatLength} from '@taiga-ui/cdk';\\n\\n@Component({\\n    selector: `tui-miscellaneous-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiMiscellaneousExample2 {\\n    get flatted(): number {\\n        return flatLength([\\n            [1, 2],\\n            [3, 4],\\n            [5, 6],\\n        ]);\\n    }\\n}\\n\";","export default \"import {Component, Inject, Optional} from '@angular/core';\\nimport {changeDetection} from '@demo/emulate/change-detection';\\nimport {encapsulation} from '@demo/emulate/encapsulation';\\nimport {TUI_DIALOGS} from '@taiga-ui/cdk';\\nimport {Observable} from 'rxjs';\\n\\n@Component({\\n    selector: `tui-token-example-2`,\\n    templateUrl: `./index.html`,\\n    changeDetection,\\n    encapsulation,\\n})\\nexport class TuiTokensExample2 {\\n    constructor(\\n        @Optional()\\n        @Inject(TUI_DIALOGS)\\n        readonly dialogs: ReadonlyArray<Observable<readonly unknown[]>> | null,\\n    ) {}\\n}\\n\";"],"sourceRoot":"webpack:///"}